require=(function e(t,n,r){function s(o,u){if(!n[o]){if(!t[o]){var a=typeof require=="function"&&require;if(!u&&a)return a(o,!0);if(i)return i(o,!0);var f=new Error("Cannot find module '"+o+"'");throw f.code="MODULE_NOT_FOUND",f}var l=n[o]={exports:{}};t[o][0].call(l.exports,function(e){var n=t[o][1][e];return s(n?n:e)},l,l.exports,e,t,n,r)}return n[o].exports}var i=typeof require=="function"&&require;for(var o=0;o<r.length;o++)s(r[o]);return s})({1:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.nextTick()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected() {
            pendingCount--;
            if (pendingCount === 0) {
                deferred.reject(new Error(
                    "Can't get fulfillment value from any promise, all " +
                    "promises were rejected."
                ));
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))

},{"_process":7}],2:[function(require,module,exports){
/*!
 * The buffer module from node.js, for the browser.
 *
 * @author   Feross Aboukhadijeh <feross@feross.org> <http://feross.org>
 * @license  MIT
 */

var base64 = require('base64-js')
var ieee754 = require('ieee754')
var isArray = require('is-array')

exports.Buffer = Buffer
exports.SlowBuffer = SlowBuffer
exports.INSPECT_MAX_BYTES = 50
Buffer.poolSize = 8192 // not used by this implementation

var rootParent = {}

/**
 * If `Buffer.TYPED_ARRAY_SUPPORT`:
 *   === true    Use Uint8Array implementation (fastest)
 *   === false   Use Object implementation (most compatible, even IE6)
 *
 * Browsers that support typed arrays are IE 10+, Firefox 4+, Chrome 7+, Safari 5.1+,
 * Opera 11.6+, iOS 4.2+.
 *
 * Due to various browser bugs, sometimes the Object implementation will be used even
 * when the browser supports typed arrays.
 *
 * Note:
 *
 *   - Firefox 4-29 lacks support for adding new properties to `Uint8Array` instances,
 *     See: https://bugzilla.mozilla.org/show_bug.cgi?id=695438.
 *
 *   - Safari 5-7 lacks support for changing the `Object.prototype.constructor` property
 *     on objects.
 *
 *   - Chrome 9-10 is missing the `TypedArray.prototype.subarray` function.
 *
 *   - IE10 has a broken `TypedArray.prototype.subarray` function which returns arrays of
 *     incorrect length in some situations.

 * We detect these buggy browsers and set `Buffer.TYPED_ARRAY_SUPPORT` to `false` so they
 * get the Object implementation, which is slower but behaves correctly.
 */
Buffer.TYPED_ARRAY_SUPPORT = (function () {
  function Bar () {}
  try {
    var arr = new Uint8Array(1)
    arr.foo = function () { return 42 }
    arr.constructor = Bar
    return arr.foo() === 42 && // typed array instances can be augmented
        arr.constructor === Bar && // constructor can be set
        typeof arr.subarray === 'function' && // chrome 9-10 lack `subarray`
        arr.subarray(1, 1).byteLength === 0 // ie10 has broken `subarray`
  } catch (e) {
    return false
  }
})()

function kMaxLength () {
  return Buffer.TYPED_ARRAY_SUPPORT
    ? 0x7fffffff
    : 0x3fffffff
}

/**
 * Class: Buffer
 * =============
 *
 * The Buffer constructor returns instances of `Uint8Array` that are augmented
 * with function properties for all the node `Buffer` API functions. We use
 * `Uint8Array` so that square bracket notation works as expected -- it returns
 * a single octet.
 *
 * By augmenting the instances, we can avoid modifying the `Uint8Array`
 * prototype.
 */
function Buffer (arg) {
  if (!(this instanceof Buffer)) {
    // Avoid going through an ArgumentsAdaptorTrampoline in the common case.
    if (arguments.length > 1) return new Buffer(arg, arguments[1])
    return new Buffer(arg)
  }

  this.length = 0
  this.parent = undefined

  // Common case.
  if (typeof arg === 'number') {
    return fromNumber(this, arg)
  }

  // Slightly less common case.
  if (typeof arg === 'string') {
    return fromString(this, arg, arguments.length > 1 ? arguments[1] : 'utf8')
  }

  // Unusual.
  return fromObject(this, arg)
}

function fromNumber (that, length) {
  that = allocate(that, length < 0 ? 0 : checked(length) | 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) {
    for (var i = 0; i < length; i++) {
      that[i] = 0
    }
  }
  return that
}

function fromString (that, string, encoding) {
  if (typeof encoding !== 'string' || encoding === '') encoding = 'utf8'

  // Assumption: byteLength() return value is always < kMaxLength.
  var length = byteLength(string, encoding) | 0
  that = allocate(that, length)

  that.write(string, encoding)
  return that
}

function fromObject (that, object) {
  if (Buffer.isBuffer(object)) return fromBuffer(that, object)

  if (isArray(object)) return fromArray(that, object)

  if (object == null) {
    throw new TypeError('must start with number, buffer, array or string')
  }

  if (typeof ArrayBuffer !== 'undefined') {
    if (object.buffer instanceof ArrayBuffer) {
      return fromTypedArray(that, object)
    }
    if (object instanceof ArrayBuffer) {
      return fromArrayBuffer(that, object)
    }
  }

  if (object.length) return fromArrayLike(that, object)

  return fromJsonObject(that, object)
}

function fromBuffer (that, buffer) {
  var length = checked(buffer.length) | 0
  that = allocate(that, length)
  buffer.copy(that, 0, 0, length)
  return that
}

function fromArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Duplicate of fromArray() to keep fromArray() monomorphic.
function fromTypedArray (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  // Truncating the elements is probably not what people expect from typed
  // arrays with BYTES_PER_ELEMENT > 1 but it's compatible with the behavior
  // of the old Buffer constructor.
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function fromArrayBuffer (that, array) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    array.byteLength
    that = Buffer._augment(new Uint8Array(array))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that = fromTypedArray(that, new Uint8Array(array))
  }
  return that
}

function fromArrayLike (that, array) {
  var length = checked(array.length) | 0
  that = allocate(that, length)
  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

// Deserialize { type: 'Buffer', data: [1,2,3,...] } into a Buffer object.
// Returns a zero-length buffer for inputs that don't conform to the spec.
function fromJsonObject (that, object) {
  var array
  var length = 0

  if (object.type === 'Buffer' && isArray(object.data)) {
    array = object.data
    length = checked(array.length) | 0
  }
  that = allocate(that, length)

  for (var i = 0; i < length; i += 1) {
    that[i] = array[i] & 255
  }
  return that
}

function allocate (that, length) {
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    // Return an augmented `Uint8Array` instance, for best performance
    that = Buffer._augment(new Uint8Array(length))
  } else {
    // Fallback: Return an object instance of the Buffer class
    that.length = length
    that._isBuffer = true
  }

  var fromPool = length !== 0 && length <= Buffer.poolSize >>> 1
  if (fromPool) that.parent = rootParent

  return that
}

function checked (length) {
  // Note: cannot use `length < kMaxLength` here because that fails when
  // length is NaN (which is otherwise coerced to zero.)
  if (length >= kMaxLength()) {
    throw new RangeError('Attempt to allocate Buffer larger than maximum ' +
                         'size: 0x' + kMaxLength().toString(16) + ' bytes')
  }
  return length | 0
}

function SlowBuffer (subject, encoding) {
  if (!(this instanceof SlowBuffer)) return new SlowBuffer(subject, encoding)

  var buf = new Buffer(subject, encoding)
  delete buf.parent
  return buf
}

Buffer.isBuffer = function isBuffer (b) {
  return !!(b != null && b._isBuffer)
}

Buffer.compare = function compare (a, b) {
  if (!Buffer.isBuffer(a) || !Buffer.isBuffer(b)) {
    throw new TypeError('Arguments must be Buffers')
  }

  if (a === b) return 0

  var x = a.length
  var y = b.length

  var i = 0
  var len = Math.min(x, y)
  while (i < len) {
    if (a[i] !== b[i]) break

    ++i
  }

  if (i !== len) {
    x = a[i]
    y = b[i]
  }

  if (x < y) return -1
  if (y < x) return 1
  return 0
}

Buffer.isEncoding = function isEncoding (encoding) {
  switch (String(encoding).toLowerCase()) {
    case 'hex':
    case 'utf8':
    case 'utf-8':
    case 'ascii':
    case 'binary':
    case 'base64':
    case 'raw':
    case 'ucs2':
    case 'ucs-2':
    case 'utf16le':
    case 'utf-16le':
      return true
    default:
      return false
  }
}

Buffer.concat = function concat (list, length) {
  if (!isArray(list)) throw new TypeError('list argument must be an Array of Buffers.')

  if (list.length === 0) {
    return new Buffer(0)
  }

  var i
  if (length === undefined) {
    length = 0
    for (i = 0; i < list.length; i++) {
      length += list[i].length
    }
  }

  var buf = new Buffer(length)
  var pos = 0
  for (i = 0; i < list.length; i++) {
    var item = list[i]
    item.copy(buf, pos)
    pos += item.length
  }
  return buf
}

function byteLength (string, encoding) {
  if (typeof string !== 'string') string = '' + string

  var len = string.length
  if (len === 0) return 0

  // Use a for loop to avoid recursion
  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'ascii':
      case 'binary':
      // Deprecated
      case 'raw':
      case 'raws':
        return len
      case 'utf8':
      case 'utf-8':
        return utf8ToBytes(string).length
      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return len * 2
      case 'hex':
        return len >>> 1
      case 'base64':
        return base64ToBytes(string).length
      default:
        if (loweredCase) return utf8ToBytes(string).length // assume utf8
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}
Buffer.byteLength = byteLength

// pre-set for values that may exist in the future
Buffer.prototype.length = undefined
Buffer.prototype.parent = undefined

function slowToString (encoding, start, end) {
  var loweredCase = false

  start = start | 0
  end = end === undefined || end === Infinity ? this.length : end | 0

  if (!encoding) encoding = 'utf8'
  if (start < 0) start = 0
  if (end > this.length) end = this.length
  if (end <= start) return ''

  while (true) {
    switch (encoding) {
      case 'hex':
        return hexSlice(this, start, end)

      case 'utf8':
      case 'utf-8':
        return utf8Slice(this, start, end)

      case 'ascii':
        return asciiSlice(this, start, end)

      case 'binary':
        return binarySlice(this, start, end)

      case 'base64':
        return base64Slice(this, start, end)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return utf16leSlice(this, start, end)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = (encoding + '').toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toString = function toString () {
  var length = this.length | 0
  if (length === 0) return ''
  if (arguments.length === 0) return utf8Slice(this, 0, length)
  return slowToString.apply(this, arguments)
}

Buffer.prototype.equals = function equals (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return true
  return Buffer.compare(this, b) === 0
}

Buffer.prototype.inspect = function inspect () {
  var str = ''
  var max = exports.INSPECT_MAX_BYTES
  if (this.length > 0) {
    str = this.toString('hex', 0, max).match(/.{2}/g).join(' ')
    if (this.length > max) str += ' ... '
  }
  return '<Buffer ' + str + '>'
}

Buffer.prototype.compare = function compare (b) {
  if (!Buffer.isBuffer(b)) throw new TypeError('Argument must be a Buffer')
  if (this === b) return 0
  return Buffer.compare(this, b)
}

Buffer.prototype.indexOf = function indexOf (val, byteOffset) {
  if (byteOffset > 0x7fffffff) byteOffset = 0x7fffffff
  else if (byteOffset < -0x80000000) byteOffset = -0x80000000
  byteOffset >>= 0

  if (this.length === 0) return -1
  if (byteOffset >= this.length) return -1

  // Negative offsets start from the end of the buffer
  if (byteOffset < 0) byteOffset = Math.max(this.length + byteOffset, 0)

  if (typeof val === 'string') {
    if (val.length === 0) return -1 // special case: looking for empty string always fails
    return String.prototype.indexOf.call(this, val, byteOffset)
  }
  if (Buffer.isBuffer(val)) {
    return arrayIndexOf(this, val, byteOffset)
  }
  if (typeof val === 'number') {
    if (Buffer.TYPED_ARRAY_SUPPORT && Uint8Array.prototype.indexOf === 'function') {
      return Uint8Array.prototype.indexOf.call(this, val, byteOffset)
    }
    return arrayIndexOf(this, [ val ], byteOffset)
  }

  function arrayIndexOf (arr, val, byteOffset) {
    var foundIndex = -1
    for (var i = 0; byteOffset + i < arr.length; i++) {
      if (arr[byteOffset + i] === val[foundIndex === -1 ? 0 : i - foundIndex]) {
        if (foundIndex === -1) foundIndex = i
        if (i - foundIndex + 1 === val.length) return byteOffset + foundIndex
      } else {
        foundIndex = -1
      }
    }
    return -1
  }

  throw new TypeError('val must be string, number or Buffer')
}

// `get` is deprecated
Buffer.prototype.get = function get (offset) {
  console.log('.get() is deprecated. Access using array indexes instead.')
  return this.readUInt8(offset)
}

// `set` is deprecated
Buffer.prototype.set = function set (v, offset) {
  console.log('.set() is deprecated. Access using array indexes instead.')
  return this.writeUInt8(v, offset)
}

function hexWrite (buf, string, offset, length) {
  offset = Number(offset) || 0
  var remaining = buf.length - offset
  if (!length) {
    length = remaining
  } else {
    length = Number(length)
    if (length > remaining) {
      length = remaining
    }
  }

  // must be an even number of digits
  var strLen = string.length
  if (strLen % 2 !== 0) throw new Error('Invalid hex string')

  if (length > strLen / 2) {
    length = strLen / 2
  }
  for (var i = 0; i < length; i++) {
    var parsed = parseInt(string.substr(i * 2, 2), 16)
    if (isNaN(parsed)) throw new Error('Invalid hex string')
    buf[offset + i] = parsed
  }
  return i
}

function utf8Write (buf, string, offset, length) {
  return blitBuffer(utf8ToBytes(string, buf.length - offset), buf, offset, length)
}

function asciiWrite (buf, string, offset, length) {
  return blitBuffer(asciiToBytes(string), buf, offset, length)
}

function binaryWrite (buf, string, offset, length) {
  return asciiWrite(buf, string, offset, length)
}

function base64Write (buf, string, offset, length) {
  return blitBuffer(base64ToBytes(string), buf, offset, length)
}

function ucs2Write (buf, string, offset, length) {
  return blitBuffer(utf16leToBytes(string, buf.length - offset), buf, offset, length)
}

Buffer.prototype.write = function write (string, offset, length, encoding) {
  // Buffer#write(string)
  if (offset === undefined) {
    encoding = 'utf8'
    length = this.length
    offset = 0
  // Buffer#write(string, encoding)
  } else if (length === undefined && typeof offset === 'string') {
    encoding = offset
    length = this.length
    offset = 0
  // Buffer#write(string, offset[, length][, encoding])
  } else if (isFinite(offset)) {
    offset = offset | 0
    if (isFinite(length)) {
      length = length | 0
      if (encoding === undefined) encoding = 'utf8'
    } else {
      encoding = length
      length = undefined
    }
  // legacy write(string, encoding, offset, length) - remove in v0.13
  } else {
    var swap = encoding
    encoding = offset
    offset = length | 0
    length = swap
  }

  var remaining = this.length - offset
  if (length === undefined || length > remaining) length = remaining

  if ((string.length > 0 && (length < 0 || offset < 0)) || offset > this.length) {
    throw new RangeError('attempt to write outside buffer bounds')
  }

  if (!encoding) encoding = 'utf8'

  var loweredCase = false
  for (;;) {
    switch (encoding) {
      case 'hex':
        return hexWrite(this, string, offset, length)

      case 'utf8':
      case 'utf-8':
        return utf8Write(this, string, offset, length)

      case 'ascii':
        return asciiWrite(this, string, offset, length)

      case 'binary':
        return binaryWrite(this, string, offset, length)

      case 'base64':
        // Warning: maxLength not taken into account in base64Write
        return base64Write(this, string, offset, length)

      case 'ucs2':
      case 'ucs-2':
      case 'utf16le':
      case 'utf-16le':
        return ucs2Write(this, string, offset, length)

      default:
        if (loweredCase) throw new TypeError('Unknown encoding: ' + encoding)
        encoding = ('' + encoding).toLowerCase()
        loweredCase = true
    }
  }
}

Buffer.prototype.toJSON = function toJSON () {
  return {
    type: 'Buffer',
    data: Array.prototype.slice.call(this._arr || this, 0)
  }
}

function base64Slice (buf, start, end) {
  if (start === 0 && end === buf.length) {
    return base64.fromByteArray(buf)
  } else {
    return base64.fromByteArray(buf.slice(start, end))
  }
}

function utf8Slice (buf, start, end) {
  end = Math.min(buf.length, end)
  var res = []

  var i = start
  while (i < end) {
    var firstByte = buf[i]
    var codePoint = null
    var bytesPerSequence = (firstByte > 0xEF) ? 4
      : (firstByte > 0xDF) ? 3
      : (firstByte > 0xBF) ? 2
      : 1

    if (i + bytesPerSequence <= end) {
      var secondByte, thirdByte, fourthByte, tempCodePoint

      switch (bytesPerSequence) {
        case 1:
          if (firstByte < 0x80) {
            codePoint = firstByte
          }
          break
        case 2:
          secondByte = buf[i + 1]
          if ((secondByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0x1F) << 0x6 | (secondByte & 0x3F)
            if (tempCodePoint > 0x7F) {
              codePoint = tempCodePoint
            }
          }
          break
        case 3:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0xC | (secondByte & 0x3F) << 0x6 | (thirdByte & 0x3F)
            if (tempCodePoint > 0x7FF && (tempCodePoint < 0xD800 || tempCodePoint > 0xDFFF)) {
              codePoint = tempCodePoint
            }
          }
          break
        case 4:
          secondByte = buf[i + 1]
          thirdByte = buf[i + 2]
          fourthByte = buf[i + 3]
          if ((secondByte & 0xC0) === 0x80 && (thirdByte & 0xC0) === 0x80 && (fourthByte & 0xC0) === 0x80) {
            tempCodePoint = (firstByte & 0xF) << 0x12 | (secondByte & 0x3F) << 0xC | (thirdByte & 0x3F) << 0x6 | (fourthByte & 0x3F)
            if (tempCodePoint > 0xFFFF && tempCodePoint < 0x110000) {
              codePoint = tempCodePoint
            }
          }
      }
    }

    if (codePoint === null) {
      // we did not generate a valid codePoint so insert a
      // replacement char (U+FFFD) and advance only 1 byte
      codePoint = 0xFFFD
      bytesPerSequence = 1
    } else if (codePoint > 0xFFFF) {
      // encode to utf16 (surrogate pair dance)
      codePoint -= 0x10000
      res.push(codePoint >>> 10 & 0x3FF | 0xD800)
      codePoint = 0xDC00 | codePoint & 0x3FF
    }

    res.push(codePoint)
    i += bytesPerSequence
  }

  return decodeCodePointsArray(res)
}

// Based on http://stackoverflow.com/a/22747272/680742, the browser with
// the lowest limit is Chrome, with 0x10000 args.
// We go 1 magnitude less, for safety
var MAX_ARGUMENTS_LENGTH = 0x1000

function decodeCodePointsArray (codePoints) {
  var len = codePoints.length
  if (len <= MAX_ARGUMENTS_LENGTH) {
    return String.fromCharCode.apply(String, codePoints) // avoid extra slice()
  }

  // Decode in chunks to avoid "call stack size exceeded".
  var res = ''
  var i = 0
  while (i < len) {
    res += String.fromCharCode.apply(
      String,
      codePoints.slice(i, i += MAX_ARGUMENTS_LENGTH)
    )
  }
  return res
}

function asciiSlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i] & 0x7F)
  }
  return ret
}

function binarySlice (buf, start, end) {
  var ret = ''
  end = Math.min(buf.length, end)

  for (var i = start; i < end; i++) {
    ret += String.fromCharCode(buf[i])
  }
  return ret
}

function hexSlice (buf, start, end) {
  var len = buf.length

  if (!start || start < 0) start = 0
  if (!end || end < 0 || end > len) end = len

  var out = ''
  for (var i = start; i < end; i++) {
    out += toHex(buf[i])
  }
  return out
}

function utf16leSlice (buf, start, end) {
  var bytes = buf.slice(start, end)
  var res = ''
  for (var i = 0; i < bytes.length; i += 2) {
    res += String.fromCharCode(bytes[i] + bytes[i + 1] * 256)
  }
  return res
}

Buffer.prototype.slice = function slice (start, end) {
  var len = this.length
  start = ~~start
  end = end === undefined ? len : ~~end

  if (start < 0) {
    start += len
    if (start < 0) start = 0
  } else if (start > len) {
    start = len
  }

  if (end < 0) {
    end += len
    if (end < 0) end = 0
  } else if (end > len) {
    end = len
  }

  if (end < start) end = start

  var newBuf
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    newBuf = Buffer._augment(this.subarray(start, end))
  } else {
    var sliceLen = end - start
    newBuf = new Buffer(sliceLen, undefined)
    for (var i = 0; i < sliceLen; i++) {
      newBuf[i] = this[i + start]
    }
  }

  if (newBuf.length) newBuf.parent = this.parent || this

  return newBuf
}

/*
 * Need to make sure that buffer isn't trying to write out of bounds.
 */
function checkOffset (offset, ext, length) {
  if ((offset % 1) !== 0 || offset < 0) throw new RangeError('offset is not uint')
  if (offset + ext > length) throw new RangeError('Trying to access beyond buffer length')
}

Buffer.prototype.readUIntLE = function readUIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }

  return val
}

Buffer.prototype.readUIntBE = function readUIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) {
    checkOffset(offset, byteLength, this.length)
  }

  var val = this[offset + --byteLength]
  var mul = 1
  while (byteLength > 0 && (mul *= 0x100)) {
    val += this[offset + --byteLength] * mul
  }

  return val
}

Buffer.prototype.readUInt8 = function readUInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  return this[offset]
}

Buffer.prototype.readUInt16LE = function readUInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return this[offset] | (this[offset + 1] << 8)
}

Buffer.prototype.readUInt16BE = function readUInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  return (this[offset] << 8) | this[offset + 1]
}

Buffer.prototype.readUInt32LE = function readUInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return ((this[offset]) |
      (this[offset + 1] << 8) |
      (this[offset + 2] << 16)) +
      (this[offset + 3] * 0x1000000)
}

Buffer.prototype.readUInt32BE = function readUInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] * 0x1000000) +
    ((this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    this[offset + 3])
}

Buffer.prototype.readIntLE = function readIntLE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var val = this[offset]
  var mul = 1
  var i = 0
  while (++i < byteLength && (mul *= 0x100)) {
    val += this[offset + i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readIntBE = function readIntBE (offset, byteLength, noAssert) {
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkOffset(offset, byteLength, this.length)

  var i = byteLength
  var mul = 1
  var val = this[offset + --i]
  while (i > 0 && (mul *= 0x100)) {
    val += this[offset + --i] * mul
  }
  mul *= 0x80

  if (val >= mul) val -= Math.pow(2, 8 * byteLength)

  return val
}

Buffer.prototype.readInt8 = function readInt8 (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 1, this.length)
  if (!(this[offset] & 0x80)) return (this[offset])
  return ((0xff - this[offset] + 1) * -1)
}

Buffer.prototype.readInt16LE = function readInt16LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset] | (this[offset + 1] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt16BE = function readInt16BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 2, this.length)
  var val = this[offset + 1] | (this[offset] << 8)
  return (val & 0x8000) ? val | 0xFFFF0000 : val
}

Buffer.prototype.readInt32LE = function readInt32LE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset]) |
    (this[offset + 1] << 8) |
    (this[offset + 2] << 16) |
    (this[offset + 3] << 24)
}

Buffer.prototype.readInt32BE = function readInt32BE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)

  return (this[offset] << 24) |
    (this[offset + 1] << 16) |
    (this[offset + 2] << 8) |
    (this[offset + 3])
}

Buffer.prototype.readFloatLE = function readFloatLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, true, 23, 4)
}

Buffer.prototype.readFloatBE = function readFloatBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 4, this.length)
  return ieee754.read(this, offset, false, 23, 4)
}

Buffer.prototype.readDoubleLE = function readDoubleLE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, true, 52, 8)
}

Buffer.prototype.readDoubleBE = function readDoubleBE (offset, noAssert) {
  if (!noAssert) checkOffset(offset, 8, this.length)
  return ieee754.read(this, offset, false, 52, 8)
}

function checkInt (buf, value, offset, ext, max, min) {
  if (!Buffer.isBuffer(buf)) throw new TypeError('buffer must be a Buffer instance')
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
}

Buffer.prototype.writeUIntLE = function writeUIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var mul = 1
  var i = 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUIntBE = function writeUIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  byteLength = byteLength | 0
  if (!noAssert) checkInt(this, value, offset, byteLength, Math.pow(2, 8 * byteLength), 0)

  var i = byteLength - 1
  var mul = 1
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = (value / mul) & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeUInt8 = function writeUInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0xff, 0)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  this[offset] = value
  return offset + 1
}

function objectWriteUInt16 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 2); i < j; i++) {
    buf[offset + i] = (value & (0xff << (8 * (littleEndian ? i : 1 - i)))) >>>
      (littleEndian ? i : 1 - i) * 8
  }
}

Buffer.prototype.writeUInt16LE = function writeUInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeUInt16BE = function writeUInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0xffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

function objectWriteUInt32 (buf, value, offset, littleEndian) {
  if (value < 0) value = 0xffffffff + value + 1
  for (var i = 0, j = Math.min(buf.length - offset, 4); i < j; i++) {
    buf[offset + i] = (value >>> (littleEndian ? i : 3 - i) * 8) & 0xff
  }
}

Buffer.prototype.writeUInt32LE = function writeUInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset + 3] = (value >>> 24)
    this[offset + 2] = (value >>> 16)
    this[offset + 1] = (value >>> 8)
    this[offset] = value
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeUInt32BE = function writeUInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0xffffffff, 0)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

Buffer.prototype.writeIntLE = function writeIntLE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = 0
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset] = value & 0xFF
  while (++i < byteLength && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeIntBE = function writeIntBE (value, offset, byteLength, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) {
    var limit = Math.pow(2, 8 * byteLength - 1)

    checkInt(this, value, offset, byteLength, limit - 1, -limit)
  }

  var i = byteLength - 1
  var mul = 1
  var sub = value < 0 ? 1 : 0
  this[offset + i] = value & 0xFF
  while (--i >= 0 && (mul *= 0x100)) {
    this[offset + i] = ((value / mul) >> 0) - sub & 0xFF
  }

  return offset + byteLength
}

Buffer.prototype.writeInt8 = function writeInt8 (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 1, 0x7f, -0x80)
  if (!Buffer.TYPED_ARRAY_SUPPORT) value = Math.floor(value)
  if (value < 0) value = 0xff + value + 1
  this[offset] = value
  return offset + 1
}

Buffer.prototype.writeInt16LE = function writeInt16LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
  } else {
    objectWriteUInt16(this, value, offset, true)
  }
  return offset + 2
}

Buffer.prototype.writeInt16BE = function writeInt16BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 2, 0x7fff, -0x8000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 8)
    this[offset + 1] = value
  } else {
    objectWriteUInt16(this, value, offset, false)
  }
  return offset + 2
}

Buffer.prototype.writeInt32LE = function writeInt32LE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = value
    this[offset + 1] = (value >>> 8)
    this[offset + 2] = (value >>> 16)
    this[offset + 3] = (value >>> 24)
  } else {
    objectWriteUInt32(this, value, offset, true)
  }
  return offset + 4
}

Buffer.prototype.writeInt32BE = function writeInt32BE (value, offset, noAssert) {
  value = +value
  offset = offset | 0
  if (!noAssert) checkInt(this, value, offset, 4, 0x7fffffff, -0x80000000)
  if (value < 0) value = 0xffffffff + value + 1
  if (Buffer.TYPED_ARRAY_SUPPORT) {
    this[offset] = (value >>> 24)
    this[offset + 1] = (value >>> 16)
    this[offset + 2] = (value >>> 8)
    this[offset + 3] = value
  } else {
    objectWriteUInt32(this, value, offset, false)
  }
  return offset + 4
}

function checkIEEE754 (buf, value, offset, ext, max, min) {
  if (value > max || value < min) throw new RangeError('value is out of bounds')
  if (offset + ext > buf.length) throw new RangeError('index out of range')
  if (offset < 0) throw new RangeError('index out of range')
}

function writeFloat (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 4, 3.4028234663852886e+38, -3.4028234663852886e+38)
  }
  ieee754.write(buf, value, offset, littleEndian, 23, 4)
  return offset + 4
}

Buffer.prototype.writeFloatLE = function writeFloatLE (value, offset, noAssert) {
  return writeFloat(this, value, offset, true, noAssert)
}

Buffer.prototype.writeFloatBE = function writeFloatBE (value, offset, noAssert) {
  return writeFloat(this, value, offset, false, noAssert)
}

function writeDouble (buf, value, offset, littleEndian, noAssert) {
  if (!noAssert) {
    checkIEEE754(buf, value, offset, 8, 1.7976931348623157E+308, -1.7976931348623157E+308)
  }
  ieee754.write(buf, value, offset, littleEndian, 52, 8)
  return offset + 8
}

Buffer.prototype.writeDoubleLE = function writeDoubleLE (value, offset, noAssert) {
  return writeDouble(this, value, offset, true, noAssert)
}

Buffer.prototype.writeDoubleBE = function writeDoubleBE (value, offset, noAssert) {
  return writeDouble(this, value, offset, false, noAssert)
}

// copy(targetBuffer, targetStart=0, sourceStart=0, sourceEnd=buffer.length)
Buffer.prototype.copy = function copy (target, targetStart, start, end) {
  if (!start) start = 0
  if (!end && end !== 0) end = this.length
  if (targetStart >= target.length) targetStart = target.length
  if (!targetStart) targetStart = 0
  if (end > 0 && end < start) end = start

  // Copy 0 bytes; we're done
  if (end === start) return 0
  if (target.length === 0 || this.length === 0) return 0

  // Fatal error conditions
  if (targetStart < 0) {
    throw new RangeError('targetStart out of bounds')
  }
  if (start < 0 || start >= this.length) throw new RangeError('sourceStart out of bounds')
  if (end < 0) throw new RangeError('sourceEnd out of bounds')

  // Are we oob?
  if (end > this.length) end = this.length
  if (target.length - targetStart < end - start) {
    end = target.length - targetStart + start
  }

  var len = end - start
  var i

  if (this === target && start < targetStart && targetStart < end) {
    // descending copy from end
    for (i = len - 1; i >= 0; i--) {
      target[i + targetStart] = this[i + start]
    }
  } else if (len < 1000 || !Buffer.TYPED_ARRAY_SUPPORT) {
    // ascending copy from start
    for (i = 0; i < len; i++) {
      target[i + targetStart] = this[i + start]
    }
  } else {
    target._set(this.subarray(start, start + len), targetStart)
  }

  return len
}

// fill(value, start=0, end=buffer.length)
Buffer.prototype.fill = function fill (value, start, end) {
  if (!value) value = 0
  if (!start) start = 0
  if (!end) end = this.length

  if (end < start) throw new RangeError('end < start')

  // Fill 0 bytes; we're done
  if (end === start) return
  if (this.length === 0) return

  if (start < 0 || start >= this.length) throw new RangeError('start out of bounds')
  if (end < 0 || end > this.length) throw new RangeError('end out of bounds')

  var i
  if (typeof value === 'number') {
    for (i = start; i < end; i++) {
      this[i] = value
    }
  } else {
    var bytes = utf8ToBytes(value.toString())
    var len = bytes.length
    for (i = start; i < end; i++) {
      this[i] = bytes[i % len]
    }
  }

  return this
}

/**
 * Creates a new `ArrayBuffer` with the *copied* memory of the buffer instance.
 * Added in Node 0.12. Only available in browsers that support ArrayBuffer.
 */
Buffer.prototype.toArrayBuffer = function toArrayBuffer () {
  if (typeof Uint8Array !== 'undefined') {
    if (Buffer.TYPED_ARRAY_SUPPORT) {
      return (new Buffer(this)).buffer
    } else {
      var buf = new Uint8Array(this.length)
      for (var i = 0, len = buf.length; i < len; i += 1) {
        buf[i] = this[i]
      }
      return buf.buffer
    }
  } else {
    throw new TypeError('Buffer.toArrayBuffer not supported in this browser')
  }
}

// HELPER FUNCTIONS
// ================

var BP = Buffer.prototype

/**
 * Augment a Uint8Array *instance* (not the Uint8Array class!) with Buffer methods
 */
Buffer._augment = function _augment (arr) {
  arr.constructor = Buffer
  arr._isBuffer = true

  // save reference to original Uint8Array set method before overwriting
  arr._set = arr.set

  // deprecated
  arr.get = BP.get
  arr.set = BP.set

  arr.write = BP.write
  arr.toString = BP.toString
  arr.toLocaleString = BP.toString
  arr.toJSON = BP.toJSON
  arr.equals = BP.equals
  arr.compare = BP.compare
  arr.indexOf = BP.indexOf
  arr.copy = BP.copy
  arr.slice = BP.slice
  arr.readUIntLE = BP.readUIntLE
  arr.readUIntBE = BP.readUIntBE
  arr.readUInt8 = BP.readUInt8
  arr.readUInt16LE = BP.readUInt16LE
  arr.readUInt16BE = BP.readUInt16BE
  arr.readUInt32LE = BP.readUInt32LE
  arr.readUInt32BE = BP.readUInt32BE
  arr.readIntLE = BP.readIntLE
  arr.readIntBE = BP.readIntBE
  arr.readInt8 = BP.readInt8
  arr.readInt16LE = BP.readInt16LE
  arr.readInt16BE = BP.readInt16BE
  arr.readInt32LE = BP.readInt32LE
  arr.readInt32BE = BP.readInt32BE
  arr.readFloatLE = BP.readFloatLE
  arr.readFloatBE = BP.readFloatBE
  arr.readDoubleLE = BP.readDoubleLE
  arr.readDoubleBE = BP.readDoubleBE
  arr.writeUInt8 = BP.writeUInt8
  arr.writeUIntLE = BP.writeUIntLE
  arr.writeUIntBE = BP.writeUIntBE
  arr.writeUInt16LE = BP.writeUInt16LE
  arr.writeUInt16BE = BP.writeUInt16BE
  arr.writeUInt32LE = BP.writeUInt32LE
  arr.writeUInt32BE = BP.writeUInt32BE
  arr.writeIntLE = BP.writeIntLE
  arr.writeIntBE = BP.writeIntBE
  arr.writeInt8 = BP.writeInt8
  arr.writeInt16LE = BP.writeInt16LE
  arr.writeInt16BE = BP.writeInt16BE
  arr.writeInt32LE = BP.writeInt32LE
  arr.writeInt32BE = BP.writeInt32BE
  arr.writeFloatLE = BP.writeFloatLE
  arr.writeFloatBE = BP.writeFloatBE
  arr.writeDoubleLE = BP.writeDoubleLE
  arr.writeDoubleBE = BP.writeDoubleBE
  arr.fill = BP.fill
  arr.inspect = BP.inspect
  arr.toArrayBuffer = BP.toArrayBuffer

  return arr
}

var INVALID_BASE64_RE = /[^+\/0-9A-Za-z-_]/g

function base64clean (str) {
  // Node strips out invalid characters like \n and \t from the string, base64-js does not
  str = stringtrim(str).replace(INVALID_BASE64_RE, '')
  // Node converts strings with length < 2 to ''
  if (str.length < 2) return ''
  // Node allows for non-padded base64 strings (missing trailing ===), base64-js does not
  while (str.length % 4 !== 0) {
    str = str + '='
  }
  return str
}

function stringtrim (str) {
  if (str.trim) return str.trim()
  return str.replace(/^\s+|\s+$/g, '')
}

function toHex (n) {
  if (n < 16) return '0' + n.toString(16)
  return n.toString(16)
}

function utf8ToBytes (string, units) {
  units = units || Infinity
  var codePoint
  var length = string.length
  var leadSurrogate = null
  var bytes = []

  for (var i = 0; i < length; i++) {
    codePoint = string.charCodeAt(i)

    // is surrogate component
    if (codePoint > 0xD7FF && codePoint < 0xE000) {
      // last char was a lead
      if (!leadSurrogate) {
        // no lead yet
        if (codePoint > 0xDBFF) {
          // unexpected trail
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        } else if (i + 1 === length) {
          // unpaired lead
          if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
          continue
        }

        // valid lead
        leadSurrogate = codePoint

        continue
      }

      // 2 leads in a row
      if (codePoint < 0xDC00) {
        if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
        leadSurrogate = codePoint
        continue
      }

      // valid surrogate pair
      codePoint = leadSurrogate - 0xD800 << 10 | codePoint - 0xDC00 | 0x10000
    } else if (leadSurrogate) {
      // valid bmp char, but last char was a lead
      if ((units -= 3) > -1) bytes.push(0xEF, 0xBF, 0xBD)
    }

    leadSurrogate = null

    // encode utf8
    if (codePoint < 0x80) {
      if ((units -= 1) < 0) break
      bytes.push(codePoint)
    } else if (codePoint < 0x800) {
      if ((units -= 2) < 0) break
      bytes.push(
        codePoint >> 0x6 | 0xC0,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x10000) {
      if ((units -= 3) < 0) break
      bytes.push(
        codePoint >> 0xC | 0xE0,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else if (codePoint < 0x110000) {
      if ((units -= 4) < 0) break
      bytes.push(
        codePoint >> 0x12 | 0xF0,
        codePoint >> 0xC & 0x3F | 0x80,
        codePoint >> 0x6 & 0x3F | 0x80,
        codePoint & 0x3F | 0x80
      )
    } else {
      throw new Error('Invalid code point')
    }
  }

  return bytes
}

function asciiToBytes (str) {
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    // Node's code seems to be doing this and not & 0x7F..
    byteArray.push(str.charCodeAt(i) & 0xFF)
  }
  return byteArray
}

function utf16leToBytes (str, units) {
  var c, hi, lo
  var byteArray = []
  for (var i = 0; i < str.length; i++) {
    if ((units -= 2) < 0) break

    c = str.charCodeAt(i)
    hi = c >> 8
    lo = c % 256
    byteArray.push(lo)
    byteArray.push(hi)
  }

  return byteArray
}

function base64ToBytes (str) {
  return base64.toByteArray(base64clean(str))
}

function blitBuffer (src, dst, offset, length) {
  for (var i = 0; i < length; i++) {
    if ((i + offset >= dst.length) || (i >= src.length)) break
    dst[i + offset] = src[i]
  }
  return i
}

},{"base64-js":3,"ieee754":4,"is-array":5}],3:[function(require,module,exports){
var lookup = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/';

;(function (exports) {
	'use strict';

  var Arr = (typeof Uint8Array !== 'undefined')
    ? Uint8Array
    : Array

	var PLUS   = '+'.charCodeAt(0)
	var SLASH  = '/'.charCodeAt(0)
	var NUMBER = '0'.charCodeAt(0)
	var LOWER  = 'a'.charCodeAt(0)
	var UPPER  = 'A'.charCodeAt(0)
	var PLUS_URL_SAFE = '-'.charCodeAt(0)
	var SLASH_URL_SAFE = '_'.charCodeAt(0)

	function decode (elt) {
		var code = elt.charCodeAt(0)
		if (code === PLUS ||
		    code === PLUS_URL_SAFE)
			return 62 // '+'
		if (code === SLASH ||
		    code === SLASH_URL_SAFE)
			return 63 // '/'
		if (code < NUMBER)
			return -1 //no match
		if (code < NUMBER + 10)
			return code - NUMBER + 26 + 26
		if (code < UPPER + 26)
			return code - UPPER
		if (code < LOWER + 26)
			return code - LOWER + 26
	}

	function b64ToByteArray (b64) {
		var i, j, l, tmp, placeHolders, arr

		if (b64.length % 4 > 0) {
			throw new Error('Invalid string. Length must be a multiple of 4')
		}

		// the number of equal signs (place holders)
		// if there are two placeholders, than the two characters before it
		// represent one byte
		// if there is only one, then the three characters before it represent 2 bytes
		// this is just a cheap hack to not do indexOf twice
		var len = b64.length
		placeHolders = '=' === b64.charAt(len - 2) ? 2 : '=' === b64.charAt(len - 1) ? 1 : 0

		// base64 is 4/3 + up to two characters of the original data
		arr = new Arr(b64.length * 3 / 4 - placeHolders)

		// if there are placeholders, only get up to the last complete 4 chars
		l = placeHolders > 0 ? b64.length - 4 : b64.length

		var L = 0

		function push (v) {
			arr[L++] = v
		}

		for (i = 0, j = 0; i < l; i += 4, j += 3) {
			tmp = (decode(b64.charAt(i)) << 18) | (decode(b64.charAt(i + 1)) << 12) | (decode(b64.charAt(i + 2)) << 6) | decode(b64.charAt(i + 3))
			push((tmp & 0xFF0000) >> 16)
			push((tmp & 0xFF00) >> 8)
			push(tmp & 0xFF)
		}

		if (placeHolders === 2) {
			tmp = (decode(b64.charAt(i)) << 2) | (decode(b64.charAt(i + 1)) >> 4)
			push(tmp & 0xFF)
		} else if (placeHolders === 1) {
			tmp = (decode(b64.charAt(i)) << 10) | (decode(b64.charAt(i + 1)) << 4) | (decode(b64.charAt(i + 2)) >> 2)
			push((tmp >> 8) & 0xFF)
			push(tmp & 0xFF)
		}

		return arr
	}

	function uint8ToBase64 (uint8) {
		var i,
			extraBytes = uint8.length % 3, // if we have 1 byte left, pad 2 bytes
			output = "",
			temp, length

		function encode (num) {
			return lookup.charAt(num)
		}

		function tripletToBase64 (num) {
			return encode(num >> 18 & 0x3F) + encode(num >> 12 & 0x3F) + encode(num >> 6 & 0x3F) + encode(num & 0x3F)
		}

		// go through the array every three bytes, we'll deal with trailing stuff later
		for (i = 0, length = uint8.length - extraBytes; i < length; i += 3) {
			temp = (uint8[i] << 16) + (uint8[i + 1] << 8) + (uint8[i + 2])
			output += tripletToBase64(temp)
		}

		// pad the end with zeros, but make sure to not forget the extra bytes
		switch (extraBytes) {
			case 1:
				temp = uint8[uint8.length - 1]
				output += encode(temp >> 2)
				output += encode((temp << 4) & 0x3F)
				output += '=='
				break
			case 2:
				temp = (uint8[uint8.length - 2] << 8) + (uint8[uint8.length - 1])
				output += encode(temp >> 10)
				output += encode((temp >> 4) & 0x3F)
				output += encode((temp << 2) & 0x3F)
				output += '='
				break
		}

		return output
	}

	exports.toByteArray = b64ToByteArray
	exports.fromByteArray = uint8ToBase64
}(typeof exports === 'undefined' ? (this.base64js = {}) : exports))

},{}],4:[function(require,module,exports){
exports.read = function (buffer, offset, isLE, mLen, nBytes) {
  var e, m
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var nBits = -7
  var i = isLE ? (nBytes - 1) : 0
  var d = isLE ? -1 : 1
  var s = buffer[offset + i]

  i += d

  e = s & ((1 << (-nBits)) - 1)
  s >>= (-nBits)
  nBits += eLen
  for (; nBits > 0; e = e * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  m = e & ((1 << (-nBits)) - 1)
  e >>= (-nBits)
  nBits += mLen
  for (; nBits > 0; m = m * 256 + buffer[offset + i], i += d, nBits -= 8) {}

  if (e === 0) {
    e = 1 - eBias
  } else if (e === eMax) {
    return m ? NaN : ((s ? -1 : 1) * Infinity)
  } else {
    m = m + Math.pow(2, mLen)
    e = e - eBias
  }
  return (s ? -1 : 1) * m * Math.pow(2, e - mLen)
}

exports.write = function (buffer, value, offset, isLE, mLen, nBytes) {
  var e, m, c
  var eLen = nBytes * 8 - mLen - 1
  var eMax = (1 << eLen) - 1
  var eBias = eMax >> 1
  var rt = (mLen === 23 ? Math.pow(2, -24) - Math.pow(2, -77) : 0)
  var i = isLE ? 0 : (nBytes - 1)
  var d = isLE ? 1 : -1
  var s = value < 0 || (value === 0 && 1 / value < 0) ? 1 : 0

  value = Math.abs(value)

  if (isNaN(value) || value === Infinity) {
    m = isNaN(value) ? 1 : 0
    e = eMax
  } else {
    e = Math.floor(Math.log(value) / Math.LN2)
    if (value * (c = Math.pow(2, -e)) < 1) {
      e--
      c *= 2
    }
    if (e + eBias >= 1) {
      value += rt / c
    } else {
      value += rt * Math.pow(2, 1 - eBias)
    }
    if (value * c >= 2) {
      e++
      c /= 2
    }

    if (e + eBias >= eMax) {
      m = 0
      e = eMax
    } else if (e + eBias >= 1) {
      m = (value * c - 1) * Math.pow(2, mLen)
      e = e + eBias
    } else {
      m = value * Math.pow(2, eBias - 1) * Math.pow(2, mLen)
      e = 0
    }
  }

  for (; mLen >= 8; buffer[offset + i] = m & 0xff, i += d, m /= 256, mLen -= 8) {}

  e = (e << mLen) | m
  eLen += mLen
  for (; eLen > 0; buffer[offset + i] = e & 0xff, i += d, e /= 256, eLen -= 8) {}

  buffer[offset + i - d] |= s * 128
}

},{}],5:[function(require,module,exports){

/**
 * isArray
 */

var isArray = Array.isArray;

/**
 * toString
 */

var str = Object.prototype.toString;

/**
 * Whether or not the given `val`
 * is an array.
 *
 * example:
 *
 *        isArray([]);
 *        // > true
 *        isArray(arguments);
 *        // > false
 *        isArray('');
 *        // > false
 *
 * @param {mixed} val
 * @return {bool}
 */

module.exports = isArray || function (val) {
  return !! val && '[object Array]' == str.call(val);
};

},{}],6:[function(require,module,exports){
if (typeof Object.create === 'function') {
  // implementation from standard node.js 'util' module
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    ctor.prototype = Object.create(superCtor.prototype, {
      constructor: {
        value: ctor,
        enumerable: false,
        writable: true,
        configurable: true
      }
    });
  };
} else {
  // old school shim for old browsers
  module.exports = function inherits(ctor, superCtor) {
    ctor.super_ = superCtor
    var TempCtor = function () {}
    TempCtor.prototype = superCtor.prototype
    ctor.prototype = new TempCtor()
    ctor.prototype.constructor = ctor
  }
}

},{}],7:[function(require,module,exports){
// shim for using process in browser

var process = module.exports = {};
var queue = [];
var draining = false;
var currentQueue;
var queueIndex = -1;

function cleanUpNextTick() {
    draining = false;
    if (currentQueue.length) {
        queue = currentQueue.concat(queue);
    } else {
        queueIndex = -1;
    }
    if (queue.length) {
        drainQueue();
    }
}

function drainQueue() {
    if (draining) {
        return;
    }
    var timeout = setTimeout(cleanUpNextTick);
    draining = true;

    var len = queue.length;
    while(len) {
        currentQueue = queue;
        queue = [];
        while (++queueIndex < len) {
            if (currentQueue) {
                currentQueue[queueIndex].run();
            }
        }
        queueIndex = -1;
        len = queue.length;
    }
    currentQueue = null;
    draining = false;
    clearTimeout(timeout);
}

process.nextTick = function (fun) {
    var args = new Array(arguments.length - 1);
    if (arguments.length > 1) {
        for (var i = 1; i < arguments.length; i++) {
            args[i - 1] = arguments[i];
        }
    }
    queue.push(new Item(fun, args));
    if (queue.length === 1 && !draining) {
        setTimeout(drainQueue, 0);
    }
};

// v8 likes predictible objects
function Item(fun, array) {
    this.fun = fun;
    this.array = array;
}
Item.prototype.run = function () {
    this.fun.apply(null, this.array);
};
process.title = 'browser';
process.browser = true;
process.env = {};
process.argv = [];
process.version = ''; // empty string to avoid regexp issues
process.versions = {};

function noop() {}

process.on = noop;
process.addListener = noop;
process.once = noop;
process.off = noop;
process.removeListener = noop;
process.removeAllListeners = noop;
process.emit = noop;

process.binding = function (name) {
    throw new Error('process.binding is not supported');
};

process.cwd = function () { return '/' };
process.chdir = function (dir) {
    throw new Error('process.chdir is not supported');
};
process.umask = function() { return 0; };

},{}],8:[function(require,module,exports){
module.exports = function isBuffer(arg) {
  return arg && typeof arg === 'object'
    && typeof arg.copy === 'function'
    && typeof arg.fill === 'function'
    && typeof arg.readUInt8 === 'function';
}
},{}],9:[function(require,module,exports){
(function (process,global){
// Copyright Joyent, Inc. and other Node contributors.
//
// Permission is hereby granted, free of charge, to any person obtaining a
// copy of this software and associated documentation files (the
// "Software"), to deal in the Software without restriction, including
// without limitation the rights to use, copy, modify, merge, publish,
// distribute, sublicense, and/or sell copies of the Software, and to permit
// persons to whom the Software is furnished to do so, subject to the
// following conditions:
//
// The above copyright notice and this permission notice shall be included
// in all copies or substantial portions of the Software.
//
// THE SOFTWARE IS PROVIDED "AS IS", WITHOUT WARRANTY OF ANY KIND, EXPRESS
// OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF
// MERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN
// NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM,
// DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR
// OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE
// USE OR OTHER DEALINGS IN THE SOFTWARE.

var formatRegExp = /%[sdj%]/g;
exports.format = function(f) {
  if (!isString(f)) {
    var objects = [];
    for (var i = 0; i < arguments.length; i++) {
      objects.push(inspect(arguments[i]));
    }
    return objects.join(' ');
  }

  var i = 1;
  var args = arguments;
  var len = args.length;
  var str = String(f).replace(formatRegExp, function(x) {
    if (x === '%%') return '%';
    if (i >= len) return x;
    switch (x) {
      case '%s': return String(args[i++]);
      case '%d': return Number(args[i++]);
      case '%j':
        try {
          return JSON.stringify(args[i++]);
        } catch (_) {
          return '[Circular]';
        }
      default:
        return x;
    }
  });
  for (var x = args[i]; i < len; x = args[++i]) {
    if (isNull(x) || !isObject(x)) {
      str += ' ' + x;
    } else {
      str += ' ' + inspect(x);
    }
  }
  return str;
};


// Mark that a method should not be used.
// Returns a modified function which warns once by default.
// If --no-deprecation is set, then it is a no-op.
exports.deprecate = function(fn, msg) {
  // Allow for deprecating things in the process of starting up.
  if (isUndefined(global.process)) {
    return function() {
      return exports.deprecate(fn, msg).apply(this, arguments);
    };
  }

  if (process.noDeprecation === true) {
    return fn;
  }

  var warned = false;
  function deprecated() {
    if (!warned) {
      if (process.throwDeprecation) {
        throw new Error(msg);
      } else if (process.traceDeprecation) {
        console.trace(msg);
      } else {
        console.error(msg);
      }
      warned = true;
    }
    return fn.apply(this, arguments);
  }

  return deprecated;
};


var debugs = {};
var debugEnviron;
exports.debuglog = function(set) {
  if (isUndefined(debugEnviron))
    debugEnviron = process.env.NODE_DEBUG || '';
  set = set.toUpperCase();
  if (!debugs[set]) {
    if (new RegExp('\\b' + set + '\\b', 'i').test(debugEnviron)) {
      var pid = process.pid;
      debugs[set] = function() {
        var msg = exports.format.apply(exports, arguments);
        console.error('%s %d: %s', set, pid, msg);
      };
    } else {
      debugs[set] = function() {};
    }
  }
  return debugs[set];
};


/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Object} opts Optional options object that alters the output.
 */
/* legacy: obj, showHidden, depth, colors*/
function inspect(obj, opts) {
  // default options
  var ctx = {
    seen: [],
    stylize: stylizeNoColor
  };
  // legacy...
  if (arguments.length >= 3) ctx.depth = arguments[2];
  if (arguments.length >= 4) ctx.colors = arguments[3];
  if (isBoolean(opts)) {
    // legacy...
    ctx.showHidden = opts;
  } else if (opts) {
    // got an "options" object
    exports._extend(ctx, opts);
  }
  // set default options
  if (isUndefined(ctx.showHidden)) ctx.showHidden = false;
  if (isUndefined(ctx.depth)) ctx.depth = 2;
  if (isUndefined(ctx.colors)) ctx.colors = false;
  if (isUndefined(ctx.customInspect)) ctx.customInspect = true;
  if (ctx.colors) ctx.stylize = stylizeWithColor;
  return formatValue(ctx, obj, ctx.depth);
}
exports.inspect = inspect;


// http://en.wikipedia.org/wiki/ANSI_escape_code#graphics
inspect.colors = {
  'bold' : [1, 22],
  'italic' : [3, 23],
  'underline' : [4, 24],
  'inverse' : [7, 27],
  'white' : [37, 39],
  'grey' : [90, 39],
  'black' : [30, 39],
  'blue' : [34, 39],
  'cyan' : [36, 39],
  'green' : [32, 39],
  'magenta' : [35, 39],
  'red' : [31, 39],
  'yellow' : [33, 39]
};

// Don't use 'blue' not visible on cmd.exe
inspect.styles = {
  'special': 'cyan',
  'number': 'yellow',
  'boolean': 'yellow',
  'undefined': 'grey',
  'null': 'bold',
  'string': 'green',
  'date': 'magenta',
  // "name": intentionally not styling
  'regexp': 'red'
};


function stylizeWithColor(str, styleType) {
  var style = inspect.styles[styleType];

  if (style) {
    return '\u001b[' + inspect.colors[style][0] + 'm' + str +
           '\u001b[' + inspect.colors[style][1] + 'm';
  } else {
    return str;
  }
}


function stylizeNoColor(str, styleType) {
  return str;
}


function arrayToHash(array) {
  var hash = {};

  array.forEach(function(val, idx) {
    hash[val] = true;
  });

  return hash;
}


function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (ctx.customInspect &&
      value &&
      isFunction(value.inspect) &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes, ctx);
    if (!isString(ret)) {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // Look up the keys of the object.
  var keys = Object.keys(value);
  var visibleKeys = arrayToHash(keys);

  if (ctx.showHidden) {
    keys = Object.getOwnPropertyNames(value);
  }

  // IE doesn't make error fields non-enumerable
  // http://msdn.microsoft.com/en-us/library/ie/dww52sbt(v=vs.94).aspx
  if (isError(value)
      && (keys.indexOf('message') >= 0 || keys.indexOf('description') >= 0)) {
    return formatError(value);
  }

  // Some type of object without properties can be shortcutted.
  if (keys.length === 0) {
    if (isFunction(value)) {
      var name = value.name ? ': ' + value.name : '';
      return ctx.stylize('[Function' + name + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (isFunction(value)) {
    var n = value.name ? ': ' + value.name : '';
    base = ' [Function' + n + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    base = ' ' + formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  if (isUndefined(value))
    return ctx.stylize('undefined', 'undefined');
  if (isString(value)) {
    var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                             .replace(/'/g, "\\'")
                                             .replace(/\\"/g, '"') + '\'';
    return ctx.stylize(simple, 'string');
  }
  if (isNumber(value))
    return ctx.stylize('' + value, 'number');
  if (isBoolean(value))
    return ctx.stylize('' + value, 'boolean');
  // For some reason typeof null is "object", so special case here.
  if (isNull(value))
    return ctx.stylize('null', 'null');
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (hasOwnProperty(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str, desc;
  desc = Object.getOwnPropertyDescriptor(value, key) || { value: value[key] };
  if (desc.get) {
    if (desc.set) {
      str = ctx.stylize('[Getter/Setter]', 'special');
    } else {
      str = ctx.stylize('[Getter]', 'special');
    }
  } else {
    if (desc.set) {
      str = ctx.stylize('[Setter]', 'special');
    }
  }
  if (!hasOwnProperty(visibleKeys, key)) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(desc.value) < 0) {
      if (isNull(recurseTimes)) {
        str = formatValue(ctx, desc.value, null);
      } else {
        str = formatValue(ctx, desc.value, recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (isUndefined(name)) {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.replace(/\u001b\[\d\d?m/g, '').length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}


// NOTE: These type checking functions intentionally don't use `instanceof`
// because it is fragile and can be easily faked with `Object.create()`.
function isArray(ar) {
  return Array.isArray(ar);
}
exports.isArray = isArray;

function isBoolean(arg) {
  return typeof arg === 'boolean';
}
exports.isBoolean = isBoolean;

function isNull(arg) {
  return arg === null;
}
exports.isNull = isNull;

function isNullOrUndefined(arg) {
  return arg == null;
}
exports.isNullOrUndefined = isNullOrUndefined;

function isNumber(arg) {
  return typeof arg === 'number';
}
exports.isNumber = isNumber;

function isString(arg) {
  return typeof arg === 'string';
}
exports.isString = isString;

function isSymbol(arg) {
  return typeof arg === 'symbol';
}
exports.isSymbol = isSymbol;

function isUndefined(arg) {
  return arg === void 0;
}
exports.isUndefined = isUndefined;

function isRegExp(re) {
  return isObject(re) && objectToString(re) === '[object RegExp]';
}
exports.isRegExp = isRegExp;

function isObject(arg) {
  return typeof arg === 'object' && arg !== null;
}
exports.isObject = isObject;

function isDate(d) {
  return isObject(d) && objectToString(d) === '[object Date]';
}
exports.isDate = isDate;

function isError(e) {
  return isObject(e) &&
      (objectToString(e) === '[object Error]' || e instanceof Error);
}
exports.isError = isError;

function isFunction(arg) {
  return typeof arg === 'function';
}
exports.isFunction = isFunction;

function isPrimitive(arg) {
  return arg === null ||
         typeof arg === 'boolean' ||
         typeof arg === 'number' ||
         typeof arg === 'string' ||
         typeof arg === 'symbol' ||  // ES6 symbol
         typeof arg === 'undefined';
}
exports.isPrimitive = isPrimitive;

exports.isBuffer = require('./support/isBuffer');

function objectToString(o) {
  return Object.prototype.toString.call(o);
}


function pad(n) {
  return n < 10 ? '0' + n.toString(10) : n.toString(10);
}


var months = ['Jan', 'Feb', 'Mar', 'Apr', 'May', 'Jun', 'Jul', 'Aug', 'Sep',
              'Oct', 'Nov', 'Dec'];

// 26 Feb 16:19:34
function timestamp() {
  var d = new Date();
  var time = [pad(d.getHours()),
              pad(d.getMinutes()),
              pad(d.getSeconds())].join(':');
  return [d.getDate(), months[d.getMonth()], time].join(' ');
}


// log is just a thin wrapper to console.log that prepends a timestamp
exports.log = function() {
  console.log('%s - %s', timestamp(), exports.format.apply(exports, arguments));
};


/**
 * Inherit the prototype methods from one constructor into another.
 *
 * The Function.prototype.inherits from lang.js rewritten as a standalone
 * function (not on Function.prototype). NOTE: If this file is to be loaded
 * during bootstrapping this function needs to be rewritten using some native
 * functions as prototype setup using normal JavaScript does not work as
 * expected during bootstrapping (see mirror.js in r114903).
 *
 * @param {function} ctor Constructor function which needs to inherit the
 *     prototype.
 * @param {function} superCtor Constructor function to inherit prototype from.
 */
exports.inherits = require('inherits');

exports._extend = function(origin, add) {
  // Don't do anything if add isn't an object
  if (!add || !isObject(add)) return origin;

  var keys = Object.keys(add);
  var i = keys.length;
  while (i--) {
    origin[keys[i]] = add[keys[i]];
  }
  return origin;
};

function hasOwnProperty(obj, prop) {
  return Object.prototype.hasOwnProperty.call(obj, prop);
}

}).call(this,require('_process'),typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./support/isBuffer":8,"_process":7,"inherits":6}],10:[function(require,module,exports){
(function () {
    "use strict";

    // Module systems magic dance.

    /* istanbul ignore else */
    if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
        // NodeJS
        module.exports = chaiAsPromised;
    } else if (typeof define === "function" && define.amd) {
        // AMD
        define(function () {
            return chaiAsPromised;
        });
    } else {
        /*global self: false */

        // Other environment (usually <script> tag): plug in to global chai instance directly.
        chai.use(chaiAsPromised);

        // Expose as a property of the global object so that consumers can configure the `transferPromiseness` property.
        self.chaiAsPromised = chaiAsPromised;
    }

    chaiAsPromised.transferPromiseness = function (assertion, promise) {
        assertion.then = promise.then.bind(promise);
    };

    chaiAsPromised.transformAsserterArgs = function (values) {
        return values;
    };

    function chaiAsPromised(chai, utils) {
        var Assertion = chai.Assertion;
        var assert = chai.assert;

        function isJQueryPromise(thenable) {
            return typeof thenable.always === "function" &&
                   typeof thenable.done === "function" &&
                   typeof thenable.fail === "function" &&
                   typeof thenable.pipe === "function" &&
                   typeof thenable.progress === "function" &&
                   typeof thenable.state === "function";
        }

        function assertIsAboutPromise(assertion) {
            if (typeof assertion._obj.then !== "function") {
                throw new TypeError(utils.inspect(assertion._obj) + " is not a thenable.");
            }
            if (isJQueryPromise(assertion._obj)) {
                throw new TypeError("Chai as Promised is incompatible with jQuery's thenables, sorry! Please use a " +
                                    "Promises/A+ compatible library (see http://promisesaplus.com/).");
            }
        }

        function method(name, asserter) {
            utils.addMethod(Assertion.prototype, name, function () {
                assertIsAboutPromise(this);
                return asserter.apply(this, arguments);
            });
        }

        function property(name, asserter) {
            utils.addProperty(Assertion.prototype, name, function () {
                assertIsAboutPromise(this);
                return asserter.apply(this, arguments);
            });
        }

        function doNotify(promise, done) {
            promise.then(function () { done(); }, done);
        }

        // These are for clarity and to bypass Chai refusing to allow `undefined` as actual when used with `assert`.
        function assertIfNegated(assertion, message, extra) {
            assertion.assert(true, null, message, extra.expected, extra.actual);
        }

        function assertIfNotNegated(assertion, message, extra) {
            assertion.assert(false, message, null, extra.expected, extra.actual);
        }

        function getBasePromise(assertion) {
            // We need to chain subsequent asserters on top of ones in the chain already (consider
            // `eventually.have.property("foo").that.equals("bar")`), only running them after the existing ones pass.
            // So the first base-promise is `assertion._obj`, but after that we use the assertions themselves, i.e.
            // previously derived promises, to chain off of.
            return typeof assertion.then === "function" ? assertion : assertion._obj;
        }

        // Grab these first, before we modify `Assertion.prototype`.

        var propertyNames = Object.getOwnPropertyNames(Assertion.prototype);

        var propertyDescs = {};
        propertyNames.forEach(function (name) {
            propertyDescs[name] = Object.getOwnPropertyDescriptor(Assertion.prototype, name);
        });

        property("fulfilled", function () {
            var that = this;
            var derivedPromise = getBasePromise(that).then(
                function (value) {
                    that._obj = value;
                    assertIfNegated(that,
                                    "expected promise not to be fulfilled but it was fulfilled with #{act}",
                                    { actual: value });
                    return value;
                },
                function (reason) {
                    assertIfNotNegated(that,
                                       "expected promise to be fulfilled but it was rejected with #{act}",
                                       { actual: reason });
                }
            );

            chaiAsPromised.transferPromiseness(that, derivedPromise);
        });

        property("rejected", function () {
            var that = this;
            var derivedPromise = getBasePromise(that).then(
                function (value) {
                    that._obj = value;
                    assertIfNotNegated(that,
                                       "expected promise to be rejected but it was fulfilled with #{act}",
                                       { actual: value });
                    return value;
                },
                function (reason) {
                    assertIfNegated(that,
                                    "expected promise not to be rejected but it was rejected with #{act}",
                                    { actual: reason });

                    // Return the reason, transforming this into a fulfillment, to allow further assertions, e.g.
                    // `promise.should.be.rejected.and.eventually.equal("reason")`.
                    return reason;
                }
            );

            chaiAsPromised.transferPromiseness(that, derivedPromise);
        });

        method("rejectedWith", function (Constructor, message) {
            var desiredReason = null;
            var constructorName = null;

            if (Constructor instanceof RegExp || typeof Constructor === "string") {
                message = Constructor;
                Constructor = null;
            } else if (Constructor && Constructor instanceof Error) {
                desiredReason = Constructor;
                Constructor = null;
                message = null;
            } else if (typeof Constructor === "function") {
                constructorName = (new Constructor()).name;
            } else {
                Constructor = null;
            }

            var that = this;
            var derivedPromise = getBasePromise(that).then(
                function (value) {
                    var assertionMessage = null;
                    var expected = null;

                    if (Constructor) {
                        assertionMessage = "expected promise to be rejected with #{exp} but it was fulfilled with " +
                                           "#{act}";
                        expected = constructorName;
                    } else if (message) {
                        var verb = message instanceof RegExp ? "matching" : "including";
                        assertionMessage = "expected promise to be rejected with an error " + verb + " #{exp} but it " +
                                           "was fulfilled with #{act}";
                        expected = message;
                    } else if (desiredReason) {
                        assertionMessage = "expected promise to be rejected with #{exp} but it was fulfilled with " +
                                           "#{act}";
                        expected = desiredReason;
                    }

                    that._obj = value;

                    assertIfNotNegated(that, assertionMessage, { expected: expected, actual: value });
                },
                function (reason) {
                    if (Constructor) {
                        that.assert(reason instanceof Constructor,
                                    "expected promise to be rejected with #{exp} but it was rejected with #{act}",
                                    "expected promise not to be rejected with #{exp} but it was rejected with #{act}",
                                    constructorName,
                                    reason);
                    }

                    var reasonMessage = utils.type(reason) === "object" && "message" in reason ?
                                            reason.message :
                                            "" + reason;
                    if (message && reasonMessage !== null && reasonMessage !== undefined) {
                        if (message instanceof RegExp) {
                            that.assert(message.test(reasonMessage),
                                        "expected promise to be rejected with an error matching #{exp} but got #{act}",
                                        "expected promise not to be rejected with an error matching #{exp}",
                                        message,
                                        reasonMessage);
                        }
                        if (typeof message === "string") {
                            that.assert(reasonMessage.indexOf(message) !== -1,
                                        "expected promise to be rejected with an error including #{exp} but got #{act}",
                                        "expected promise not to be rejected with an error including #{exp}",
                                        message,
                                        reasonMessage);
                        }
                    }

                    if (desiredReason) {
                        that.assert(reason === desiredReason,
                                    "expected promise to be rejected with #{exp} but it was rejected with #{act}",
                                    "expected promise not to be rejected with #{exp}",
                                    desiredReason,
                                    reason);
                    }
                }
            );

            chaiAsPromised.transferPromiseness(that, derivedPromise);
        });

        property("eventually", function () {
            utils.flag(this, "eventually", true);
        });

        method("notify", function (done) {
            doNotify(getBasePromise(this), done);
        });

        method("become", function (value) {
            return this.eventually.deep.equal(value);
        });

        ////////
        // `eventually`

        // We need to be careful not to trigger any getters, thus `Object.getOwnPropertyDescriptor` usage.
        var methodNames = propertyNames.filter(function (name) {
            return name !== "assert" && typeof propertyDescs[name].value === "function";
        });

        methodNames.forEach(function (methodName) {
            Assertion.overwriteMethod(methodName, function (originalMethod) {
                return function () {
                    doAsserterAsyncAndAddThen(originalMethod, this, arguments);
                };
            });
        });

        var getterNames = propertyNames.filter(function (name) {
            return name !== "_obj" && typeof propertyDescs[name].get === "function";
        });

        getterNames.forEach(function (getterName) {
            // Chainable methods are things like `an`, which can work both for `.should.be.an.instanceOf` and as
            // `should.be.an("object")`. We need to handle those specially.
            var isChainableMethod = Assertion.prototype.__methods.hasOwnProperty(getterName);

            if (isChainableMethod) {
                Assertion.overwriteChainableMethod(
                    getterName,
                    function (originalMethod) {
                        return function() {
                            doAsserterAsyncAndAddThen(originalMethod, this, arguments);
                        };
                    },
                    function (originalGetter) {
                        return function() {
                            doAsserterAsyncAndAddThen(originalGetter, this);
                        };
                    }
                );
            } else {
                Assertion.overwriteProperty(getterName, function (originalGetter) {
                    return function () {
                        doAsserterAsyncAndAddThen(originalGetter, this);
                    };
                });
            }
        });

        function doAsserterAsyncAndAddThen(asserter, assertion, args) {
            // Since we're intercepting all methods/properties, we need to just pass through if they don't want
            // `eventually`, or if we've already fulfilled the promise (see below).
            if (!utils.flag(assertion, "eventually")) {
                return asserter.apply(assertion, args);
            }

            var derivedPromise = getBasePromise(assertion).then(function (value) {
                // Set up the environment for the asserter to actually run: `_obj` should be the fulfillment value, and
                // now that we have the value, we're no longer in "eventually" mode, so we won't run any of this code,
                // just the base Chai code that we get to via the short-circuit above.
                assertion._obj = value;
                utils.flag(assertion, "eventually", false);

                return args ? chaiAsPromised.transformAsserterArgs(args) : args;
            }).then(function (args) {
                asserter.apply(assertion, args);

                // Because asserters, for example `property`, can change the value of `_obj` (i.e. change the "object"
                // flag), we need to communicate this value change to subsequent chained asserters. Since we build a
                // promise chain paralleling the asserter chain, we can use it to communicate such changes.
                return assertion._obj;
            });

            chaiAsPromised.transferPromiseness(assertion, derivedPromise);
        }

        ///////
        // Now use the `Assertion` framework to build an `assert` interface.
        var originalAssertMethods = Object.getOwnPropertyNames(assert).filter(function (propName) {
            return typeof assert[propName] === "function";
        });

        assert.isFulfilled = function (promise, message) {
            return (new Assertion(promise, message)).to.be.fulfilled;
        };

        assert.isRejected = function (promise, toTestAgainst, message) {
            if (typeof toTestAgainst === "string") {
                message = toTestAgainst;
                toTestAgainst = undefined;
            }

            var assertion = (new Assertion(promise, message));
            return toTestAgainst !== undefined ? assertion.to.be.rejectedWith(toTestAgainst) : assertion.to.be.rejected;
        };

        assert.becomes = function (promise, value, message) {
            return assert.eventually.deepEqual(promise, value, message);
        };

        assert.doesNotBecome = function (promise, value, message) {
            return assert.eventually.notDeepEqual(promise, value, message);
        };

        assert.eventually = {};
        originalAssertMethods.forEach(function (assertMethodName) {
            assert.eventually[assertMethodName] = function (promise) {
                var otherArgs = Array.prototype.slice.call(arguments, 1);

                var customRejectionHandler;
                var message = arguments[assert[assertMethodName].length - 1];
                if (typeof message === "string") {
                    customRejectionHandler = function (reason) {
                        throw new chai.AssertionError(message + "\n\nOriginal reason: " + utils.inspect(reason));
                    };
                }

                var returnedPromise = promise.then(
                    function (fulfillmentValue) {
                        return assert[assertMethodName].apply(assert, [fulfillmentValue].concat(otherArgs));
                    },
                    customRejectionHandler
                );

                returnedPromise.notify = function (done) {
                    doNotify(returnedPromise, done);
                };

                return returnedPromise;
            };
        });
    }
}());

},{}],11:[function(require,module,exports){
module.exports = require('./lib/chai');

},{"./lib/chai":12}],12:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var used = []
  , exports = module.exports = {};

/*!
 * Chai version
 */

exports.version = '3.2.0';

/*!
 * Assertion Error
 */

exports.AssertionError = require('assertion-error');

/*!
 * Utils for plugins (not exported)
 */

var util = require('./chai/utils');

/**
 * # .use(function)
 *
 * Provides a way to extend the internals of Chai
 *
 * @param {Function}
 * @returns {this} for chaining
 * @api public
 */

exports.use = function (fn) {
  if (!~used.indexOf(fn)) {
    fn(this, util);
    used.push(fn);
  }

  return this;
};

/*!
 * Utility Functions
 */

exports.util = util;

/*!
 * Configuration
 */

var config = require('./chai/config');
exports.config = config;

/*!
 * Primary `Assertion` prototype
 */

var assertion = require('./chai/assertion');
exports.use(assertion);

/*!
 * Core Assertions
 */

var core = require('./chai/core/assertions');
exports.use(core);

/*!
 * Expect interface
 */

var expect = require('./chai/interface/expect');
exports.use(expect);

/*!
 * Should interface
 */

var should = require('./chai/interface/should');
exports.use(should);

/*!
 * Assert interface
 */

var assert = require('./chai/interface/assert');
exports.use(assert);

},{"./chai/assertion":13,"./chai/config":14,"./chai/core/assertions":15,"./chai/interface/assert":16,"./chai/interface/expect":17,"./chai/interface/should":18,"./chai/utils":31,"assertion-error":39}],13:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('./config');

module.exports = function (_chai, util) {
  /*!
   * Module dependencies.
   */

  var AssertionError = _chai.AssertionError
    , flag = util.flag;

  /*!
   * Module export.
   */

  _chai.Assertion = Assertion;

  /*!
   * Assertion Constructor
   *
   * Creates object for chaining.
   *
   * @api private
   */

  function Assertion (obj, msg, stack) {
    flag(this, 'ssfi', stack || arguments.callee);
    flag(this, 'object', obj);
    flag(this, 'message', msg);
  }

  Object.defineProperty(Assertion, 'includeStack', {
    get: function() {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      return config.includeStack;
    },
    set: function(value) {
      console.warn('Assertion.includeStack is deprecated, use chai.config.includeStack instead.');
      config.includeStack = value;
    }
  });

  Object.defineProperty(Assertion, 'showDiff', {
    get: function() {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      return config.showDiff;
    },
    set: function(value) {
      console.warn('Assertion.showDiff is deprecated, use chai.config.showDiff instead.');
      config.showDiff = value;
    }
  });

  Assertion.addProperty = function (name, fn) {
    util.addProperty(this.prototype, name, fn);
  };

  Assertion.addMethod = function (name, fn) {
    util.addMethod(this.prototype, name, fn);
  };

  Assertion.addChainableMethod = function (name, fn, chainingBehavior) {
    util.addChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  Assertion.overwriteProperty = function (name, fn) {
    util.overwriteProperty(this.prototype, name, fn);
  };

  Assertion.overwriteMethod = function (name, fn) {
    util.overwriteMethod(this.prototype, name, fn);
  };

  Assertion.overwriteChainableMethod = function (name, fn, chainingBehavior) {
    util.overwriteChainableMethod(this.prototype, name, fn, chainingBehavior);
  };

  /**
   * ### .assert(expression, message, negateMessage, expected, actual, showDiff)
   *
   * Executes an expression and check expectations. Throws AssertionError for reporting if test doesn't pass.
   *
   * @name assert
   * @param {Philosophical} expression to be tested
   * @param {String or Function} message or function that returns message to display if expression fails
   * @param {String or Function} negatedMessage or function that returns negatedMessage to display if negated expression fails
   * @param {Mixed} expected value (remember to check for negation)
   * @param {Mixed} actual (optional) will default to `this.obj`
   * @param {Boolean} showDiff (optional) when set to `true`, assert will display a diff in addition to the message if expression fails
   * @api private
   */

  Assertion.prototype.assert = function (expr, msg, negateMsg, expected, _actual, showDiff) {
    var ok = util.test(this, arguments);
    if (true !== showDiff) showDiff = false;
    if (true !== config.showDiff) showDiff = false;

    if (!ok) {
      var msg = util.getMessage(this, arguments)
        , actual = util.getActual(this, arguments);
      throw new AssertionError(msg, {
          actual: actual
        , expected: expected
        , showDiff: showDiff
      }, (config.includeStack) ? this.assert : flag(this, 'ssfi'));
    }
  };

  /*!
   * ### ._obj
   *
   * Quick reference to stored `actual` value for plugin developers.
   *
   * @api private
   */

  Object.defineProperty(Assertion.prototype, '_obj',
    { get: function () {
        return flag(this, 'object');
      }
    , set: function (val) {
        flag(this, 'object', val);
      }
  });
};

},{"./config":14}],14:[function(require,module,exports){
module.exports = {

  /**
   * ### config.includeStack
   *
   * User configurable property, influences whether stack trace
   * is included in Assertion error message. Default of false
   * suppresses stack trace in the error message.
   *
   *     chai.config.includeStack = true;  // enable stack on error
   *
   * @param {Boolean}
   * @api public
   */

   includeStack: false,

  /**
   * ### config.showDiff
   *
   * User configurable property, influences whether or not
   * the `showDiff` flag should be included in the thrown
   * AssertionErrors. `false` will always be `false`; `true`
   * will be true when the assertion has requested a diff
   * be shown.
   *
   * @param {Boolean}
   * @api public
   */

  showDiff: true,

  /**
   * ### config.truncateThreshold
   *
   * User configurable property, sets length threshold for actual and
   * expected values in assertion errors. If this threshold is exceeded, for
   * example for large data structures, the value is replaced with something
   * like `[ Array(3) ]` or `{ Object (prop1, prop2) }`.
   *
   * Set it to zero if you want to disable truncating altogether.
   *
   * This is especially userful when doing assertions on arrays: having this
   * set to a reasonable large value makes the failure messages readily
   * inspectable.
   *
   *     chai.config.truncateThreshold = 0;  // disable truncating
   *
   * @param {Number}
   * @api public
   */

  truncateThreshold: 40

};

},{}],15:[function(require,module,exports){
/*!
 * chai
 * http://chaijs.com
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, _) {
  var Assertion = chai.Assertion
    , toString = Object.prototype.toString
    , flag = _.flag;

  /**
   * ### Language Chains
   *
   * The following are provided as chainable getters to
   * improve the readability of your assertions. They
   * do not provide testing capabilities unless they
   * have been overwritten by a plugin.
   *
   * **Chains**
   *
   * - to
   * - be
   * - been
   * - is
   * - that
   * - which
   * - and
   * - has
   * - have
   * - with
   * - at
   * - of
   * - same
   *
   * @name language chains
   * @api public
   */

  [ 'to', 'be', 'been'
  , 'is', 'and', 'has', 'have'
  , 'with', 'that', 'which', 'at'
  , 'of', 'same' ].forEach(function (chain) {
    Assertion.addProperty(chain, function () {
      return this;
    });
  });

  /**
   * ### .not
   *
   * Negates any of assertions following in the chain.
   *
   *     expect(foo).to.not.equal('bar');
   *     expect(goodFn).to.not.throw(Error);
   *     expect({ foo: 'baz' }).to.have.property('foo')
   *       .and.not.equal('bar');
   *
   * @name not
   * @api public
   */

  Assertion.addProperty('not', function () {
    flag(this, 'negate', true);
  });

  /**
   * ### .deep
   *
   * Sets the `deep` flag, later used by the `equal` and
   * `property` assertions.
   *
   *     expect(foo).to.deep.equal({ bar: 'baz' });
   *     expect({ foo: { bar: { baz: 'quux' } } })
   *       .to.have.deep.property('foo.bar.baz', 'quux');
   *
   * `.deep.property` special characters can be escaped
   * by adding two slashes before the `.` or `[]`.
   *
   *     var deepCss = { '.link': { '[target]': 42 }};
   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
   *
   * @name deep
   * @api public
   */

  Assertion.addProperty('deep', function () {
    flag(this, 'deep', true);
  });

  /**
   * ### .any
   *
   * Sets the `any` flag, (opposite of the `all` flag)
   * later used in the `keys` assertion.
   *
   *     expect(foo).to.have.any.keys('bar', 'baz');
   *
   * @name any
   * @api public
   */

  Assertion.addProperty('any', function () {
    flag(this, 'any', true);
    flag(this, 'all', false)
  });


  /**
   * ### .all
   *
   * Sets the `all` flag (opposite of the `any` flag)
   * later used by the `keys` assertion.
   *
   *     expect(foo).to.have.all.keys('bar', 'baz');
   *
   * @name all
   * @api public
   */

  Assertion.addProperty('all', function () {
    flag(this, 'all', true);
    flag(this, 'any', false);
  });

  /**
   * ### .a(type)
   *
   * The `a` and `an` assertions are aliases that can be
   * used either as language chains or to assert a value's
   * type.
   *
   *     // typeof
   *     expect('test').to.be.a('string');
   *     expect({ foo: 'bar' }).to.be.an('object');
   *     expect(null).to.be.a('null');
   *     expect(undefined).to.be.an('undefined');
   *     expect(new Promise).to.be.a('promise');
   *     expect(new Float32Array()).to.be.a('float32array');
   *     expect(Symbol()).to.be.a('symbol');
   *
   *     // es6 overrides
   *     expect({[Symbol.toStringTag]:()=>'foo'}).to.be.a('foo');
   *
   *     // language chain
   *     expect(foo).to.be.an.instanceof(Foo);
   *
   * @name a
   * @alias an
   * @param {String} type
   * @param {String} message _optional_
   * @api public
   */

  function an (type, msg) {
    if (msg) flag(this, 'message', msg);
    type = type.toLowerCase();
    var obj = flag(this, 'object')
      , article = ~[ 'a', 'e', 'i', 'o', 'u' ].indexOf(type.charAt(0)) ? 'an ' : 'a ';

    this.assert(
        type === _.type(obj)
      , 'expected #{this} to be ' + article + type
      , 'expected #{this} not to be ' + article + type
    );
  }

  Assertion.addChainableMethod('an', an);
  Assertion.addChainableMethod('a', an);

  /**
   * ### .include(value)
   *
   * The `include` and `contain` assertions can be used as either property
   * based language chains or as methods to assert the inclusion of an object
   * in an array or a substring in a string. When used as language chains,
   * they toggle the `contains` flag for the `keys` assertion.
   *
   *     expect([1,2,3]).to.include(2);
   *     expect('foobar').to.contain('foo');
   *     expect({ foo: 'bar', hello: 'universe' }).to.include.keys('foo');
   *
   * @name include
   * @alias contain
   * @alias includes
   * @alias contains
   * @param {Object|String|Number} obj
   * @param {String} message _optional_
   * @api public
   */

  function includeChainingBehavior () {
    flag(this, 'contains', true);
  }

  function include (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var expected = false;
    if (_.type(obj) === 'array' && _.type(val) === 'object') {
      for (var i in obj) {
        if (_.eql(obj[i], val)) {
          expected = true;
          break;
        }
      }
    } else if (_.type(val) === 'object') {
      if (!flag(this, 'negate')) {
        for (var k in val) new Assertion(obj).property(k, val[k]);
        return;
      }
      var subset = {};
      for (var k in val) subset[k] = obj[k];
      expected = _.eql(subset, val);
    } else {
      expected = obj && ~obj.indexOf(val);
    }
    this.assert(
        expected
      , 'expected #{this} to include ' + _.inspect(val)
      , 'expected #{this} to not include ' + _.inspect(val));
  }

  Assertion.addChainableMethod('include', include, includeChainingBehavior);
  Assertion.addChainableMethod('contain', include, includeChainingBehavior);
  Assertion.addChainableMethod('contains', include, includeChainingBehavior);
  Assertion.addChainableMethod('includes', include, includeChainingBehavior);

  /**
   * ### .ok
   *
   * Asserts that the target is truthy.
   *
   *     expect('everthing').to.be.ok;
   *     expect(1).to.be.ok;
   *     expect(false).to.not.be.ok;
   *     expect(undefined).to.not.be.ok;
   *     expect(null).to.not.be.ok;
   *
   * @name ok
   * @api public
   */

  Assertion.addProperty('ok', function () {
    this.assert(
        flag(this, 'object')
      , 'expected #{this} to be truthy'
      , 'expected #{this} to be falsy');
  });

  /**
   * ### .true
   *
   * Asserts that the target is `true`.
   *
   *     expect(true).to.be.true;
   *     expect(1).to.not.be.true;
   *
   * @name true
   * @api public
   */

  Assertion.addProperty('true', function () {
    this.assert(
        true === flag(this, 'object')
      , 'expected #{this} to be true'
      , 'expected #{this} to be false'
      , this.negate ? false : true
    );
  });

  /**
   * ### .false
   *
   * Asserts that the target is `false`.
   *
   *     expect(false).to.be.false;
   *     expect(0).to.not.be.false;
   *
   * @name false
   * @api public
   */

  Assertion.addProperty('false', function () {
    this.assert(
        false === flag(this, 'object')
      , 'expected #{this} to be false'
      , 'expected #{this} to be true'
      , this.negate ? true : false
    );
  });

  /**
   * ### .null
   *
   * Asserts that the target is `null`.
   *
   *     expect(null).to.be.null;
   *     expect(undefined).to.not.be.null;
   *
   * @name null
   * @api public
   */

  Assertion.addProperty('null', function () {
    this.assert(
        null === flag(this, 'object')
      , 'expected #{this} to be null'
      , 'expected #{this} not to be null'
    );
  });

  /**
   * ### .undefined
   *
   * Asserts that the target is `undefined`.
   *
   *     expect(undefined).to.be.undefined;
   *     expect(null).to.not.be.undefined;
   *
   * @name undefined
   * @api public
   */

  Assertion.addProperty('undefined', function () {
    this.assert(
        undefined === flag(this, 'object')
      , 'expected #{this} to be undefined'
      , 'expected #{this} not to be undefined'
    );
  });

  /**
   * ### .NaN
   * Asserts that the target is `NaN`.
   *
   *     expect('foo').to.be.NaN;
   *     expect(4).not.to.be.NaN;
   *
   * @name NaN
   * @api public
   */

  Assertion.addProperty('NaN', function () {
    this.assert(
        isNaN(flag(this, 'object'))
        , 'expected #{this} to be NaN'
        , 'expected #{this} not to be NaN'
    );
  });

  /**
   * ### .exist
   *
   * Asserts that the target is neither `null` nor `undefined`.
   *
   *     var foo = 'hi'
   *       , bar = null
   *       , baz;
   *
   *     expect(foo).to.exist;
   *     expect(bar).to.not.exist;
   *     expect(baz).to.not.exist;
   *
   * @name exist
   * @api public
   */

  Assertion.addProperty('exist', function () {
    this.assert(
        null != flag(this, 'object')
      , 'expected #{this} to exist'
      , 'expected #{this} to not exist'
    );
  });


  /**
   * ### .empty
   *
   * Asserts that the target's length is `0`. For arrays and strings, it checks
   * the `length` property. For objects, it gets the count of
   * enumerable keys.
   *
   *     expect([]).to.be.empty;
   *     expect('').to.be.empty;
   *     expect({}).to.be.empty;
   *
   * @name empty
   * @api public
   */

  Assertion.addProperty('empty', function () {
    var obj = flag(this, 'object')
      , expected = obj;

    if (Array.isArray(obj) || 'string' === typeof object) {
      expected = obj.length;
    } else if (typeof obj === 'object') {
      expected = Object.keys(obj).length;
    }

    this.assert(
        !expected
      , 'expected #{this} to be empty'
      , 'expected #{this} not to be empty'
    );
  });

  /**
   * ### .arguments
   *
   * Asserts that the target is an arguments object.
   *
   *     function test () {
   *       expect(arguments).to.be.arguments;
   *     }
   *
   * @name arguments
   * @alias Arguments
   * @api public
   */

  function checkArguments () {
    var obj = flag(this, 'object')
      , type = Object.prototype.toString.call(obj);
    this.assert(
        '[object Arguments]' === type
      , 'expected #{this} to be arguments but got ' + type
      , 'expected #{this} to not be arguments'
    );
  }

  Assertion.addProperty('arguments', checkArguments);
  Assertion.addProperty('Arguments', checkArguments);

  /**
   * ### .equal(value)
   *
   * Asserts that the target is strictly equal (`===`) to `value`.
   * Alternately, if the `deep` flag is set, asserts that
   * the target is deeply equal to `value`.
   *
   *     expect('hello').to.equal('hello');
   *     expect(42).to.equal(42);
   *     expect(1).to.not.equal(true);
   *     expect({ foo: 'bar' }).to.not.equal({ foo: 'bar' });
   *     expect({ foo: 'bar' }).to.deep.equal({ foo: 'bar' });
   *
   * @name equal
   * @alias equals
   * @alias eq
   * @alias deep.equal
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEqual (val, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'deep')) {
      return this.eql(val);
    } else {
      this.assert(
          val === obj
        , 'expected #{this} to equal #{exp}'
        , 'expected #{this} to not equal #{exp}'
        , val
        , this._obj
        , true
      );
    }
  }

  Assertion.addMethod('equal', assertEqual);
  Assertion.addMethod('equals', assertEqual);
  Assertion.addMethod('eq', assertEqual);

  /**
   * ### .eql(value)
   *
   * Asserts that the target is deeply equal to `value`.
   *
   *     expect({ foo: 'bar' }).to.eql({ foo: 'bar' });
   *     expect([ 1, 2, 3 ]).to.eql([ 1, 2, 3 ]);
   *
   * @name eql
   * @alias eqls
   * @param {Mixed} value
   * @param {String} message _optional_
   * @api public
   */

  function assertEql(obj, msg) {
    if (msg) flag(this, 'message', msg);
    this.assert(
        _.eql(obj, flag(this, 'object'))
      , 'expected #{this} to deeply equal #{exp}'
      , 'expected #{this} to not deeply equal #{exp}'
      , obj
      , this._obj
      , true
    );
  }

  Assertion.addMethod('eql', assertEql);
  Assertion.addMethod('eqls', assertEql);

  /**
   * ### .above(value)
   *
   * Asserts that the target is greater than `value`.
   *
   *     expect(10).to.be.above(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *
   * @name above
   * @alias gt
   * @alias greaterThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertAbove (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len > n
        , 'expected #{this} to have a length above #{exp} but got #{act}'
        , 'expected #{this} to not have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj > n
        , 'expected #{this} to be above ' + n
        , 'expected #{this} to be at most ' + n
      );
    }
  }

  Assertion.addMethod('above', assertAbove);
  Assertion.addMethod('gt', assertAbove);
  Assertion.addMethod('greaterThan', assertAbove);

  /**
   * ### .least(value)
   *
   * Asserts that the target is greater than or equal to `value`.
   *
   *     expect(10).to.be.at.least(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a minimum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.least(2);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.least(3);
   *
   * @name least
   * @alias gte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertLeast (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= n
        , 'expected #{this} to have a length at least #{exp} but got #{act}'
        , 'expected #{this} to have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj >= n
        , 'expected #{this} to be at least ' + n
        , 'expected #{this} to be below ' + n
      );
    }
  }

  Assertion.addMethod('least', assertLeast);
  Assertion.addMethod('gte', assertLeast);

  /**
   * ### .below(value)
   *
   * Asserts that the target is less than `value`.
   *
   *     expect(5).to.be.below(10);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *
   * @name below
   * @alias lt
   * @alias lessThan
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertBelow (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len < n
        , 'expected #{this} to have a length below #{exp} but got #{act}'
        , 'expected #{this} to not have a length below #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj < n
        , 'expected #{this} to be below ' + n
        , 'expected #{this} to be at least ' + n
      );
    }
  }

  Assertion.addMethod('below', assertBelow);
  Assertion.addMethod('lt', assertBelow);
  Assertion.addMethod('lessThan', assertBelow);

  /**
   * ### .most(value)
   *
   * Asserts that the target is less than or equal to `value`.
   *
   *     expect(5).to.be.at.most(5);
   *
   * Can also be used in conjunction with `length` to
   * assert a maximum length. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.of.at.most(4);
   *     expect([ 1, 2, 3 ]).to.have.length.of.at.most(3);
   *
   * @name most
   * @alias lte
   * @param {Number} value
   * @param {String} message _optional_
   * @api public
   */

  function assertMost (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len <= n
        , 'expected #{this} to have a length at most #{exp} but got #{act}'
        , 'expected #{this} to have a length above #{exp}'
        , n
        , len
      );
    } else {
      this.assert(
          obj <= n
        , 'expected #{this} to be at most ' + n
        , 'expected #{this} to be above ' + n
      );
    }
  }

  Assertion.addMethod('most', assertMost);
  Assertion.addMethod('lte', assertMost);

  /**
   * ### .within(start, finish)
   *
   * Asserts that the target is within a range.
   *
   *     expect(7).to.be.within(5,10);
   *
   * Can also be used in conjunction with `length` to
   * assert a length range. The benefit being a
   * more informative error message than if the length
   * was supplied directly.
   *
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * @name within
   * @param {Number} start lowerbound inclusive
   * @param {Number} finish upperbound inclusive
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('within', function (start, finish, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , range = start + '..' + finish;
    if (flag(this, 'doLength')) {
      new Assertion(obj, msg).to.have.property('length');
      var len = obj.length;
      this.assert(
          len >= start && len <= finish
        , 'expected #{this} to have a length within ' + range
        , 'expected #{this} to not have a length within ' + range
      );
    } else {
      this.assert(
          obj >= start && obj <= finish
        , 'expected #{this} to be within ' + range
        , 'expected #{this} to not be within ' + range
      );
    }
  });

  /**
   * ### .instanceof(constructor)
   *
   * Asserts that the target is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , Chai = new Tea('chai');
   *
   *     expect(Chai).to.be.an.instanceof(Tea);
   *     expect([ 1, 2, 3 ]).to.be.instanceof(Array);
   *
   * @name instanceof
   * @param {Constructor} constructor
   * @param {String} message _optional_
   * @alias instanceOf
   * @api public
   */

  function assertInstanceOf (constructor, msg) {
    if (msg) flag(this, 'message', msg);
    var name = _.getName(constructor);
    this.assert(
        flag(this, 'object') instanceof constructor
      , 'expected #{this} to be an instance of ' + name
      , 'expected #{this} to not be an instance of ' + name
    );
  };

  Assertion.addMethod('instanceof', assertInstanceOf);
  Assertion.addMethod('instanceOf', assertInstanceOf);

  /**
   * ### .property(name, [value])
   *
   * Asserts that the target has a property `name`, optionally asserting that
   * the value of that property is strictly equal to  `value`.
   * If the `deep` flag is set, you can use dot- and bracket-notation for deep
   * references into objects and arrays.
   *
   *     // simple referencing
   *     var obj = { foo: 'bar' };
   *     expect(obj).to.have.property('foo');
   *     expect(obj).to.have.property('foo', 'bar');
   *
   *     // deep referencing
   *     var deepObj = {
   *         green: { tea: 'matcha' }
   *       , teas: [ 'chai', 'matcha', { tea: 'konacha' } ]
   *     };
   *
   *     expect(deepObj).to.have.deep.property('green.tea', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[1]', 'matcha');
   *     expect(deepObj).to.have.deep.property('teas[2].tea', 'konacha');
   *
   * You can also use an array as the starting point of a `deep.property`
   * assertion, or traverse nested arrays.
   *
   *     var arr = [
   *         [ 'chai', 'matcha', 'konacha' ]
   *       , [ { tea: 'chai' }
   *         , { tea: 'matcha' }
   *         , { tea: 'konacha' } ]
   *     ];
   *
   *     expect(arr).to.have.deep.property('[0][1]', 'matcha');
   *     expect(arr).to.have.deep.property('[1][2].tea', 'konacha');
   *
   * Furthermore, `property` changes the subject of the assertion
   * to be the value of that property from the original object. This
   * permits for further chainable assertions on that property.
   *
   *     expect(obj).to.have.property('foo')
   *       .that.is.a('string');
   *     expect(deepObj).to.have.property('green')
   *       .that.is.an('object')
   *       .that.deep.equals({ tea: 'matcha' });
   *     expect(deepObj).to.have.property('teas')
   *       .that.is.an('array')
   *       .with.deep.property('[2]')
   *         .that.deep.equals({ tea: 'konacha' });
   *
   * Note that dots and bracket in `name` must be backslash-escaped when
   * the `deep` flag is set, while they must NOT be escaped when the `deep`
   * flag is not set.
   *
   *     // simple referencing
   *     var css = { '.link[target]': 42 };
   *     expect(css).to.have.property('.link[target]', 42);
   *
   *     // deep referencing
   *     var deepCss = { '.link': { '[target]': 42 }};
   *     expect(deepCss).to.have.deep.property('\\.link.\\[target\\]', 42);
   *
   * @name property
   * @alias deep.property
   * @param {String} name
   * @param {Mixed} value (optional)
   * @param {String} message _optional_
   * @returns value of property for chaining
   * @api public
   */

  Assertion.addMethod('property', function (name, val, msg) {
    if (msg) flag(this, 'message', msg);

    var isDeep = !!flag(this, 'deep')
      , descriptor = isDeep ? 'deep property ' : 'property '
      , negate = flag(this, 'negate')
      , obj = flag(this, 'object')
      , pathInfo = isDeep ? _.getPathInfo(name, obj) : null
      , hasProperty = isDeep
        ? pathInfo.exists
        : _.hasProperty(name, obj)
      , value = isDeep
        ? pathInfo.value
        : obj[name];

    if (negate && arguments.length > 1) {
      if (undefined === value) {
        msg = (msg != null) ? msg + ': ' : '';
        throw new Error(msg + _.inspect(obj) + ' has no ' + descriptor + _.inspect(name));
      }
    } else {
      this.assert(
          hasProperty
        , 'expected #{this} to have a ' + descriptor + _.inspect(name)
        , 'expected #{this} to not have ' + descriptor + _.inspect(name));
    }

    if (arguments.length > 1) {
      this.assert(
          val === value
        , 'expected #{this} to have a ' + descriptor + _.inspect(name) + ' of #{exp}, but got #{act}'
        , 'expected #{this} to not have a ' + descriptor + _.inspect(name) + ' of #{act}'
        , val
        , value
      );
    }

    flag(this, 'object', value);
  });


  /**
   * ### .ownProperty(name)
   *
   * Asserts that the target has an own property `name`.
   *
   *     expect('test').to.have.ownProperty('length');
   *
   * @name ownProperty
   * @alias haveOwnProperty
   * @param {String} name
   * @param {String} message _optional_
   * @api public
   */

  function assertOwnProperty (name, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        obj.hasOwnProperty(name)
      , 'expected #{this} to have own property ' + _.inspect(name)
      , 'expected #{this} to not have own property ' + _.inspect(name)
    );
  }

  Assertion.addMethod('ownProperty', assertOwnProperty);
  Assertion.addMethod('haveOwnProperty', assertOwnProperty);

  /**
   * ### .ownPropertyDescriptor(name[, descriptor[, message]])
   *
   * Asserts that the target has an own property descriptor `name`, that optionally matches `descriptor`.
   *
   *     expect('test').to.have.ownPropertyDescriptor('length');
   *     expect('test').to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 4 });
   *     expect('test').not.to.have.ownPropertyDescriptor('length', { enumerable: false, configurable: false, writable: false, value: 3 });
   *     expect('test').ownPropertyDescriptor('length').to.have.property('enumerable', false);
   *     expect('test').ownPropertyDescriptor('length').to.have.keys('value');
   *
   * @name ownPropertyDescriptor
   * @alias haveOwnPropertyDescriptor
   * @param {String} name
   * @param {Object} descriptor _optional_
   * @param {String} message _optional_
   * @api public
   */

  function assertOwnPropertyDescriptor (name, descriptor, msg) {
    if (typeof descriptor === 'string') {
      msg = descriptor;
      descriptor = null;
    }
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var actualDescriptor = Object.getOwnPropertyDescriptor(Object(obj), name);
    if (actualDescriptor && descriptor) {
      this.assert(
          _.eql(descriptor, actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to match ' + _.inspect(descriptor) + ', got ' + _.inspect(actualDescriptor)
        , 'expected the own property descriptor for ' + _.inspect(name) + ' on #{this} to not match ' + _.inspect(descriptor)
        , descriptor
        , actualDescriptor
        , true
      );
    } else {
      this.assert(
          actualDescriptor
        , 'expected #{this} to have an own property descriptor for ' + _.inspect(name)
        , 'expected #{this} to not have an own property descriptor for ' + _.inspect(name)
      );
    }
    flag(this, 'object', actualDescriptor);
  }

  Assertion.addMethod('ownPropertyDescriptor', assertOwnPropertyDescriptor);
  Assertion.addMethod('haveOwnPropertyDescriptor', assertOwnPropertyDescriptor);

  /**
   * ### .length
   *
   * Sets the `doLength` flag later used as a chain precursor to a value
   * comparison for the `length` property.
   *
   *     expect('foo').to.have.length.above(2);
   *     expect([ 1, 2, 3 ]).to.have.length.above(2);
   *     expect('foo').to.have.length.below(4);
   *     expect([ 1, 2, 3 ]).to.have.length.below(4);
   *     expect('foo').to.have.length.within(2,4);
   *     expect([ 1, 2, 3 ]).to.have.length.within(2,4);
   *
   * *Deprecation notice:* Using `length` as an assertion will be deprecated
   * in version 2.4.0 and removed in 3.0.0. Code using the old style of
   * asserting for `length` property value using `length(value)` should be
   * switched to use `lengthOf(value)` instead.
   *
   * @name length
   * @api public
   */

  /**
   * ### .lengthOf(value[, message])
   *
   * Asserts that the target's `length` property has
   * the expected value.
   *
   *     expect([ 1, 2, 3]).to.have.lengthOf(3);
   *     expect('foobar').to.have.lengthOf(6);
   *
   * @name lengthOf
   * @param {Number} length
   * @param {String} message _optional_
   * @api public
   */

  function assertLengthChain () {
    flag(this, 'doLength', true);
  }

  function assertLength (n, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).to.have.property('length');
    var len = obj.length;

    this.assert(
        len == n
      , 'expected #{this} to have a length of #{exp} but got #{act}'
      , 'expected #{this} to not have a length of #{act}'
      , n
      , len
    );
  }

  Assertion.addChainableMethod('length', assertLength, assertLengthChain);
  Assertion.addMethod('lengthOf', assertLength);

  /**
   * ### .match(regexp)
   *
   * Asserts that the target matches a regular expression.
   *
   *     expect('foobar').to.match(/^foo/);
   *
   * @name match
   * @alias matches
   * @param {RegExp} RegularExpression
   * @param {String} message _optional_
   * @api public
   */
  function assertMatch(re, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    this.assert(
        re.exec(obj)
      , 'expected #{this} to match ' + re
      , 'expected #{this} not to match ' + re
    );
  }

  Assertion.addMethod('match', assertMatch);
  Assertion.addMethod('matches', assertMatch);

  /**
   * ### .string(string)
   *
   * Asserts that the string target contains another string.
   *
   *     expect('foobar').to.have.string('bar');
   *
   * @name string
   * @param {String} string
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('string', function (str, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('string');

    this.assert(
        ~obj.indexOf(str)
      , 'expected #{this} to contain ' + _.inspect(str)
      , 'expected #{this} to not contain ' + _.inspect(str)
    );
  });


  /**
   * ### .keys(key1, [key2], [...])
   *
   * Asserts that the target contains any or all of the passed-in keys.
   * Use in combination with `any`, `all`, `contains`, or `have` will affect
   * what will pass.
   *
   * When used in conjunction with `any`, at least one key that is passed
   * in must exist in the target object. This is regardless whether or not
   * the `have` or `contain` qualifiers are used. Note, either `any` or `all`
   * should be used in the assertion. If neither are used, the assertion is
   * defaulted to `all`.
   *
   * When both `all` and `contain` are used, the target object must have at
   * least all of the passed-in keys but may have more keys not listed.
   *
   * When both `all` and `have` are used, the target object must both contain
   * all of the passed-in keys AND the number of keys in the target object must
   * match the number of keys passed in (in other words, a target object must
   * have all and only all of the passed-in keys).
   *
   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo', 'baz');
   *     expect({ foo: 1, bar: 2 }).to.have.any.keys('foo');
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys('bar', 'baz');
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys(['foo']);
   *     expect({ foo: 1, bar: 2 }).to.contain.any.keys({'foo': 6});
   *     expect({ foo: 1, bar: 2 }).to.have.all.keys(['bar', 'foo']);
   *     expect({ foo: 1, bar: 2 }).to.have.all.keys({'bar': 6, 'foo': 7});
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys(['bar', 'foo']);
   *     expect({ foo: 1, bar: 2, baz: 3 }).to.contain.all.keys({'bar': 6});
   *
   *
   * @name keys
   * @alias key
   * @param {String...|Array|Object} keys
   * @api public
   */

  function assertKeys (keys) {
    var obj = flag(this, 'object')
      , str
      , ok = true
      , mixedArgsMsg = 'keys must be given single argument of Array|Object|String, or multiple String arguments';

    switch (_.type(keys)) {
      case "array":
        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
        break;
      case "object":
        if (arguments.length > 1) throw (new Error(mixedArgsMsg));
        keys = Object.keys(keys);
        break;
      default:
        keys = Array.prototype.slice.call(arguments);
    }

    if (!keys.length) throw new Error('keys required');

    var actual = Object.keys(obj)
      , expected = keys
      , len = keys.length
      , any = flag(this, 'any')
      , all = flag(this, 'all');

    if (!any && !all) {
      all = true;
    }

    // Has any
    if (any) {
      var intersection = expected.filter(function(key) {
        return ~actual.indexOf(key);
      });
      ok = intersection.length > 0;
    }

    // Has all
    if (all) {
      ok = keys.every(function(key){
        return ~actual.indexOf(key);
      });
      if (!flag(this, 'negate') && !flag(this, 'contains')) {
        ok = ok && keys.length == actual.length;
      }
    }

    // Key string
    if (len > 1) {
      keys = keys.map(function(key){
        return _.inspect(key);
      });
      var last = keys.pop();
      if (all) {
        str = keys.join(', ') + ', and ' + last;
      }
      if (any) {
        str = keys.join(', ') + ', or ' + last;
      }
    } else {
      str = _.inspect(keys[0]);
    }

    // Form
    str = (len > 1 ? 'keys ' : 'key ') + str;

    // Have / include
    str = (flag(this, 'contains') ? 'contain ' : 'have ') + str;

    // Assertion
    this.assert(
        ok
      , 'expected #{this} to ' + str
      , 'expected #{this} to not ' + str
      , expected.slice(0).sort()
      , actual.sort()
      , true
    );
  }

  Assertion.addMethod('keys', assertKeys);
  Assertion.addMethod('key', assertKeys);

  /**
   * ### .throw(constructor)
   *
   * Asserts that the function target will throw a specific error, or specific type of error
   * (as determined using `instanceof`), optionally with a RegExp or string inclusion test
   * for the error's message.
   *
   *     var err = new ReferenceError('This is a bad function.');
   *     var fn = function () { throw err; }
   *     expect(fn).to.throw(ReferenceError);
   *     expect(fn).to.throw(Error);
   *     expect(fn).to.throw(/bad function/);
   *     expect(fn).to.not.throw('good function');
   *     expect(fn).to.throw(ReferenceError, /bad function/);
   *     expect(fn).to.throw(err);
   *     expect(fn).to.not.throw(new RangeError('Out of range.'));
   *
   * Please note that when a throw expectation is negated, it will check each
   * parameter independently, starting with error constructor type. The appropriate way
   * to check for the existence of a type of error but for a message that does not match
   * is to use `and`.
   *
   *     expect(fn).to.throw(ReferenceError)
   *        .and.not.throw(/good function/);
   *
   * @name throw
   * @alias throws
   * @alias Throw
   * @param {ErrorConstructor} constructor
   * @param {String|RegExp} expected error message
   * @param {String} message _optional_
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @returns error for chaining (null if no error)
   * @api public
   */

  function assertThrows (constructor, errMsg, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    new Assertion(obj, msg).is.a('function');

    var thrown = false
      , desiredError = null
      , name = null
      , thrownError = null;

    if (arguments.length === 0) {
      errMsg = null;
      constructor = null;
    } else if (constructor && (constructor instanceof RegExp || 'string' === typeof constructor)) {
      errMsg = constructor;
      constructor = null;
    } else if (constructor && constructor instanceof Error) {
      desiredError = constructor;
      constructor = null;
      errMsg = null;
    } else if (typeof constructor === 'function') {
      name = constructor.prototype.name || constructor.name;
      if (name === 'Error' && constructor !== Error) {
        name = (new constructor()).name;
      }
    } else {
      constructor = null;
    }

    try {
      obj();
    } catch (err) {
      // first, check desired error
      if (desiredError) {
        this.assert(
            err === desiredError
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp}'
          , (desiredError instanceof Error ? desiredError.toString() : desiredError)
          , (err instanceof Error ? err.toString() : err)
        );

        flag(this, 'object', err);
        return this;
      }

      // next, check constructor
      if (constructor) {
        this.assert(
            err instanceof constructor
          , 'expected #{this} to throw #{exp} but #{act} was thrown'
          , 'expected #{this} to not throw #{exp} but #{act} was thrown'
          , name
          , (err instanceof Error ? err.toString() : err)
        );

        if (!errMsg) {
          flag(this, 'object', err);
          return this;
        }
      }

      // next, check message
      var message = 'error' === _.type(err) && "message" in err
        ? err.message
        : '' + err;

      if ((message != null) && errMsg && errMsg instanceof RegExp) {
        this.assert(
            errMsg.exec(message)
          , 'expected #{this} to throw error matching #{exp} but got #{act}'
          , 'expected #{this} to throw error not matching #{exp}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else if ((message != null) && errMsg && 'string' === typeof errMsg) {
        this.assert(
            ~message.indexOf(errMsg)
          , 'expected #{this} to throw error including #{exp} but got #{act}'
          , 'expected #{this} to throw error not including #{act}'
          , errMsg
          , message
        );

        flag(this, 'object', err);
        return this;
      } else {
        thrown = true;
        thrownError = err;
      }
    }

    var actuallyGot = ''
      , expectedThrown = name !== null
        ? name
        : desiredError
          ? '#{exp}' //_.inspect(desiredError)
          : 'an error';

    if (thrown) {
      actuallyGot = ' but #{act} was thrown'
    }

    this.assert(
        thrown === true
      , 'expected #{this} to throw ' + expectedThrown + actuallyGot
      , 'expected #{this} to not throw ' + expectedThrown + actuallyGot
      , (desiredError instanceof Error ? desiredError.toString() : desiredError)
      , (thrownError instanceof Error ? thrownError.toString() : thrownError)
    );

    flag(this, 'object', thrownError);
  };

  Assertion.addMethod('throw', assertThrows);
  Assertion.addMethod('throws', assertThrows);
  Assertion.addMethod('Throw', assertThrows);

  /**
   * ### .respondTo(method)
   *
   * Asserts that the object or class target will respond to a method.
   *
   *     Klass.prototype.bar = function(){};
   *     expect(Klass).to.respondTo('bar');
   *     expect(obj).to.respondTo('bar');
   *
   * To check if a constructor will respond to a static function,
   * set the `itself` flag.
   *
   *     Klass.baz = function(){};
   *     expect(Klass).itself.to.respondTo('baz');
   *
   * @name respondTo
   * @alias respondsTo
   * @param {String} method
   * @param {String} message _optional_
   * @api public
   */

  function respondTo (method, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object')
      , itself = flag(this, 'itself')
      , context = ('function' === _.type(obj) && !itself)
        ? obj.prototype[method]
        : obj[method];

    this.assert(
        'function' === typeof context
      , 'expected #{this} to respond to ' + _.inspect(method)
      , 'expected #{this} to not respond to ' + _.inspect(method)
    );
  }

  Assertion.addMethod('respondTo', respondTo);
  Assertion.addMethod('respondsTo', respondTo);

  /**
   * ### .itself
   *
   * Sets the `itself` flag, later used by the `respondTo` assertion.
   *
   *     function Foo() {}
   *     Foo.bar = function() {}
   *     Foo.prototype.baz = function() {}
   *
   *     expect(Foo).itself.to.respondTo('bar');
   *     expect(Foo).itself.not.to.respondTo('baz');
   *
   * @name itself
   * @api public
   */

  Assertion.addProperty('itself', function () {
    flag(this, 'itself', true);
  });

  /**
   * ### .satisfy(method)
   *
   * Asserts that the target passes a given truth test.
   *
   *     expect(1).to.satisfy(function(num) { return num > 0; });
   *
   * @name satisfy
   * @alias satisfies
   * @param {Function} matcher
   * @param {String} message _optional_
   * @api public
   */

  function satisfy (matcher, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');
    var result = matcher(obj);
    this.assert(
        result
      , 'expected #{this} to satisfy ' + _.objDisplay(matcher)
      , 'expected #{this} to not satisfy' + _.objDisplay(matcher)
      , this.negate ? false : true
      , result
    );
  }
  
  Assertion.addMethod('satisfy', satisfy);
  Assertion.addMethod('satisfies', satisfy);

  /**
   * ### .closeTo(expected, delta)
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     expect(1.5).to.be.closeTo(1, 0.5);
   *
   * @name closeTo
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('closeTo', function (expected, delta, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj, msg).is.a('number');
    if (_.type(expected) !== 'number' || _.type(delta) !== 'number') {
      throw new Error('the arguments to closeTo must be numbers');
    }

    this.assert(
        Math.abs(obj - expected) <= delta
      , 'expected #{this} to be close to ' + expected + ' +/- ' + delta
      , 'expected #{this} not to be close to ' + expected + ' +/- ' + delta
    );
  });

  function isSubsetOf(subset, superset, cmp) {
    return subset.every(function(elem) {
      if (!cmp) return superset.indexOf(elem) !== -1;

      return superset.some(function(elem2) {
        return cmp(elem, elem2);
      });
    })
  }

  /**
   * ### .members(set)
   *
   * Asserts that the target is a superset of `set`,
   * or that the target and `set` have the same strictly-equal (===) members.
   * Alternately, if the `deep` flag is set, set members are compared for deep
   * equality.
   *
   *     expect([1, 2, 3]).to.include.members([3, 2]);
   *     expect([1, 2, 3]).to.not.include.members([3, 2, 8]);
   *
   *     expect([4, 2]).to.have.members([2, 4]);
   *     expect([5, 2]).to.not.have.members([5, 2, 1]);
   *
   *     expect([{ id: 1 }]).to.deep.include.members([{ id: 1 }]);
   *
   * @name members
   * @param {Array} set
   * @param {String} message _optional_
   * @api public
   */

  Assertion.addMethod('members', function (subset, msg) {
    if (msg) flag(this, 'message', msg);
    var obj = flag(this, 'object');

    new Assertion(obj).to.be.an('array');
    new Assertion(subset).to.be.an('array');

    var cmp = flag(this, 'deep') ? _.eql : undefined;

    if (flag(this, 'contains')) {
      return this.assert(
          isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to be a superset of #{act}'
        , 'expected #{this} to not be a superset of #{act}'
        , obj
        , subset
      );
    }

    this.assert(
        isSubsetOf(obj, subset, cmp) && isSubsetOf(subset, obj, cmp)
        , 'expected #{this} to have the same members as #{act}'
        , 'expected #{this} to not have the same members as #{act}'
        , obj
        , subset
    );
  });

  /**
   * ### .change(function)
   *
   * Asserts that a function changes an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val += 3 };
   *     var noChangeFn = function() { return 'foo' + 'bar'; }
   *     expect(fn).to.change(obj, 'val');
   *     expect(noChangFn).to.not.change(obj, 'val')
   *
   * @name change
   * @alias changes
   * @alias Change
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  function assertChanges (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      initial !== object[prop]
      , 'expected .' + prop + ' to change'
      , 'expected .' + prop + ' to not change'
    );
  }

  Assertion.addChainableMethod('change', assertChanges);
  Assertion.addChainableMethod('changes', assertChanges);

  /**
   * ### .increase(function)
   *
   * Asserts that a function increases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     expect(fn).to.increase(obj, 'val');
   *
   * @name increase
   * @alias increases
   * @alias Increase
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  function assertIncreases (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      object[prop] - initial > 0
      , 'expected .' + prop + ' to increase'
      , 'expected .' + prop + ' to not increase'
    );
  }

  Assertion.addChainableMethod('increase', assertIncreases);
  Assertion.addChainableMethod('increases', assertIncreases);

  /**
   * ### .decrease(function)
   *
   * Asserts that a function decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     expect(fn).to.decrease(obj, 'val');
   *
   * @name decrease
   * @alias decreases
   * @alias Decrease
   * @param {String} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  function assertDecreases (object, prop, msg) {
    if (msg) flag(this, 'message', msg);
    var fn = flag(this, 'object');
    new Assertion(object, msg).to.have.property(prop);
    new Assertion(fn).is.a('function');

    var initial = object[prop];
    fn();

    this.assert(
      object[prop] - initial < 0
      , 'expected .' + prop + ' to decrease'
      , 'expected .' + prop + ' to not decrease'
    );
  }

  Assertion.addChainableMethod('decrease', assertDecreases);
  Assertion.addChainableMethod('decreases', assertDecreases);

  /**
   * ### .extensible
   *
   * Asserts that the target is extensible (can have new properties added to 
   * it).
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect({}).to.be.extensible;
   *     expect(nonExtensibleObject).to.not.be.extensible;
   *     expect(sealedObject).to.not.be.extensible;
   *     expect(frozenObject).to.not.be.extensible;
   *
   * @name extensible
   * @api public
   */

  Assertion.addProperty('extensible', function() {
    var obj = flag(this, 'object');

    this.assert(
      Object.isExtensible(obj)
      , 'expected #{this} to be extensible'
      , 'expected #{this} to not be extensible'
    );
  });

  /**
   * ### .sealed
   *
   * Asserts that the target is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freeze({});
   *
   *     expect(sealedObject).to.be.sealed;
   *     expect(frozenObject).to.be.sealed;
   *     expect({}).to.not.be.sealed;
   *
   * @name sealed
   * @api public
   */

  Assertion.addProperty('sealed', function() {
    var obj = flag(this, 'object');

    this.assert(
      Object.isSealed(obj)
      , 'expected #{this} to be sealed'
      , 'expected #{this} to not be sealed'
    );
  });

  /**
   * ### .frozen
   *
   * Asserts that the target is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *
   *     expect(frozenObject).to.be.frozen;
   *     expect({}).to.not.be.frozen;
   *
   * @name frozen
   * @api public
   */

  Assertion.addProperty('frozen', function() {
    var obj = flag(this, 'object');

    this.assert(
      Object.isFrozen(obj)
      , 'expected #{this} to be frozen'
      , 'expected #{this} to not be frozen'
    );
  });

};

},{}],16:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */


module.exports = function (chai, util) {

  /*!
   * Chai dependencies.
   */

  var Assertion = chai.Assertion
    , flag = util.flag;

  /*!
   * Module export.
   */

  /**
   * ### assert(expression, message)
   *
   * Write your own test expressions.
   *
   *     assert('foo' !== 'bar', 'foo is not bar');
   *     assert(Array.isArray([]), 'empty arrays are arrays');
   *
   * @param {Mixed} expression to test for truthiness
   * @param {String} message to display on error
   * @name assert
   * @api public
   */

  var assert = chai.assert = function (express, errmsg) {
    var test = new Assertion(null, null, chai.assert);
    test.assert(
        express
      , errmsg
      , '[ negation message unavailable ]'
    );
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure. Node.js `assert` module-compatible.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @api public
   */

  assert.fail = function (actual, expected, message, operator) {
    message = message || 'assert.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, assert.fail);
  };

  /**
   * ### .isOk(object, [message])
   *
   * Asserts that `object` is truthy.
   *
   *     assert.isOk('everything', 'everything is ok');
   *     assert.isOk(false, 'this will fail');
   *
   * @name isOk
   * @alias ok
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.isOk = function (val, msg) {
    new Assertion(val, msg).is.ok;
  };

  /**
   * ### .isNotOk(object, [message])
   *
   * Asserts that `object` is falsy.
   *
   *     assert.isNotOk('everything', 'this will fail');
   *     assert.isNotOk(false, 'this will pass');
   *
   * @name isNotOk
   * @alias notOk
   * @param {Mixed} object to test
   * @param {String} message
   * @api public
   */

  assert.isNotOk = function (val, msg) {
    new Assertion(val, msg).is.not.ok;
  };

  /**
   * ### .equal(actual, expected, [message])
   *
   * Asserts non-strict equality (`==`) of `actual` and `expected`.
   *
   *     assert.equal(3, '3', '== coerces values to strings');
   *
   * @name equal
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.equal = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.equal);

    test.assert(
        exp == flag(test, 'object')
      , 'expected #{this} to equal #{exp}'
      , 'expected #{this} to not equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .notEqual(actual, expected, [message])
   *
   * Asserts non-strict inequality (`!=`) of `actual` and `expected`.
   *
   *     assert.notEqual(3, 4, 'these numbers are not equal');
   *
   * @name notEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notEqual = function (act, exp, msg) {
    var test = new Assertion(act, msg, assert.notEqual);

    test.assert(
        exp != flag(test, 'object')
      , 'expected #{this} to not equal #{exp}'
      , 'expected #{this} to equal #{act}'
      , exp
      , act
    );
  };

  /**
   * ### .strictEqual(actual, expected, [message])
   *
   * Asserts strict equality (`===`) of `actual` and `expected`.
   *
   *     assert.strictEqual(true, true, 'these booleans are strictly equal');
   *
   * @name strictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.strictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.equal(exp);
  };

  /**
   * ### .notStrictEqual(actual, expected, [message])
   *
   * Asserts strict inequality (`!==`) of `actual` and `expected`.
   *
   *     assert.notStrictEqual(3, '3', 'no coercion for strict equality');
   *
   * @name notStrictEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notStrictEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.equal(exp);
  };

  /**
   * ### .deepEqual(actual, expected, [message])
   *
   * Asserts that `actual` is deeply equal to `expected`.
   *
   *     assert.deepEqual({ tea: 'green' }, { tea: 'green' });
   *
   * @name deepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.deepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.eql(exp);
  };

  /**
   * ### .notDeepEqual(actual, expected, [message])
   *
   * Assert that `actual` is not deeply equal to `expected`.
   *
   *     assert.notDeepEqual({ tea: 'green' }, { tea: 'jasmine' });
   *
   * @name notDeepEqual
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @api public
   */

  assert.notDeepEqual = function (act, exp, msg) {
    new Assertion(act, msg).to.not.eql(exp);
  };

  /**
   * ### .isTrue(value, [message])
   *
   * Asserts that `value` is true.
   *
   *     var teaServed = true;
   *     assert.isTrue(teaServed, 'the tea has been served');
   *
   * @name isTrue
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isAbove = function (val, abv, msg) {
    new Assertion(val, msg).to.be.above(abv);
  };

   /**
   * ### .isAbove(valueToCheck, valueToBeAbove, [message])
   *
   * Asserts `valueToCheck` is strictly greater than (>) `valueToBeAbove`
   *
   *     assert.isAbove(5, 2, '5 is strictly greater than 2');
   *
   * @name isAbove
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeAbove
   * @param {String} message
   * @api public
   */

  assert.isBelow = function (val, blw, msg) {
    new Assertion(val, msg).to.be.below(blw);
  };

   /**
   * ### .isBelow(valueToCheck, valueToBeBelow, [message])
   *
   * Asserts `valueToCheck` is strictly less than (<) `valueToBeBelow`
   *
   *     assert.isBelow(3, 6, '3 is strictly less than 6');
   *
   * @name isBelow
   * @param {Mixed} valueToCheck
   * @param {Mixed} valueToBeBelow
   * @param {String} message
   * @api public
   */

  assert.isTrue = function (val, msg) {
    new Assertion(val, msg).is['true'];
  };

  /**
   * ### .isFalse(value, [message])
   *
   * Asserts that `value` is false.
   *
   *     var teaServed = false;
   *     assert.isFalse(teaServed, 'no tea yet? hmm...');
   *
   * @name isFalse
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFalse = function (val, msg) {
    new Assertion(val, msg).is['false'];
  };

  /**
   * ### .isNull(value, [message])
   *
   * Asserts that `value` is null.
   *
   *     assert.isNull(err, 'there was no error');
   *
   * @name isNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNull = function (val, msg) {
    new Assertion(val, msg).to.equal(null);
  };

  /**
   * ### .isNotNull(value, [message])
   *
   * Asserts that `value` is not null.
   *
   *     var tea = 'tasty chai';
   *     assert.isNotNull(tea, 'great, time for tea!');
   *
   * @name isNotNull
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNull = function (val, msg) {
    new Assertion(val, msg).to.not.equal(null);
  };

  /**
   * ### .isNaN
   * Asserts that value is NaN
   *
   *    assert.isNaN('foo', 'foo is NaN');
   *
   * @name isNaN
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNaN = function (val, msg) {
    new Assertion(val, msg).to.be.NaN;
  };

  /**
   * ### .isNotNaN
   * Asserts that value is not NaN
   *
   *    assert.isNotNaN(4, '4 is not NaN');
   *
   * @name isNotNaN
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */
  assert.isNotNaN = function (val, msg) {
    new Assertion(val, msg).not.to.be.NaN;
  };

  /**
   * ### .isUndefined(value, [message])
   *
   * Asserts that `value` is `undefined`.
   *
   *     var tea;
   *     assert.isUndefined(tea, 'no tea defined');
   *
   * @name isUndefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isUndefined = function (val, msg) {
    new Assertion(val, msg).to.equal(undefined);
  };

  /**
   * ### .isDefined(value, [message])
   *
   * Asserts that `value` is not `undefined`.
   *
   *     var tea = 'cup of chai';
   *     assert.isDefined(tea, 'tea has been defined');
   *
   * @name isDefined
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isDefined = function (val, msg) {
    new Assertion(val, msg).to.not.equal(undefined);
  };

  /**
   * ### .isFunction(value, [message])
   *
   * Asserts that `value` is a function.
   *
   *     function serveTea() { return 'cup of tea'; };
   *     assert.isFunction(serveTea, 'great, we can have tea now');
   *
   * @name isFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isFunction = function (val, msg) {
    new Assertion(val, msg).to.be.a('function');
  };

  /**
   * ### .isNotFunction(value, [message])
   *
   * Asserts that `value` is _not_ a function.
   *
   *     var serveTea = [ 'heat', 'pour', 'sip' ];
   *     assert.isNotFunction(serveTea, 'great, we have listed the steps');
   *
   * @name isNotFunction
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotFunction = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('function');
  };

  /**
   * ### .isObject(value, [message])
   *
   * Asserts that `value` is an object (as revealed by
   * `Object.prototype.toString`).
   *
   *     var selection = { name: 'Chai', serve: 'with spices' };
   *     assert.isObject(selection, 'tea selection is an object');
   *
   * @name isObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isObject = function (val, msg) {
    new Assertion(val, msg).to.be.a('object');
  };

  /**
   * ### .isNotObject(value, [message])
   *
   * Asserts that `value` is _not_ an object.
   *
   *     var selection = 'chai'
   *     assert.isNotObject(selection, 'tea selection is not an object');
   *     assert.isNotObject(null, 'null is not an object');
   *
   * @name isNotObject
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotObject = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('object');
  };

  /**
   * ### .isArray(value, [message])
   *
   * Asserts that `value` is an array.
   *
   *     var menu = [ 'green', 'chai', 'oolong' ];
   *     assert.isArray(menu, 'what kind of tea do we want?');
   *
   * @name isArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isArray = function (val, msg) {
    new Assertion(val, msg).to.be.an('array');
  };

  /**
   * ### .isNotArray(value, [message])
   *
   * Asserts that `value` is _not_ an array.
   *
   *     var menu = 'green|chai|oolong';
   *     assert.isNotArray(menu, 'what kind of tea do we want?');
   *
   * @name isNotArray
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotArray = function (val, msg) {
    new Assertion(val, msg).to.not.be.an('array');
  };

  /**
   * ### .isString(value, [message])
   *
   * Asserts that `value` is a string.
   *
   *     var teaOrder = 'chai';
   *     assert.isString(teaOrder, 'order placed');
   *
   * @name isString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isString = function (val, msg) {
    new Assertion(val, msg).to.be.a('string');
  };

  /**
   * ### .isNotString(value, [message])
   *
   * Asserts that `value` is _not_ a string.
   *
   *     var teaOrder = 4;
   *     assert.isNotString(teaOrder, 'order placed');
   *
   * @name isNotString
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotString = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('string');
  };

  /**
   * ### .isNumber(value, [message])
   *
   * Asserts that `value` is a number.
   *
   *     var cups = 2;
   *     assert.isNumber(cups, 'how many cups');
   *
   * @name isNumber
   * @param {Number} value
   * @param {String} message
   * @api public
   */

  assert.isNumber = function (val, msg) {
    new Assertion(val, msg).to.be.a('number');
  };

  /**
   * ### .isNotNumber(value, [message])
   *
   * Asserts that `value` is _not_ a number.
   *
   *     var cups = '2 cups please';
   *     assert.isNotNumber(cups, 'how many cups');
   *
   * @name isNotNumber
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotNumber = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('number');
  };

  /**
   * ### .isBoolean(value, [message])
   *
   * Asserts that `value` is a boolean.
   *
   *     var teaReady = true
   *       , teaServed = false;
   *
   *     assert.isBoolean(teaReady, 'is the tea ready');
   *     assert.isBoolean(teaServed, 'has tea been served');
   *
   * @name isBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isBoolean = function (val, msg) {
    new Assertion(val, msg).to.be.a('boolean');
  };

  /**
   * ### .isNotBoolean(value, [message])
   *
   * Asserts that `value` is _not_ a boolean.
   *
   *     var teaReady = 'yep'
   *       , teaServed = 'nope';
   *
   *     assert.isNotBoolean(teaReady, 'is the tea ready');
   *     assert.isNotBoolean(teaServed, 'has tea been served');
   *
   * @name isNotBoolean
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.isNotBoolean = function (val, msg) {
    new Assertion(val, msg).to.not.be.a('boolean');
  };

  /**
   * ### .typeOf(value, name, [message])
   *
   * Asserts that `value`'s type is `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.typeOf({ tea: 'chai' }, 'object', 'we have an object');
   *     assert.typeOf(['chai', 'jasmine'], 'array', 'we have an array');
   *     assert.typeOf('tea', 'string', 'we have a string');
   *     assert.typeOf(/tea/, 'regexp', 'we have a regular expression');
   *     assert.typeOf(null, 'null', 'we have a null');
   *     assert.typeOf(undefined, 'undefined', 'we have an undefined');
   *
   * @name typeOf
   * @param {Mixed} value
   * @param {String} name
   * @param {String} message
   * @api public
   */

  assert.typeOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.a(type);
  };

  /**
   * ### .notTypeOf(value, name, [message])
   *
   * Asserts that `value`'s type is _not_ `name`, as determined by
   * `Object.prototype.toString`.
   *
   *     assert.notTypeOf('tea', 'number', 'strings are not numbers');
   *
   * @name notTypeOf
   * @param {Mixed} value
   * @param {String} typeof name
   * @param {String} message
   * @api public
   */

  assert.notTypeOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.a(type);
  };

  /**
   * ### .instanceOf(object, constructor, [message])
   *
   * Asserts that `value` is an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new Tea('chai');
   *
   *     assert.instanceOf(chai, Tea, 'chai is an instance of tea');
   *
   * @name instanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.instanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.be.instanceOf(type);
  };

  /**
   * ### .notInstanceOf(object, constructor, [message])
   *
   * Asserts `value` is not an instance of `constructor`.
   *
   *     var Tea = function (name) { this.name = name; }
   *       , chai = new String('chai');
   *
   *     assert.notInstanceOf(chai, Tea, 'chai is not an instance of tea');
   *
   * @name notInstanceOf
   * @param {Object} object
   * @param {Constructor} constructor
   * @param {String} message
   * @api public
   */

  assert.notInstanceOf = function (val, type, msg) {
    new Assertion(val, msg).to.not.be.instanceOf(type);
  };

  /**
   * ### .include(haystack, needle, [message])
   *
   * Asserts that `haystack` includes `needle`. Works
   * for strings and arrays.
   *
   *     assert.include('foobar', 'bar', 'foobar contains string "bar"');
   *     assert.include([ 1, 2, 3 ], 3, 'array contains value');
   *
   * @name include
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.include = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.include).include(inc);
  };

  /**
   * ### .notInclude(haystack, needle, [message])
   *
   * Asserts that `haystack` does not include `needle`. Works
   * for strings and arrays.
   *
   *     assert.notInclude('foobar', 'baz', 'string not include substring');
   *     assert.notInclude([ 1, 2, 3 ], 4, 'array not include contain value');
   *
   * @name notInclude
   * @param {Array|String} haystack
   * @param {Mixed} needle
   * @param {String} message
   * @api public
   */

  assert.notInclude = function (exp, inc, msg) {
    new Assertion(exp, msg, assert.notInclude).not.include(inc);
  };

  /**
   * ### .match(value, regexp, [message])
   *
   * Asserts that `value` matches the regular expression `regexp`.
   *
   *     assert.match('foobar', /^foo/, 'regexp matches');
   *
   * @name match
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.match = function (exp, re, msg) {
    new Assertion(exp, msg).to.match(re);
  };

  /**
   * ### .notMatch(value, regexp, [message])
   *
   * Asserts that `value` does not match the regular expression `regexp`.
   *
   *     assert.notMatch('foobar', /^foo/, 'regexp does not match');
   *
   * @name notMatch
   * @param {Mixed} value
   * @param {RegExp} regexp
   * @param {String} message
   * @api public
   */

  assert.notMatch = function (exp, re, msg) {
    new Assertion(exp, msg).to.not.match(re);
  };

  /**
   * ### .property(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`.
   *
   *     assert.property({ tea: { green: 'matcha' }}, 'tea');
   *
   * @name property
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.property = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.property(prop);
  };

  /**
   * ### .notProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`.
   *
   *     assert.notProperty({ tea: { green: 'matcha' }}, 'coffee');
   *
   * @name notProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.property(prop);
  };

  /**
   * ### .deepProperty(object, property, [message])
   *
   * Asserts that `object` has a property named by `property`, which can be a
   * string using dot- and bracket-notation for deep reference.
   *
   *     assert.deepProperty({ tea: { green: 'matcha' }}, 'tea.green');
   *
   * @name deepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.deepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop);
  };

  /**
   * ### .notDeepProperty(object, property, [message])
   *
   * Asserts that `object` does _not_ have a property named by `property`, which
   * can be a string using dot- and bracket-notation for deep reference.
   *
   *     assert.notDeepProperty({ tea: { green: 'matcha' }}, 'tea.oolong');
   *
   * @name notDeepProperty
   * @param {Object} object
   * @param {String} property
   * @param {String} message
   * @api public
   */

  assert.notDeepProperty = function (obj, prop, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop);
  };

  /**
   * ### .propertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`.
   *
   *     assert.propertyVal({ tea: 'is good' }, 'tea', 'is good');
   *
   * @name propertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.property(prop, val);
  };

  /**
   * ### .propertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`.
   *
   *     assert.propertyNotVal({ tea: 'is good' }, 'tea', 'is bad');
   *
   * @name propertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.propertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.property(prop, val);
  };

  /**
   * ### .deepPropertyVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property` with value given
   * by `value`. `property` can use dot- and bracket-notation for deep
   * reference.
   *
   *     assert.deepPropertyVal({ tea: { green: 'matcha' }}, 'tea.green', 'matcha');
   *
   * @name deepPropertyVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.have.deep.property(prop, val);
  };

  /**
   * ### .deepPropertyNotVal(object, property, value, [message])
   *
   * Asserts that `object` has a property named by `property`, but with a value
   * different from that given by `value`. `property` can use dot- and
   * bracket-notation for deep reference.
   *
   *     assert.deepPropertyNotVal({ tea: { green: 'matcha' }}, 'tea.green', 'konacha');
   *
   * @name deepPropertyNotVal
   * @param {Object} object
   * @param {String} property
   * @param {Mixed} value
   * @param {String} message
   * @api public
   */

  assert.deepPropertyNotVal = function (obj, prop, val, msg) {
    new Assertion(obj, msg).to.not.have.deep.property(prop, val);
  };

  /**
   * ### .lengthOf(object, length, [message])
   *
   * Asserts that `object` has a `length` property with the expected value.
   *
   *     assert.lengthOf([1,2,3], 3, 'array has length of 3');
   *     assert.lengthOf('foobar', 5, 'string has length of 6');
   *
   * @name lengthOf
   * @param {Mixed} object
   * @param {Number} length
   * @param {String} message
   * @api public
   */

  assert.lengthOf = function (exp, len, msg) {
    new Assertion(exp, msg).to.have.length(len);
  };

  /**
   * ### .throws(function, [constructor/string/regexp], [string/regexp], [message])
   *
   * Asserts that `function` will throw an error that is an instance of
   * `constructor`, or alternately that it will throw an error with message
   * matching `regexp`.
   *
   *     assert.throws(fn, 'function throws a reference error');
   *     assert.throws(fn, /function throws a reference error/);
   *     assert.throws(fn, ReferenceError);
   *     assert.throws(fn, ReferenceError, 'function throws a reference error');
   *     assert.throws(fn, ReferenceError, /function throws a reference error/);
   *
   * @name throws
   * @alias throw
   * @alias Throw
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.throws = function (fn, errt, errs, msg) {
    if ('string' === typeof errt || errt instanceof RegExp) {
      errs = errt;
      errt = null;
    }

    var assertErr = new Assertion(fn, msg).to.throw(errt, errs);
    return flag(assertErr, 'object');
  };

  /**
   * ### .doesNotThrow(function, [constructor/regexp], [message])
   *
   * Asserts that `function` will _not_ throw an error that is an instance of
   * `constructor`, or alternately that it will not throw an error with message
   * matching `regexp`.
   *
   *     assert.doesNotThrow(fn, Error, 'function does not throw');
   *
   * @name doesNotThrow
   * @param {Function} function
   * @param {ErrorConstructor} constructor
   * @param {RegExp} regexp
   * @param {String} message
   * @see https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Error#Error_types
   * @api public
   */

  assert.doesNotThrow = function (fn, type, msg) {
    if ('string' === typeof type) {
      msg = type;
      type = null;
    }

    new Assertion(fn, msg).to.not.Throw(type);
  };

  /**
   * ### .operator(val1, operator, val2, [message])
   *
   * Compares two values using `operator`.
   *
   *     assert.operator(1, '<', 2, 'everything is ok');
   *     assert.operator(1, '>', 2, 'this will fail');
   *
   * @name operator
   * @param {Mixed} val1
   * @param {String} operator
   * @param {Mixed} val2
   * @param {String} message
   * @api public
   */

  assert.operator = function (val, operator, val2, msg) {
    var ok;
    switch(operator) {
      case '==':
        ok = val == val2;
        break;
      case '===':
        ok = val === val2;
        break;
      case '>':
        ok = val > val2;
        break;
      case '>=':
        ok = val >= val2;
        break;
      case '<':
        ok = val < val2;
        break;
      case '<=':
        ok = val <= val2;
        break;
      case '!=':
        ok = val != val2;
        break;
      case '!==':
        ok = val !== val2;
        break;
      default:
        throw new Error('Invalid operator "' + operator + '"');
    }
    var test = new Assertion(ok, msg);
    test.assert(
        true === flag(test, 'object')
      , 'expected ' + util.inspect(val) + ' to be ' + operator + ' ' + util.inspect(val2)
      , 'expected ' + util.inspect(val) + ' to not be ' + operator + ' ' + util.inspect(val2) );
  };

  /**
   * ### .closeTo(actual, expected, delta, [message])
   *
   * Asserts that the target is equal `expected`, to within a +/- `delta` range.
   *
   *     assert.closeTo(1.5, 1, 0.5, 'numbers are close');
   *
   * @name closeTo
   * @param {Number} actual
   * @param {Number} expected
   * @param {Number} delta
   * @param {String} message
   * @api public
   */

  assert.closeTo = function (act, exp, delta, msg) {
    new Assertion(act, msg).to.be.closeTo(exp, delta);
  };

  /**
   * ### .sameMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members.
   * Order is not taken into account.
   *
   *     assert.sameMembers([ 1, 2, 3 ], [ 2, 1, 3 ], 'same members');
   *
   * @name sameMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @api public
   */

  assert.sameMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.members(set2);
  }

  /**
   * ### .sameDeepMembers(set1, set2, [message])
   *
   * Asserts that `set1` and `set2` have the same members - using a deep equality checking.
   * Order is not taken into account.
   *
   *     assert.sameDeepMembers([ {b: 3}, {a: 2}, {c: 5} ], [ {c: 5}, {b: 3}, {a: 2} ], 'same deep members');
   *
   * @name sameDeepMembers
   * @param {Array} set1
   * @param {Array} set2
   * @param {String} message
   * @api public
   */

  assert.sameDeepMembers = function (set1, set2, msg) {
    new Assertion(set1, msg).to.have.same.deep.members(set2);
  }

  /**
   * ### .includeMembers(superset, subset, [message])
   *
   * Asserts that `subset` is included in `superset`.
   * Order is not taken into account.
   *
   *     assert.includeMembers([ 1, 2, 3 ], [ 2, 1 ], 'include members');
   *
   * @name includeMembers
   * @param {Array} superset
   * @param {Array} subset
   * @param {String} message
   * @api public
   */

  assert.includeMembers = function (superset, subset, msg) {
    new Assertion(superset, msg).to.include.members(subset);
  }

   /**
   * ### .changes(function, object, property)
   *
   * Asserts that a function changes the value of a property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 22 };
   *     assert.changes(fn, obj, 'val');
   *
   * @name changes
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.changes = function (fn, obj, prop) {
    new Assertion(fn).to.change(obj, prop);
  }

   /**
   * ### .doesNotChange(function, object, property)
   *
   * Asserts that a function does not changes the value of a property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { console.log('foo'); };
   *     assert.doesNotChange(fn, obj, 'val');
   *
   * @name doesNotChange
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.doesNotChange = function (fn, obj, prop) {
    new Assertion(fn).to.not.change(obj, prop);
  }

   /**
   * ### .increases(function, object, property)
   *
   * Asserts that a function increases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 13 };
   *     assert.increases(fn, obj, 'val');
   *
   * @name increases
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.increases = function (fn, obj, prop) {
    new Assertion(fn).to.increase(obj, prop);
  }

   /**
   * ### .doesNotIncrease(function, object, property)
   *
   * Asserts that a function does not increase object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 8 };
   *     assert.doesNotIncrease(fn, obj, 'val');
   *
   * @name doesNotIncrease
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.doesNotIncrease = function (fn, obj, prop) {
    new Assertion(fn).to.not.increase(obj, prop);
  }

   /**
   * ### .decreases(function, object, property)
   *
   * Asserts that a function decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 5 };
   *     assert.decreases(fn, obj, 'val');
   *
   * @name decreases
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.decreases = function (fn, obj, prop) {
    new Assertion(fn).to.decrease(obj, prop);
  }

   /**
   * ### .doesNotDecrease(function, object, property)
   *
   * Asserts that a function does not decreases an object property
   *
   *     var obj = { val: 10 };
   *     var fn = function() { obj.val = 15 };
   *     assert.doesNotDecrease(fn, obj, 'val');
   *
   * @name doesNotDecrease
   * @param {Function} modifier function
   * @param {Object} object
   * @param {String} property name
   * @param {String} message _optional_
   * @api public
   */

  assert.doesNotDecrease = function (fn, obj, prop) {
    new Assertion(fn).to.not.decrease(obj, prop);
  }

  /*!
   * ### .ifError(object)
   *
   * Asserts if value is not a false value, and throws if it is a true value.
   * This is added to allow for chai to be a drop-in replacement for Node's
   * assert class.
   *
   *     var err = new Error('I am a custom error');
   *     assert.ifError(err); // Rethrows err!
   *
   * @name ifError
   * @param {Object} object
   * @api public
   */

  assert.ifError = function (val) {
    if (val) {
      throw(val);
    }
  };

  /**
   * ### .isExtensible(object)
   *
   * Asserts that `object` is extensible (can have new properties added to it).
   *
   *     assert.isExtensible({});
   *
   * @name isExtensible
   * @alias extensible
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isExtensible = function (obj, msg) {
    new Assertion(obj, msg).to.be.extensible;
  };

  /**
   * ### .isNotExtensible(object)
   *
   * Asserts that `object` is _not_ extensible.
   *
   *     var nonExtensibleObject = Object.preventExtensions({});
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.freese({});
   *
   *     assert.isNotExtensible(nonExtensibleObject);
   *     assert.isNotExtensible(sealedObject);
   *     assert.isNotExtensible(frozenObject);
   *
   * @name isNotExtensible
   * @alias notExtensible
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isNotExtensible = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.extensible;
  };

  /**
   * ### .isSealed(object)
   *
   * Asserts that `object` is sealed (cannot have new properties added to it
   * and its existing properties cannot be removed).
   *
   *     var sealedObject = Object.seal({});
   *     var frozenObject = Object.seal({});
   *
   *     assert.isSealed(sealedObject);
   *     assert.isSealed(frozenObject);
   *
   * @name isSealed
   * @alias sealed
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isSealed = function (obj, msg) {
    new Assertion(obj, msg).to.be.sealed;
  };

  /**
   * ### .isNotSealed(object)
   *
   * Asserts that `object` is _not_ sealed.
   *
   *     assert.isNotSealed({});
   *
   * @name isNotSealed
   * @alias notSealed
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isNotSealed = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.sealed;
  };

  /**
   * ### .isFrozen(object)
   *
   * Asserts that `object` is frozen (cannot have new properties added to it
   * and its existing properties cannot be modified).
   *
   *     var frozenObject = Object.freeze({});
   *     assert.frozen(frozenObject);
   *
   * @name isFrozen
   * @alias frozen
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isFrozen = function (obj, msg) {
    new Assertion(obj, msg).to.be.frozen;
  };

  /**
   * ### .isNotFrozen(object)
   *
   * Asserts that `object` is _not_ frozen.
   *
   *     assert.isNotFrozen({});
   *
   * @name isNotFrozen
   * @alias notFrozen
   * @param {Object} object
   * @param {String} message _optional_
   * @api public
   */

  assert.isNotFrozen = function (obj, msg) {
    new Assertion(obj, msg).to.not.be.frozen;
  };

  /*!
   * Aliases.
   */

  (function alias(name, as){
    assert[as] = assert[name];
    return alias;
  })
  ('isOk', 'ok')
  ('isNotOk', 'notOk')
  ('throws', 'throw')
  ('throws', 'Throw')
  ('isExtensible', 'extensible')
  ('isNotExtensible', 'notExtensible')
  ('isSealed', 'sealed')
  ('isNotSealed', 'notSealed')
  ('isFrozen', 'frozen')
  ('isNotFrozen', 'notFrozen');
};

},{}],17:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  chai.expect = function (val, message) {
    return new chai.Assertion(val, message);
  };

  /**
   * ### .fail(actual, expected, [message], [operator])
   *
   * Throw a failure.
   *
   * @name fail
   * @param {Mixed} actual
   * @param {Mixed} expected
   * @param {String} message
   * @param {String} operator
   * @api public
   */

  chai.expect.fail = function (actual, expected, message, operator) {
    message = message || 'expect.fail()';
    throw new chai.AssertionError(message, {
        actual: actual
      , expected: expected
      , operator: operator
    }, chai.expect.fail);
  };
};

},{}],18:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

module.exports = function (chai, util) {
  var Assertion = chai.Assertion;

  function loadShould () {
    // explicitly define this method as function as to have it's name to include as `ssfi`
    function shouldGetter() {
      if (this instanceof String || this instanceof Number || this instanceof Boolean ) {
        return new Assertion(this.valueOf(), null, shouldGetter);
      }
      return new Assertion(this, null, shouldGetter);
    }
    function shouldSetter(value) {
      // See https://github.com/chaijs/chai/issues/86: this makes
      // `whatever.should = someValue` actually set `someValue`, which is
      // especially useful for `global.should = require('chai').should()`.
      //
      // Note that we have to use [[DefineProperty]] instead of [[Put]]
      // since otherwise we would trigger this very setter!
      Object.defineProperty(this, 'should', {
        value: value,
        enumerable: true,
        configurable: true,
        writable: true
      });
    }
    // modify Object.prototype to have `should`
    Object.defineProperty(Object.prototype, 'should', {
      set: shouldSetter
      , get: shouldGetter
      , configurable: true
    });

    var should = {};

    /**
     * ### .fail(actual, expected, [message], [operator])
     *
     * Throw a failure.
     *
     * @name fail
     * @param {Mixed} actual
     * @param {Mixed} expected
     * @param {String} message
     * @param {String} operator
     * @api public
     */

    should.fail = function (actual, expected, message, operator) {
      message = message || 'should.fail()';
      throw new chai.AssertionError(message, {
          actual: actual
        , expected: expected
        , operator: operator
      }, should.fail);
    };

    should.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.equal(val2);
    };

    should.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.Throw(errt, errs);
    };

    should.exist = function (val, msg) {
      new Assertion(val, msg).to.exist;
    }

    // negation
    should.not = {}

    should.not.equal = function (val1, val2, msg) {
      new Assertion(val1, msg).to.not.equal(val2);
    };

    should.not.Throw = function (fn, errt, errs, msg) {
      new Assertion(fn, msg).to.not.Throw(errt, errs);
    };

    should.not.exist = function (val, msg) {
      new Assertion(val, msg).to.not.exist;
    }

    should['throw'] = should['Throw'];
    should.not['throw'] = should.not['Throw'];

    return should;
  };

  chai.should = loadShould;
  chai.Should = loadShould;
};

},{}],19:[function(require,module,exports){
/*!
 * Chai - addChainingMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var transferFlags = require('./transferFlags');
var flag = require('./flag');
var config = require('../config');

/*!
 * Module variables
 */

// Check whether `__proto__` is supported
var hasProtoSupport = '__proto__' in Object;

// Without `__proto__` support, this module will need to add properties to a function.
// However, some Function.prototype methods cannot be overwritten,
// and there seems no easy cross-platform way to detect them (@see chaijs/chai/issues/69).
var excludeNames = /^(?:length|name|arguments|caller)$/;

// Cache `Function` properties
var call  = Function.prototype.call,
    apply = Function.prototype.apply;

/**
 * ### addChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Adds a method to an object, such that the method can also be chained.
 *
 *     utils.addChainableMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addChainableMethod('foo', fn, chainingBehavior);
 *
 * The result can then be used as both a method assertion, executing both `method` and
 * `chainingBehavior`, or as a language chain, which only executes `chainingBehavior`.
 *
 *     expect(fooStr).to.be.foo('bar');
 *     expect(fooStr).to.be.foo.equal('foo');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for `name`, when called
 * @param {Function} chainingBehavior function to be called every time the property is accessed
 * @name addChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  if (typeof chainingBehavior !== 'function') {
    chainingBehavior = function () { };
  }

  var chainableBehavior = {
      method: method
    , chainingBehavior: chainingBehavior
  };

  // save the methods so we can overwrite them later, if we need to.
  if (!ctx.__methods) {
    ctx.__methods = {};
  }
  ctx.__methods[name] = chainableBehavior;

  Object.defineProperty(ctx, name,
    { get: function () {
        chainableBehavior.chainingBehavior.call(this);

        var assert = function assert() {
          var old_ssfi = flag(this, 'ssfi');
          if (old_ssfi && config.includeStack === false)
            flag(this, 'ssfi', assert);
          var result = chainableBehavior.method.apply(this, arguments);
          return result === undefined ? this : result;
        };

        // Use `__proto__` if available
        if (hasProtoSupport) {
          // Inherit all properties from the object by replacing the `Function` prototype
          var prototype = assert.__proto__ = Object.create(this);
          // Restore the `call` and `apply` methods from `Function`
          prototype.call = call;
          prototype.apply = apply;
        }
        // Otherwise, redefine all properties (slow!)
        else {
          var asserterNames = Object.getOwnPropertyNames(ctx);
          asserterNames.forEach(function (asserterName) {
            if (!excludeNames.test(asserterName)) {
              var pd = Object.getOwnPropertyDescriptor(ctx, asserterName);
              Object.defineProperty(assert, asserterName, pd);
            }
          });
        }

        transferFlags(this, assert);
        return assert;
      }
    , configurable: true
  });
};

},{"../config":14,"./flag":22,"./transferFlags":38}],20:[function(require,module,exports){
/*!
 * Chai - addMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var config = require('../config');

/**
 * ### .addMethod (ctx, name, method)
 *
 * Adds a method to the prototype of an object.
 *
 *     utils.addMethod(chai.Assertion.prototype, 'foo', function (str) {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.equal(str);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(fooStr).to.be.foo('bar');
 *
 * @param {Object} ctx object to which the method is added
 * @param {String} name of method to add
 * @param {Function} method function to be used for name
 * @name addMethod
 * @api public
 */
var flag = require('./flag');

module.exports = function (ctx, name, method) {
  ctx[name] = function () {
    var old_ssfi = flag(this, 'ssfi');
    if (old_ssfi && config.includeStack === false)
      flag(this, 'ssfi', ctx[name]);
    var result = method.apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{"../config":14,"./flag":22}],21:[function(require,module,exports){
/*!
 * Chai - addProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### addProperty (ctx, name, getter)
 *
 * Adds a property to the prototype of an object.
 *
 *     utils.addProperty(chai.Assertion.prototype, 'foo', function () {
 *       var obj = utils.flag(this, 'object');
 *       new chai.Assertion(obj).to.be.instanceof(Foo);
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.addProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.foo;
 *
 * @param {Object} ctx object to which the property is added
 * @param {String} name of property to add
 * @param {Function} getter function to be used for name
 * @name addProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter.call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],22:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### flag(object, key, [value])
 *
 * Get or set a flag value on an object. If a
 * value is provided it will be set, else it will
 * return the currently set value or `undefined` if
 * the value is not set.
 *
 *     utils.flag(this, 'foo', 'bar'); // setter
 *     utils.flag(this, 'foo'); // getter, returns `bar`
 *
 * @param {Object} object constructed Assertion
 * @param {String} key
 * @param {Mixed} value (optional)
 * @name flag
 * @api private
 */

module.exports = function (obj, key, value) {
  var flags = obj.__flags || (obj.__flags = Object.create(null));
  if (arguments.length === 3) {
    flags[key] = value;
  } else {
    return flags[key];
  }
};

},{}],23:[function(require,module,exports){
/*!
 * Chai - getActual utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getActual(object, [actual])
 *
 * Returns the `actual` value for an Assertion
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  return args.length > 4 ? args[4] : obj._obj;
};

},{}],24:[function(require,module,exports){
/*!
 * Chai - getEnumerableProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getEnumerableProperties(object)
 *
 * This allows the retrieval of enumerable property names of an object,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getEnumerableProperties
 * @api public
 */

module.exports = function getEnumerableProperties(object) {
  var result = [];
  for (var name in object) {
    result.push(name);
  }
  return result;
};

},{}],25:[function(require,module,exports){
/*!
 * Chai - message composition utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag')
  , getActual = require('./getActual')
  , inspect = require('./inspect')
  , objDisplay = require('./objDisplay');

/**
 * ### .getMessage(object, message, negateMessage)
 *
 * Construct the error message based on flags
 * and template tags. Template tags will return
 * a stringified inspection of the object referenced.
 *
 * Message template tags:
 * - `#{this}` current asserted object
 * - `#{act}` actual value
 * - `#{exp}` expected value
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 * @name getMessage
 * @api public
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , val = flag(obj, 'object')
    , expected = args[3]
    , actual = getActual(obj, args)
    , msg = negate ? args[2] : args[1]
    , flagMsg = flag(obj, 'message');

  if(typeof msg === "function") msg = msg();
  msg = msg || '';
  msg = msg
    .replace(/#{this}/g, objDisplay(val))
    .replace(/#{act}/g, objDisplay(actual))
    .replace(/#{exp}/g, objDisplay(expected));

  return flagMsg ? flagMsg + ': ' + msg : msg;
};

},{"./flag":22,"./getActual":23,"./inspect":32,"./objDisplay":33}],26:[function(require,module,exports){
/*!
 * Chai - getName utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * # getName(func)
 *
 * Gets the name of a function, in a cross-browser way.
 *
 * @param {Function} a function (usually a constructor)
 */

module.exports = function (func) {
  if (func.name) return func.name;

  var match = /^\s?function ([^(]*)\(/.exec(func);
  return match && match[1] ? match[1] : "";
};

},{}],27:[function(require,module,exports){
/*!
 * Chai - getPathInfo utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var hasProperty = require('./hasProperty');

/**
 * ### .getPathInfo(path, object)
 *
 * This allows the retrieval of property info in an
 * object given a string path.
 *
 * The path info consists of an object with the
 * following properties:
 *
 * * parent - The parent object of the property referenced by `path`
 * * name - The name of the final property, a number if it was an array indexer
 * * value - The value of the property, if it exists, otherwise `undefined`
 * * exists - Whether the property exists or not
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} info
 * @name getPathInfo
 * @api public
 */

module.exports = function getPathInfo(path, obj) {
  var parsed = parsePath(path),
      last = parsed[parsed.length - 1];

  var info = {
    parent: parsed.length > 1 ? _getPathValue(parsed, obj, parsed.length - 1) : obj,
    name: last.p || last.i,
    value: _getPathValue(parsed, obj)
  };
  info.exists = hasProperty(info.name, info.parent);

  return info;
};


/*!
 * ## parsePath(path)
 *
 * Helper function used to parse string object
 * paths. Use in conjunction with `_getPathValue`.
 *
 *      var parsed = parsePath('myobject.property.subprop');
 *
 * ### Paths:
 *
 * * Can be as near infinitely deep and nested
 * * Arrays are also valid using the formal `myobject.document[3].property`.
 * * Literal dots and brackets (not delimiter) must be backslash-escaped.
 *
 * @param {String} path
 * @returns {Object} parsed
 * @api private
 */

function parsePath (path) {
  var str = path.replace(/([^\\])\[/g, '$1.[')
    , parts = str.match(/(\\\.|[^.]+?)+/g);
  return parts.map(function (value) {
    var re = /^\[(\d+)\]$/
      , mArr = re.exec(value);
    if (mArr) return { i: parseFloat(mArr[1]) };
    else return { p: value.replace(/\\([.\[\]])/g, '$1') };
  });
}


/*!
 * ## _getPathValue(parsed, obj)
 *
 * Helper companion function for `.parsePath` that returns
 * the value located at the parsed address.
 *
 *      var value = getPathValue(parsed, obj);
 *
 * @param {Object} parsed definition from `parsePath`.
 * @param {Object} object to search against
 * @param {Number} object to search against
 * @returns {Object|Undefined} value
 * @api private
 */

function _getPathValue (parsed, obj, index) {
  var tmp = obj
    , res;

  index = (index === undefined ? parsed.length : index);

  for (var i = 0, l = index; i < l; i++) {
    var part = parsed[i];
    if (tmp) {
      if ('undefined' !== typeof part.p)
        tmp = tmp[part.p];
      else if ('undefined' !== typeof part.i)
        tmp = tmp[part.i];
      if (i == (l - 1)) res = tmp;
    } else {
      res = undefined;
    }
  }
  return res;
}

},{"./hasProperty":30}],28:[function(require,module,exports){
/*!
 * Chai - getPathValue utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * @see https://github.com/logicalparadox/filtr
 * MIT Licensed
 */

var getPathInfo = require('./getPathInfo');

/**
 * ### .getPathValue(path, object)
 *
 * This allows the retrieval of values in an
 * object given a string path.
 *
 *     var obj = {
 *         prop1: {
 *             arr: ['a', 'b', 'c']
 *           , str: 'Hello'
 *         }
 *       , prop2: {
 *             arr: [ { nested: 'Universe' } ]
 *           , str: 'Hello again!'
 *         }
 *     }
 *
 * The following would be the results.
 *
 *     getPathValue('prop1.str', obj); // Hello
 *     getPathValue('prop1.att[2]', obj); // b
 *     getPathValue('prop2.arr[0].nested', obj); // Universe
 *
 * @param {String} path
 * @param {Object} object
 * @returns {Object} value or `undefined`
 * @name getPathValue
 * @api public
 */
module.exports = function(path, obj) {
  var info = getPathInfo(path, obj);
  return info.value;
}; 

},{"./getPathInfo":27}],29:[function(require,module,exports){
/*!
 * Chai - getProperties utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### .getProperties(object)
 *
 * This allows the retrieval of property names of an object, enumerable or not,
 * inherited or not.
 *
 * @param {Object} object
 * @returns {Array}
 * @name getProperties
 * @api public
 */

module.exports = function getProperties(object) {
  var result = Object.getOwnPropertyNames(object);

  function addProperty(property) {
    if (result.indexOf(property) === -1) {
      result.push(property);
    }
  }

  var proto = Object.getPrototypeOf(object);
  while (proto !== null) {
    Object.getOwnPropertyNames(proto).forEach(addProperty);
    proto = Object.getPrototypeOf(proto);
  }

  return result;
};

},{}],30:[function(require,module,exports){
/*!
 * Chai - hasProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

var type = require('type-detect');

/**
 * ### .hasProperty(object, name)
 *
 * This allows checking whether an object has
 * named property or numeric array index.
 *
 * Basically does the same thing as the `in`
 * operator but works properly with natives
 * and null/undefined values.
 *
 *     var obj = {
 *         arr: ['a', 'b', 'c']
 *       , str: 'Hello'
 *     }
 *
 * The following would be the results.
 *
 *     hasProperty('str', obj);  // true
 *     hasProperty('constructor', obj);  // true
 *     hasProperty('bar', obj);  // false
 *     
 *     hasProperty('length', obj.str); // true
 *     hasProperty(1, obj.str);  // true
 *     hasProperty(5, obj.str);  // false
 *
 *     hasProperty('length', obj.arr);  // true
 *     hasProperty(2, obj.arr);  // true
 *     hasProperty(3, obj.arr);  // false
 *
 * @param {Objuect} object
 * @param {String|Number} name
 * @returns {Boolean} whether it exists
 * @name getPathInfo
 * @api public
 */

var literals = {
    'number': Number
  , 'string': String
};

module.exports = function hasProperty(name, obj) {
  var ot = type(obj);

  // Bad Object, obviously no props at all
  if(ot === 'null' || ot === 'undefined')
    return false;

  // The `in` operator does not work with certain literals
  // box these before the check
  if(literals[ot] && typeof obj !== 'object')
    obj = new literals[ot](obj);

  return name in obj;
};

},{"type-detect":44}],31:[function(require,module,exports){
/*!
 * chai
 * Copyright(c) 2011 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Main exports
 */

var exports = module.exports = {};

/*!
 * test utility
 */

exports.test = require('./test');

/*!
 * type utility
 */

exports.type = require('type-detect');

/*!
 * message utility
 */

exports.getMessage = require('./getMessage');

/*!
 * actual utility
 */

exports.getActual = require('./getActual');

/*!
 * Inspect util
 */

exports.inspect = require('./inspect');

/*!
 * Object Display util
 */

exports.objDisplay = require('./objDisplay');

/*!
 * Flag utility
 */

exports.flag = require('./flag');

/*!
 * Flag transferring utility
 */

exports.transferFlags = require('./transferFlags');

/*!
 * Deep equal utility
 */

exports.eql = require('deep-eql');

/*!
 * Deep path value
 */

exports.getPathValue = require('./getPathValue');

/*!
 * Deep path info
 */

exports.getPathInfo = require('./getPathInfo');

/*!
 * Check if a property exists
 */

exports.hasProperty = require('./hasProperty');

/*!
 * Function name
 */

exports.getName = require('./getName');

/*!
 * add Property
 */

exports.addProperty = require('./addProperty');

/*!
 * add Method
 */

exports.addMethod = require('./addMethod');

/*!
 * overwrite Property
 */

exports.overwriteProperty = require('./overwriteProperty');

/*!
 * overwrite Method
 */

exports.overwriteMethod = require('./overwriteMethod');

/*!
 * Add a chainable method
 */

exports.addChainableMethod = require('./addChainableMethod');

/*!
 * Overwrite chainable method
 */

exports.overwriteChainableMethod = require('./overwriteChainableMethod');


},{"./addChainableMethod":19,"./addMethod":20,"./addProperty":21,"./flag":22,"./getActual":23,"./getMessage":25,"./getName":26,"./getPathInfo":27,"./getPathValue":28,"./hasProperty":30,"./inspect":32,"./objDisplay":33,"./overwriteChainableMethod":34,"./overwriteMethod":35,"./overwriteProperty":36,"./test":37,"./transferFlags":38,"deep-eql":40,"type-detect":44}],32:[function(require,module,exports){
// This is (almost) directly from Node.js utils
// https://github.com/joyent/node/blob/f8c335d0caf47f16d31413f89aa28eda3878e3aa/lib/util.js

var getName = require('./getName');
var getProperties = require('./getProperties');
var getEnumerableProperties = require('./getEnumerableProperties');

module.exports = inspect;

/**
 * Echos the value of a value. Trys to print the value out
 * in the best way possible given the different types.
 *
 * @param {Object} obj The object to print out.
 * @param {Boolean} showHidden Flag that shows hidden (not enumerable)
 *    properties of objects.
 * @param {Number} depth Depth in which to descend in object. Default is 2.
 * @param {Boolean} colors Flag to turn on ANSI escape codes to color the
 *    output. Default is false (no coloring).
 */
function inspect(obj, showHidden, depth, colors) {
  var ctx = {
    showHidden: showHidden,
    seen: [],
    stylize: function (str) { return str; }
  };
  return formatValue(ctx, obj, (typeof depth === 'undefined' ? 2 : depth));
}

// Returns true if object is a DOM element.
var isDOMElement = function (object) {
  if (typeof HTMLElement === 'object') {
    return object instanceof HTMLElement;
  } else {
    return object &&
      typeof object === 'object' &&
      object.nodeType === 1 &&
      typeof object.nodeName === 'string';
  }
};

function formatValue(ctx, value, recurseTimes) {
  // Provide a hook for user-specified inspect functions.
  // Check that value is an object with an inspect function on it
  if (value && typeof value.inspect === 'function' &&
      // Filter out the util module, it's inspect function is special
      value.inspect !== exports.inspect &&
      // Also filter out any prototype objects using the circular check.
      !(value.constructor && value.constructor.prototype === value)) {
    var ret = value.inspect(recurseTimes);
    if (typeof ret !== 'string') {
      ret = formatValue(ctx, ret, recurseTimes);
    }
    return ret;
  }

  // Primitive types cannot have properties
  var primitive = formatPrimitive(ctx, value);
  if (primitive) {
    return primitive;
  }

  // If this is a DOM element, try to get the outer HTML.
  if (isDOMElement(value)) {
    if ('outerHTML' in value) {
      return value.outerHTML;
      // This value does not have an outerHTML attribute,
      //   it could still be an XML element
    } else {
      // Attempt to serialize it
      try {
        if (document.xmlVersion) {
          var xmlSerializer = new XMLSerializer();
          return xmlSerializer.serializeToString(value);
        } else {
          // Firefox 11- do not support outerHTML
          //   It does, however, support innerHTML
          //   Use the following to render the element
          var ns = "http://www.w3.org/1999/xhtml";
          var container = document.createElementNS(ns, '_');

          container.appendChild(value.cloneNode(false));
          html = container.innerHTML
            .replace('><', '>' + value.innerHTML + '<');
          container.innerHTML = '';
          return html;
        }
      } catch (err) {
        // This could be a non-native DOM implementation,
        //   continue with the normal flow:
        //   printing the element as if it is an object.
      }
    }
  }

  // Look up the keys of the object.
  var visibleKeys = getEnumerableProperties(value);
  var keys = ctx.showHidden ? getProperties(value) : visibleKeys;

  // Some type of object without properties can be shortcutted.
  // In IE, errors have a single `stack` property, or if they are vanilla `Error`,
  // a `stack` plus `description` property; ignore those for consistency.
  if (keys.length === 0 || (isError(value) && (
      (keys.length === 1 && keys[0] === 'stack') ||
      (keys.length === 2 && keys[0] === 'description' && keys[1] === 'stack')
     ))) {
    if (typeof value === 'function') {
      var name = getName(value);
      var nameSuffix = name ? ': ' + name : '';
      return ctx.stylize('[Function' + nameSuffix + ']', 'special');
    }
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    }
    if (isDate(value)) {
      return ctx.stylize(Date.prototype.toUTCString.call(value), 'date');
    }
    if (isError(value)) {
      return formatError(value);
    }
  }

  var base = '', array = false, braces = ['{', '}'];

  // Make Array say that they are Array
  if (isArray(value)) {
    array = true;
    braces = ['[', ']'];
  }

  // Make functions say that they are functions
  if (typeof value === 'function') {
    var name = getName(value);
    var nameSuffix = name ? ': ' + name : '';
    base = ' [Function' + nameSuffix + ']';
  }

  // Make RegExps say that they are RegExps
  if (isRegExp(value)) {
    base = ' ' + RegExp.prototype.toString.call(value);
  }

  // Make dates with properties first say the date
  if (isDate(value)) {
    base = ' ' + Date.prototype.toUTCString.call(value);
  }

  // Make error with message first say the error
  if (isError(value)) {
    return formatError(value);
  }

  if (keys.length === 0 && (!array || value.length == 0)) {
    return braces[0] + base + braces[1];
  }

  if (recurseTimes < 0) {
    if (isRegExp(value)) {
      return ctx.stylize(RegExp.prototype.toString.call(value), 'regexp');
    } else {
      return ctx.stylize('[Object]', 'special');
    }
  }

  ctx.seen.push(value);

  var output;
  if (array) {
    output = formatArray(ctx, value, recurseTimes, visibleKeys, keys);
  } else {
    output = keys.map(function(key) {
      return formatProperty(ctx, value, recurseTimes, visibleKeys, key, array);
    });
  }

  ctx.seen.pop();

  return reduceToSingleString(output, base, braces);
}


function formatPrimitive(ctx, value) {
  switch (typeof value) {
    case 'undefined':
      return ctx.stylize('undefined', 'undefined');

    case 'string':
      var simple = '\'' + JSON.stringify(value).replace(/^"|"$/g, '')
                                               .replace(/'/g, "\\'")
                                               .replace(/\\"/g, '"') + '\'';
      return ctx.stylize(simple, 'string');

    case 'number':
      if (value === 0 && (1/value) === -Infinity) {
        return ctx.stylize('-0', 'number');
      }
      return ctx.stylize('' + value, 'number');

    case 'boolean':
      return ctx.stylize('' + value, 'boolean');
  }
  // For some reason typeof null is "object", so special case here.
  if (value === null) {
    return ctx.stylize('null', 'null');
  }
}


function formatError(value) {
  return '[' + Error.prototype.toString.call(value) + ']';
}


function formatArray(ctx, value, recurseTimes, visibleKeys, keys) {
  var output = [];
  for (var i = 0, l = value.length; i < l; ++i) {
    if (Object.prototype.hasOwnProperty.call(value, String(i))) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          String(i), true));
    } else {
      output.push('');
    }
  }
  keys.forEach(function(key) {
    if (!key.match(/^\d+$/)) {
      output.push(formatProperty(ctx, value, recurseTimes, visibleKeys,
          key, true));
    }
  });
  return output;
}


function formatProperty(ctx, value, recurseTimes, visibleKeys, key, array) {
  var name, str;
  if (value.__lookupGetter__) {
    if (value.__lookupGetter__(key)) {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Getter/Setter]', 'special');
      } else {
        str = ctx.stylize('[Getter]', 'special');
      }
    } else {
      if (value.__lookupSetter__(key)) {
        str = ctx.stylize('[Setter]', 'special');
      }
    }
  }
  if (visibleKeys.indexOf(key) < 0) {
    name = '[' + key + ']';
  }
  if (!str) {
    if (ctx.seen.indexOf(value[key]) < 0) {
      if (recurseTimes === null) {
        str = formatValue(ctx, value[key], null);
      } else {
        str = formatValue(ctx, value[key], recurseTimes - 1);
      }
      if (str.indexOf('\n') > -1) {
        if (array) {
          str = str.split('\n').map(function(line) {
            return '  ' + line;
          }).join('\n').substr(2);
        } else {
          str = '\n' + str.split('\n').map(function(line) {
            return '   ' + line;
          }).join('\n');
        }
      }
    } else {
      str = ctx.stylize('[Circular]', 'special');
    }
  }
  if (typeof name === 'undefined') {
    if (array && key.match(/^\d+$/)) {
      return str;
    }
    name = JSON.stringify('' + key);
    if (name.match(/^"([a-zA-Z_][a-zA-Z_0-9]*)"$/)) {
      name = name.substr(1, name.length - 2);
      name = ctx.stylize(name, 'name');
    } else {
      name = name.replace(/'/g, "\\'")
                 .replace(/\\"/g, '"')
                 .replace(/(^"|"$)/g, "'");
      name = ctx.stylize(name, 'string');
    }
  }

  return name + ': ' + str;
}


function reduceToSingleString(output, base, braces) {
  var numLinesEst = 0;
  var length = output.reduce(function(prev, cur) {
    numLinesEst++;
    if (cur.indexOf('\n') >= 0) numLinesEst++;
    return prev + cur.length + 1;
  }, 0);

  if (length > 60) {
    return braces[0] +
           (base === '' ? '' : base + '\n ') +
           ' ' +
           output.join(',\n  ') +
           ' ' +
           braces[1];
  }

  return braces[0] + base + ' ' + output.join(', ') + ' ' + braces[1];
}

function isArray(ar) {
  return Array.isArray(ar) ||
         (typeof ar === 'object' && objectToString(ar) === '[object Array]');
}

function isRegExp(re) {
  return typeof re === 'object' && objectToString(re) === '[object RegExp]';
}

function isDate(d) {
  return typeof d === 'object' && objectToString(d) === '[object Date]';
}

function isError(e) {
  return typeof e === 'object' && objectToString(e) === '[object Error]';
}

function objectToString(o) {
  return Object.prototype.toString.call(o);
}

},{"./getEnumerableProperties":24,"./getName":26,"./getProperties":29}],33:[function(require,module,exports){
/*!
 * Chai - flag utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var inspect = require('./inspect');
var config = require('../config');

/**
 * ### .objDisplay (object)
 *
 * Determines if an object or an array matches
 * criteria to be inspected in-line for error
 * messages or should be truncated.
 *
 * @param {Mixed} javascript object to inspect
 * @name objDisplay
 * @api public
 */

module.exports = function (obj) {
  var str = inspect(obj)
    , type = Object.prototype.toString.call(obj);

  if (config.truncateThreshold && str.length >= config.truncateThreshold) {
    if (type === '[object Function]') {
      return !obj.name || obj.name === ''
        ? '[Function]'
        : '[Function: ' + obj.name + ']';
    } else if (type === '[object Array]') {
      return '[ Array(' + obj.length + ') ]';
    } else if (type === '[object Object]') {
      var keys = Object.keys(obj)
        , kstr = keys.length > 2
          ? keys.splice(0, 2).join(', ') + ', ...'
          : keys.join(', ');
      return '{ Object (' + kstr + ') }';
    } else {
      return str;
    }
  } else {
    return str;
  }
};

},{"../config":14,"./inspect":32}],34:[function(require,module,exports){
/*!
 * Chai - overwriteChainableMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteChainableMethod (ctx, name, method, chainingBehavior)
 *
 * Overwites an already existing chainable method
 * and provides access to the previous function or
 * property.  Must return functions to be used for
 * name.
 *
 *     utils.overwriteChainableMethod(chai.Assertion.prototype, 'length',
 *       function (_super) {
 *       }
 *     , function (_super) {
 *       }
 *     );
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteChainableMethod('foo', fn, fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.have.length(3);
 *     expect(myFoo).to.have.length.above(3);
 *
 * @param {Object} ctx object whose method / property is to be overwritten
 * @param {String} name of method / property to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @param {Function} chainingBehavior function that returns a function to be used for property
 * @name overwriteChainableMethod
 * @api public
 */

module.exports = function (ctx, name, method, chainingBehavior) {
  var chainableBehavior = ctx.__methods[name];

  var _chainingBehavior = chainableBehavior.chainingBehavior;
  chainableBehavior.chainingBehavior = function () {
    var result = chainingBehavior(_chainingBehavior).call(this);
    return result === undefined ? this : result;
  };

  var _method = chainableBehavior.method;
  chainableBehavior.method = function () {
    var result = method(_method).apply(this, arguments);
    return result === undefined ? this : result;
  };
};

},{}],35:[function(require,module,exports){
/*!
 * Chai - overwriteMethod utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteMethod (ctx, name, fn)
 *
 * Overwites an already existing method and provides
 * access to previous function. Must return function
 * to be used for name.
 *
 *     utils.overwriteMethod(chai.Assertion.prototype, 'equal', function (_super) {
 *       return function (str) {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.value).to.equal(str);
 *         } else {
 *           _super.apply(this, arguments);
 *         }
 *       }
 *     });
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteMethod('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.equal('bar');
 *
 * @param {Object} ctx object whose method is to be overwritten
 * @param {String} name of method to overwrite
 * @param {Function} method function that returns a function to be used for name
 * @name overwriteMethod
 * @api public
 */

module.exports = function (ctx, name, method) {
  var _method = ctx[name]
    , _super = function () { return this; };

  if (_method && 'function' === typeof _method)
    _super = _method;

  ctx[name] = function () {
    var result = method(_super).apply(this, arguments);
    return result === undefined ? this : result;
  }
};

},{}],36:[function(require,module,exports){
/*!
 * Chai - overwriteProperty utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### overwriteProperty (ctx, name, fn)
 *
 * Overwites an already existing property getter and provides
 * access to previous value. Must return function to use as getter.
 *
 *     utils.overwriteProperty(chai.Assertion.prototype, 'ok', function (_super) {
 *       return function () {
 *         var obj = utils.flag(this, 'object');
 *         if (obj instanceof Foo) {
 *           new chai.Assertion(obj.name).to.equal('bar');
 *         } else {
 *           _super.call(this);
 *         }
 *       }
 *     });
 *
 *
 * Can also be accessed directly from `chai.Assertion`.
 *
 *     chai.Assertion.overwriteProperty('foo', fn);
 *
 * Then can be used as any other assertion.
 *
 *     expect(myFoo).to.be.ok;
 *
 * @param {Object} ctx object whose property is to be overwritten
 * @param {String} name of property to overwrite
 * @param {Function} getter function that returns a getter function to be used for name
 * @name overwriteProperty
 * @api public
 */

module.exports = function (ctx, name, getter) {
  var _get = Object.getOwnPropertyDescriptor(ctx, name)
    , _super = function () {};

  if (_get && 'function' === typeof _get.get)
    _super = _get.get

  Object.defineProperty(ctx, name,
    { get: function () {
        var result = getter(_super).call(this);
        return result === undefined ? this : result;
      }
    , configurable: true
  });
};

},{}],37:[function(require,module,exports){
/*!
 * Chai - test utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependancies
 */

var flag = require('./flag');

/**
 * # test(object, expression)
 *
 * Test and object for expression.
 *
 * @param {Object} object (constructed Assertion)
 * @param {Arguments} chai.Assertion.prototype.assert arguments
 */

module.exports = function (obj, args) {
  var negate = flag(obj, 'negate')
    , expr = args[0];
  return negate ? !expr : expr;
};

},{"./flag":22}],38:[function(require,module,exports){
/*!
 * Chai - transferFlags utility
 * Copyright(c) 2012-2014 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/**
 * ### transferFlags(assertion, object, includeAll = true)
 *
 * Transfer all the flags for `assertion` to `object`. If
 * `includeAll` is set to `false`, then the base Chai
 * assertion flags (namely `object`, `ssfi`, and `message`)
 * will not be transferred.
 *
 *
 *     var newAssertion = new Assertion();
 *     utils.transferFlags(assertion, newAssertion);
 *
 *     var anotherAsseriton = new Assertion(myObj);
 *     utils.transferFlags(assertion, anotherAssertion, false);
 *
 * @param {Assertion} assertion the assertion to transfer the flags from
 * @param {Object} object the object to transfer the flags to; usually a new assertion
 * @param {Boolean} includeAll
 * @name transferFlags
 * @api private
 */

module.exports = function (assertion, object, includeAll) {
  var flags = assertion.__flags || (assertion.__flags = Object.create(null));

  if (!object.__flags) {
    object.__flags = Object.create(null);
  }

  includeAll = arguments.length === 3 ? includeAll : true;

  for (var flag in flags) {
    if (includeAll ||
        (flag !== 'object' && flag !== 'ssfi' && flag != 'message')) {
      object.__flags[flag] = flags[flag];
    }
  }
};

},{}],39:[function(require,module,exports){
/*!
 * assertion-error
 * Copyright(c) 2013 Jake Luer <jake@qualiancy.com>
 * MIT Licensed
 */

/*!
 * Return a function that will copy properties from
 * one object to another excluding any originally
 * listed. Returned function will create a new `{}`.
 *
 * @param {String} excluded properties ...
 * @return {Function}
 */

function exclude () {
  var excludes = [].slice.call(arguments);

  function excludeProps (res, obj) {
    Object.keys(obj).forEach(function (key) {
      if (!~excludes.indexOf(key)) res[key] = obj[key];
    });
  }

  return function extendExclude () {
    var args = [].slice.call(arguments)
      , i = 0
      , res = {};

    for (; i < args.length; i++) {
      excludeProps(res, args[i]);
    }

    return res;
  };
};

/*!
 * Primary Exports
 */

module.exports = AssertionError;

/**
 * ### AssertionError
 *
 * An extension of the JavaScript `Error` constructor for
 * assertion and validation scenarios.
 *
 * @param {String} message
 * @param {Object} properties to include (optional)
 * @param {callee} start stack function (optional)
 */

function AssertionError (message, _props, ssf) {
  var extend = exclude('name', 'message', 'stack', 'constructor', 'toJSON')
    , props = extend(_props || {});

  // default values
  this.message = message || 'Unspecified AssertionError';
  this.showDiff = false;

  // copy from properties
  for (var key in props) {
    this[key] = props[key];
  }

  // capture stack trace
  ssf = ssf || arguments.callee;
  if (ssf && Error.captureStackTrace) {
    Error.captureStackTrace(this, ssf);
  } else {
    this.stack = new Error().stack;
  }
}

/*!
 * Inherit from Error.prototype
 */

AssertionError.prototype = Object.create(Error.prototype);

/*!
 * Statically set name
 */

AssertionError.prototype.name = 'AssertionError';

/*!
 * Ensure correct constructor
 */

AssertionError.prototype.constructor = AssertionError;

/**
 * Allow errors to be converted to JSON for static transfer.
 *
 * @param {Boolean} include stack (default: `true`)
 * @return {Object} object that can be `JSON.stringify`
 */

AssertionError.prototype.toJSON = function (stack) {
  var extend = exclude('constructor', 'toJSON', 'stack')
    , props = extend({ name: this.name }, this);

  // include stack if exists and not turned off
  if (false !== stack && this.stack) {
    props.stack = this.stack;
  }

  return props;
};

},{}],40:[function(require,module,exports){
module.exports = require('./lib/eql');

},{"./lib/eql":41}],41:[function(require,module,exports){
/*!
 * deep-eql
 * Copyright(c) 2013 Jake Luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Module dependencies
 */

var type = require('type-detect');

/*!
 * Buffer.isBuffer browser shim
 */

var Buffer;
try { Buffer = require('buffer').Buffer; }
catch(ex) {
  Buffer = {};
  Buffer.isBuffer = function() { return false; }
}

/*!
 * Primary Export
 */

module.exports = deepEqual;

/**
 * Assert super-strict (egal) equality between
 * two objects of any type.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @param {Array} memoised (optional)
 * @return {Boolean} equal match
 */

function deepEqual(a, b, m) {
  if (sameValue(a, b)) {
    return true;
  } else if ('date' === type(a)) {
    return dateEqual(a, b);
  } else if ('regexp' === type(a)) {
    return regexpEqual(a, b);
  } else if (Buffer.isBuffer(a)) {
    return bufferEqual(a, b);
  } else if ('arguments' === type(a)) {
    return argumentsEqual(a, b, m);
  } else if (!typeEqual(a, b)) {
    return false;
  } else if (('object' !== type(a) && 'object' !== type(b))
  && ('array' !== type(a) && 'array' !== type(b))) {
    return sameValue(a, b);
  } else {
    return objectEqual(a, b, m);
  }
}

/*!
 * Strict (egal) equality test. Ensures that NaN always
 * equals NaN and `-0` does not equal `+0`.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} equal match
 */

function sameValue(a, b) {
  if (a === b) return a !== 0 || 1 / a === 1 / b;
  return a !== a && b !== b;
}

/*!
 * Compare the types of two given objects and
 * return if they are equal. Note that an Array
 * has a type of `array` (not `object`) and arguments
 * have a type of `arguments` (not `array`/`object`).
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function typeEqual(a, b) {
  return type(a) === type(b);
}

/*!
 * Compare two Date objects by asserting that
 * the time values are equal using `saveValue`.
 *
 * @param {Date} a
 * @param {Date} b
 * @return {Boolean} result
 */

function dateEqual(a, b) {
  if ('date' !== type(b)) return false;
  return sameValue(a.getTime(), b.getTime());
}

/*!
 * Compare two regular expressions by converting them
 * to string and checking for `sameValue`.
 *
 * @param {RegExp} a
 * @param {RegExp} b
 * @return {Boolean} result
 */

function regexpEqual(a, b) {
  if ('regexp' !== type(b)) return false;
  return sameValue(a.toString(), b.toString());
}

/*!
 * Assert deep equality of two `arguments` objects.
 * Unfortunately, these must be sliced to arrays
 * prior to test to ensure no bad behavior.
 *
 * @param {Arguments} a
 * @param {Arguments} b
 * @param {Array} memoize (optional)
 * @return {Boolean} result
 */

function argumentsEqual(a, b, m) {
  if ('arguments' !== type(b)) return false;
  a = [].slice.call(a);
  b = [].slice.call(b);
  return deepEqual(a, b, m);
}

/*!
 * Get enumerable properties of a given object.
 *
 * @param {Object} a
 * @return {Array} property names
 */

function enumerable(a) {
  var res = [];
  for (var key in a) res.push(key);
  return res;
}

/*!
 * Simple equality for flat iterable objects
 * such as Arrays or Node.js buffers.
 *
 * @param {Iterable} a
 * @param {Iterable} b
 * @return {Boolean} result
 */

function iterableEqual(a, b) {
  if (a.length !==  b.length) return false;

  var i = 0;
  var match = true;

  for (; i < a.length; i++) {
    if (a[i] !== b[i]) {
      match = false;
      break;
    }
  }

  return match;
}

/*!
 * Extension to `iterableEqual` specifically
 * for Node.js Buffers.
 *
 * @param {Buffer} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function bufferEqual(a, b) {
  if (!Buffer.isBuffer(b)) return false;
  return iterableEqual(a, b);
}

/*!
 * Block for `objectEqual` ensuring non-existing
 * values don't get in.
 *
 * @param {Mixed} object
 * @return {Boolean} result
 */

function isValue(a) {
  return a !== null && a !== undefined;
}

/*!
 * Recursively check the equality of two objects.
 * Once basic sameness has been established it will
 * defer to `deepEqual` for each enumerable key
 * in the object.
 *
 * @param {Mixed} a
 * @param {Mixed} b
 * @return {Boolean} result
 */

function objectEqual(a, b, m) {
  if (!isValue(a) || !isValue(b)) {
    return false;
  }

  if (a.prototype !== b.prototype) {
    return false;
  }

  var i;
  if (m) {
    for (i = 0; i < m.length; i++) {
      if ((m[i][0] === a && m[i][1] === b)
      ||  (m[i][0] === b && m[i][1] === a)) {
        return true;
      }
    }
  } else {
    m = [];
  }

  try {
    var ka = enumerable(a);
    var kb = enumerable(b);
  } catch (ex) {
    return false;
  }

  ka.sort();
  kb.sort();

  if (!iterableEqual(ka, kb)) {
    return false;
  }

  m.push([ a, b ]);

  var key;
  for (i = ka.length - 1; i >= 0; i--) {
    key = ka[i];
    if (!deepEqual(a[key], b[key], m)) {
      return false;
    }
  }

  return true;
}

},{"buffer":2,"type-detect":42}],42:[function(require,module,exports){
module.exports = require('./lib/type');

},{"./lib/type":43}],43:[function(require,module,exports){
/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/*!
 * Detectable javascript natives
 */

var natives = {
    '[object Array]': 'array'
  , '[object RegExp]': 'regexp'
  , '[object Function]': 'function'
  , '[object Arguments]': 'arguments'
  , '[object Date]': 'date'
};

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */

function getType (obj) {
  var str = Object.prototype.toString.call(obj);
  if (natives[str]) return natives[str];
  if (obj === null) return 'null';
  if (obj === undefined) return 'undefined';
  if (obj === Object(obj)) return 'object';
  return typeof obj;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library () {
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function (type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function (obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};

},{}],44:[function(require,module,exports){
arguments[4][42][0].apply(exports,arguments)
},{"./lib/type":45,"dup":42}],45:[function(require,module,exports){
/*!
 * type-detect
 * Copyright(c) 2013 jake luer <jake@alogicalparadox.com>
 * MIT Licensed
 */

/*!
 * Primary Exports
 */

var exports = module.exports = getType;

/**
 * ### typeOf (obj)
 *
 * Use several different techniques to determine
 * the type of object being tested.
 *
 *
 * @param {Mixed} object
 * @return {String} object type
 * @api public
 */
var objectTypeRegexp = /^\[object (.*)\]$/;

function getType(obj) {
  var type = Object.prototype.toString.call(obj).match(objectTypeRegexp)[1].toLowerCase();
  // Let "new String('')" return 'object'
  if (typeof Promise === 'function' && obj instanceof Promise) return 'promise';
  // PhantomJS has type "DOMWindow" for null
  if (obj === null) return 'null';
  // PhantomJS has type "DOMWindow" for undefined
  if (obj === undefined) return 'undefined';
  return type;
}

exports.Library = Library;

/**
 * ### Library
 *
 * Create a repository for custom type detection.
 *
 * ```js
 * var lib = new type.Library;
 * ```
 *
 */

function Library() {
  if (!(this instanceof Library)) return new Library();
  this.tests = {};
}

/**
 * #### .of (obj)
 *
 * Expose replacement `typeof` detection to the library.
 *
 * ```js
 * if ('string' === lib.of('hello world')) {
 *   // ...
 * }
 * ```
 *
 * @param {Mixed} object to test
 * @return {String} type
 */

Library.prototype.of = getType;

/**
 * #### .define (type, test)
 *
 * Add a test to for the `.test()` assertion.
 *
 * Can be defined as a regular expression:
 *
 * ```js
 * lib.define('int', /^[0-9]+$/);
 * ```
 *
 * ... or as a function:
 *
 * ```js
 * lib.define('bln', function (obj) {
 *   if ('boolean' === lib.of(obj)) return true;
 *   var blns = [ 'yes', 'no', 'true', 'false', 1, 0 ];
 *   if ('string' === lib.of(obj)) obj = obj.toLowerCase();
 *   return !! ~blns.indexOf(obj);
 * });
 * ```
 *
 * @param {String} type
 * @param {RegExp|Function} test
 * @api public
 */

Library.prototype.define = function(type, test) {
  if (arguments.length === 1) return this.tests[type];
  this.tests[type] = test;
  return this;
};

/**
 * #### .test (obj, test)
 *
 * Assert that an object is of type. Will first
 * check natives, and if that does not pass it will
 * use the user defined custom tests.
 *
 * ```js
 * assert(lib.test('1', 'int'));
 * assert(lib.test('yes', 'bln'));
 * ```
 *
 * @param {Mixed} object
 * @param {String} type
 * @return {Boolean} result
 * @api public
 */

Library.prototype.test = function(obj, type) {
  if (type === getType(obj)) return true;
  var test = this.tests[type];

  if (test && 'regexp' === getType(test)) {
    return test.test(obj);
  } else if (test && 'function' === getType(test)) {
    return test(obj);
  } else {
    throw new ReferenceError('Type test "' + type + '" not defined or invalid.');
  }
};

},{}],46:[function(require,module,exports){
"use strict";
(function(fixtures){
    if (typeof require === 'function' && typeof exports === 'object' && typeof module === 'object') {
        // NodeJS
        module.exports = fixtures;
    } else if (typeof define === 'function' && define.amd){
        define(function(){
            return fixtures;
        });
    } else{
        var global = (false || eval)('this');
        global.fixtures = fixtures;
    }

}(new function(){
        var fixturesCache = {};
        var self = this;

        self.containerId = 'js-fixtures';
        self.path = 'spec/javascripts/fixtures';
        self.window = function(){
            var iframe = document.getElementById(self.containerId);
            if (!iframe) return null;

            return iframe.contentWindow || iframe.contentDocument; 
        };
        self.body = function(){
            if (!self.window()) return null;

            var content = self.window().document.body.innerHTML;
            return content; 
        };
        self.load = function(html){
            var cb = typeof arguments[arguments.length - 1] === 'function' ? arguments[arguments.length -1] : null;
            addToContainer(self.read.apply(self, arguments), cb);
        };
        self.set = function(html){
            addToContainer(html);
        };
        self.cache = function(){
            self.read.apply(self, arguments);
        };
        self.sandbox = function(obj){
            addToContainer(objToHTML(obj));
        };
        self.read = function(){
            var htmlChunks = '';

            Array.prototype.slice.call(arguments, 0).forEach(function(argument){
                if (typeof argument === 'string') htmlChunks += getFixtureHtml(argument);
            });
            return htmlChunks;
        };
        self.clearCache = function(){
            fixturesCache = {};
        };
        self.cleanUp = function(){
            var iframe = document.getElementById(self.containerId);
            if(!iframe) return null;

            iframe.parentNode.removeChild(iframe);
        };
        var createContainer  = function(html){
            var cb = typeof arguments[arguments.length - 1] === 'function' ? arguments[arguments.length -1] : null;
            var iframe = document.createElement('iframe');
            iframe.setAttribute('id', self.containerId);
            iframe.style.opacity = 0;
            iframe.style.filter = 'alpha(0)';

            document.body.appendChild(iframe);
            var doc = iframe.contentWindow || iframe.contentDocument;
            doc = doc.document ? doc.document : doc;

            if (cb){
                var iframeReady = setInterval(function(){
                    if (doc.readyState === 'complete'){
                        clearInterval(iframeReady);
                        cb();
                    }
                }, 0);
            }

            doc.open();
            doc.defaultView.onerror = captureErrors;
            doc.write(html);
            doc.close();
        };
        var addToContainer = function(html, cb){
            var container = document.getElementById(self.containerId);
            if (!container) createContainer.apply(self, arguments);
            else self.window().document.body.innerHTML += html;
        };
        var captureErrors = function(){
            if (window.onerror){
                // Rewrite the message prefix to indicate that the error
                // occurred in the fixture.
                arguments[0] = arguments[0].replace(/^[^:]*/, "Uncaught fixture error");
                window.onerror.apply(window, arguments);
            }
            return true;
        };
        var getFixtureHtml = function(url){
            if (typeof fixturesCache[url] === 'undefined'){
                loadFixtureIntoCache(url);
            }
            return fixturesCache[url];
        };
        var loadFixtureIntoCache = function(relativeUrl){
            var url = makeFixtureUrl(relativeUrl);
            var request = new XMLHttpRequest();
            request.open('GET', url + '?' + new Date().getTime(), false);
            request.send(null);
            fixturesCache[relativeUrl] = request.responseText;
        };
        var makeFixtureUrl = function(relativeUrl){
            return self.path.match('/$') ? self.path + relativeUrl : self.path + '/' + relativeUrl;
        };
        var objToHTML = function(obj){
            var divElem = document.createElement('div'); 
            for (var key in obj){
                if (key === 'class'){ // IE < 9 compatibility
                    divElem.className = obj[key];
                    continue;
                }
                divElem.setAttribute(key, obj[key]);
            }
            return divElem.outerHTML;
        };
    }
));

},{}],47:[function(require,module,exports){
(function (process){
// vim:ts=4:sts=4:sw=4:
/*!
 *
 * Copyright 2009-2012 Kris Kowal under the terms of the MIT
 * license found at http://github.com/kriskowal/q/raw/master/LICENSE
 *
 * With parts by Tyler Close
 * Copyright 2007-2009 Tyler Close under the terms of the MIT X license found
 * at http://www.opensource.org/licenses/mit-license.html
 * Forked at ref_send.js version: 2009-05-11
 *
 * With parts by Mark Miller
 * Copyright (C) 2011 Google Inc.
 *
 * Licensed under the Apache License, Version 2.0 (the "License");
 * you may not use this file except in compliance with the License.
 * You may obtain a copy of the License at
 *
 * http://www.apache.org/licenses/LICENSE-2.0
 *
 * Unless required by applicable law or agreed to in writing, software
 * distributed under the License is distributed on an "AS IS" BASIS,
 * WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 * See the License for the specific language governing permissions and
 * limitations under the License.
 *
 */

(function (definition) {
    "use strict";

    // This file will function properly as a <script> tag, or a module
    // using CommonJS and NodeJS or RequireJS module formats.  In
    // Common/Node/RequireJS, the module exports the Q API and when
    // executed as a simple <script>, it creates a Q global instead.

    // Montage Require
    if (typeof bootstrap === "function") {
        bootstrap("promise", definition);

    // CommonJS
    } else if (typeof exports === "object" && typeof module === "object") {
        module.exports = definition();

    // RequireJS
    } else if (typeof define === "function" && define.amd) {
        define(definition);

    // SES (Secure EcmaScript)
    } else if (typeof ses !== "undefined") {
        if (!ses.ok()) {
            return;
        } else {
            ses.makeQ = definition;
        }

    // <script>
    } else if (typeof window !== "undefined" || typeof self !== "undefined") {
        // Prefer window over self for add-on scripts. Use self for
        // non-windowed contexts.
        var global = typeof window !== "undefined" ? window : self;

        // Get the `window` object, save the previous Q global
        // and initialize Q as a global.
        var previousQ = global.Q;
        global.Q = definition();

        // Add a noConflict function so Q can be removed from the
        // global namespace.
        global.Q.noConflict = function () {
            global.Q = previousQ;
            return this;
        };

    } else {
        throw new Error("This environment was not anticipated by Q. Please file a bug.");
    }

})(function () {
"use strict";

var hasStacks = false;
try {
    throw new Error();
} catch (e) {
    hasStacks = !!e.stack;
}

// All code after this point will be filtered from stack traces reported
// by Q.
var qStartingLine = captureLine();
var qFileName;

// shims

// used for fallback in "allResolved"
var noop = function () {};

// Use the fastest possible means to execute a task in a future turn
// of the event loop.
var nextTick =(function () {
    // linked list of tasks (single, with head node)
    var head = {task: void 0, next: null};
    var tail = head;
    var flushing = false;
    var requestTick = void 0;
    var isNodeJS = false;
    // queue for late tasks, used by unhandled rejection tracking
    var laterQueue = [];

    function flush() {
        /* jshint loopfunc: true */
        var task, domain;

        while (head.next) {
            head = head.next;
            task = head.task;
            head.task = void 0;
            domain = head.domain;

            if (domain) {
                head.domain = void 0;
                domain.enter();
            }
            runSingle(task, domain);

        }
        while (laterQueue.length) {
            task = laterQueue.pop();
            runSingle(task);
        }
        flushing = false;
    }
    // runs a single function in the async queue
    function runSingle(task, domain) {
        try {
            task();

        } catch (e) {
            if (isNodeJS) {
                // In node, uncaught exceptions are considered fatal errors.
                // Re-throw them synchronously to interrupt flushing!

                // Ensure continuation if the uncaught exception is suppressed
                // listening "uncaughtException" events (as domains does).
                // Continue in next event to avoid tick recursion.
                if (domain) {
                    domain.exit();
                }
                setTimeout(flush, 0);
                if (domain) {
                    domain.enter();
                }

                throw e;

            } else {
                // In browsers, uncaught exceptions are not fatal.
                // Re-throw them asynchronously to avoid slow-downs.
                setTimeout(function () {
                    throw e;
                }, 0);
            }
        }

        if (domain) {
            domain.exit();
        }
    }

    nextTick = function (task) {
        tail = tail.next = {
            task: task,
            domain: isNodeJS && process.domain,
            next: null
        };

        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };

    if (typeof process === "object" &&
        process.toString() === "[object process]" && process.nextTick) {
        // Ensure Q is in a real Node environment, with a `process.nextTick`.
        // To see through fake Node environments:
        // * Mocha test runner - exposes a `process` global without a `nextTick`
        // * Browserify - exposes a `process.nexTick` function that uses
        //   `setTimeout`. In this case `setImmediate` is preferred because
        //    it is faster. Browserify's `process.toString()` yields
        //   "[object Object]", while in a real Node environment
        //   `process.nextTick()` yields "[object process]".
        isNodeJS = true;

        requestTick = function () {
            process.nextTick(flush);
        };

    } else if (typeof setImmediate === "function") {
        // In IE10, Node.js 0.9+, or https://github.com/NobleJS/setImmediate
        if (typeof window !== "undefined") {
            requestTick = setImmediate.bind(window, flush);
        } else {
            requestTick = function () {
                setImmediate(flush);
            };
        }

    } else if (typeof MessageChannel !== "undefined") {
        // modern browsers
        // http://www.nonblocking.io/2011/06/windownexttick.html
        var channel = new MessageChannel();
        // At least Safari Version 6.0.5 (8536.30.1) intermittently cannot create
        // working message ports the first time a page loads.
        channel.port1.onmessage = function () {
            requestTick = requestPortTick;
            channel.port1.onmessage = flush;
            flush();
        };
        var requestPortTick = function () {
            // Opera requires us to provide a message payload, regardless of
            // whether we use it.
            channel.port2.postMessage(0);
        };
        requestTick = function () {
            setTimeout(flush, 0);
            requestPortTick();
        };

    } else {
        // old browsers
        requestTick = function () {
            setTimeout(flush, 0);
        };
    }
    // runs a task after all other tasks have been run
    // this is useful for unhandled rejection tracking that needs to happen
    // after all `then`d tasks have been run.
    nextTick.runAfter = function (task) {
        laterQueue.push(task);
        if (!flushing) {
            flushing = true;
            requestTick();
        }
    };
    return nextTick;
})();

// Attempt to make generics safe in the face of downstream
// modifications.
// There is no situation where this is necessary.
// If you need a security guarantee, these primordials need to be
// deeply frozen anyway, and if you don’t need a security guarantee,
// this is just plain paranoid.
// However, this **might** have the nice side-effect of reducing the size of
// the minified code by reducing x.call() to merely x()
// See Mark Miller’s explanation of what this does.
// http://wiki.ecmascript.org/doku.php?id=conventions:safe_meta_programming
var call = Function.call;
function uncurryThis(f) {
    return function () {
        return call.apply(f, arguments);
    };
}
// This is equivalent, but slower:
// uncurryThis = Function_bind.bind(Function_bind.call);
// http://jsperf.com/uncurrythis

var array_slice = uncurryThis(Array.prototype.slice);

var array_reduce = uncurryThis(
    Array.prototype.reduce || function (callback, basis) {
        var index = 0,
            length = this.length;
        // concerning the initial value, if one is not provided
        if (arguments.length === 1) {
            // seek to the first value in the array, accounting
            // for the possibility that is is a sparse array
            do {
                if (index in this) {
                    basis = this[index++];
                    break;
                }
                if (++index >= length) {
                    throw new TypeError();
                }
            } while (1);
        }
        // reduce
        for (; index < length; index++) {
            // account for the possibility that the array is sparse
            if (index in this) {
                basis = callback(basis, this[index], index);
            }
        }
        return basis;
    }
);

var array_indexOf = uncurryThis(
    Array.prototype.indexOf || function (value) {
        // not a very good shim, but good enough for our one use of it
        for (var i = 0; i < this.length; i++) {
            if (this[i] === value) {
                return i;
            }
        }
        return -1;
    }
);

var array_map = uncurryThis(
    Array.prototype.map || function (callback, thisp) {
        var self = this;
        var collect = [];
        array_reduce(self, function (undefined, value, index) {
            collect.push(callback.call(thisp, value, index, self));
        }, void 0);
        return collect;
    }
);

var object_create = Object.create || function (prototype) {
    function Type() { }
    Type.prototype = prototype;
    return new Type();
};

var object_hasOwnProperty = uncurryThis(Object.prototype.hasOwnProperty);

var object_keys = Object.keys || function (object) {
    var keys = [];
    for (var key in object) {
        if (object_hasOwnProperty(object, key)) {
            keys.push(key);
        }
    }
    return keys;
};

var object_toString = uncurryThis(Object.prototype.toString);

function isObject(value) {
    return value === Object(value);
}

// generator related shims

// FIXME: Remove this function once ES6 generators are in SpiderMonkey.
function isStopIteration(exception) {
    return (
        object_toString(exception) === "[object StopIteration]" ||
        exception instanceof QReturnValue
    );
}

// FIXME: Remove this helper and Q.return once ES6 generators are in
// SpiderMonkey.
var QReturnValue;
if (typeof ReturnValue !== "undefined") {
    QReturnValue = ReturnValue;
} else {
    QReturnValue = function (value) {
        this.value = value;
    };
}

// long stack traces

var STACK_JUMP_SEPARATOR = "From previous event:";

function makeStackTraceLong(error, promise) {
    // If possible, transform the error stack trace by removing Node and Q
    // cruft, then concatenating with the stack trace of `promise`. See #57.
    if (hasStacks &&
        promise.stack &&
        typeof error === "object" &&
        error !== null &&
        error.stack &&
        error.stack.indexOf(STACK_JUMP_SEPARATOR) === -1
    ) {
        var stacks = [];
        for (var p = promise; !!p; p = p.source) {
            if (p.stack) {
                stacks.unshift(p.stack);
            }
        }
        stacks.unshift(error.stack);

        var concatedStacks = stacks.join("\n" + STACK_JUMP_SEPARATOR + "\n");
        error.stack = filterStackString(concatedStacks);
    }
}

function filterStackString(stackString) {
    var lines = stackString.split("\n");
    var desiredLines = [];
    for (var i = 0; i < lines.length; ++i) {
        var line = lines[i];

        if (!isInternalFrame(line) && !isNodeFrame(line) && line) {
            desiredLines.push(line);
        }
    }
    return desiredLines.join("\n");
}

function isNodeFrame(stackLine) {
    return stackLine.indexOf("(module.js:") !== -1 ||
           stackLine.indexOf("(node.js:") !== -1;
}

function getFileNameAndLineNumber(stackLine) {
    // Named functions: "at functionName (filename:lineNumber:columnNumber)"
    // In IE10 function name can have spaces ("Anonymous function") O_o
    var attempt1 = /at .+ \((.+):(\d+):(?:\d+)\)$/.exec(stackLine);
    if (attempt1) {
        return [attempt1[1], Number(attempt1[2])];
    }

    // Anonymous functions: "at filename:lineNumber:columnNumber"
    var attempt2 = /at ([^ ]+):(\d+):(?:\d+)$/.exec(stackLine);
    if (attempt2) {
        return [attempt2[1], Number(attempt2[2])];
    }

    // Firefox style: "function@filename:lineNumber or @filename:lineNumber"
    var attempt3 = /.*@(.+):(\d+)$/.exec(stackLine);
    if (attempt3) {
        return [attempt3[1], Number(attempt3[2])];
    }
}

function isInternalFrame(stackLine) {
    var fileNameAndLineNumber = getFileNameAndLineNumber(stackLine);

    if (!fileNameAndLineNumber) {
        return false;
    }

    var fileName = fileNameAndLineNumber[0];
    var lineNumber = fileNameAndLineNumber[1];

    return fileName === qFileName &&
        lineNumber >= qStartingLine &&
        lineNumber <= qEndingLine;
}

// discover own file name and line number range for filtering stack
// traces
function captureLine() {
    if (!hasStacks) {
        return;
    }

    try {
        throw new Error();
    } catch (e) {
        var lines = e.stack.split("\n");
        var firstLine = lines[0].indexOf("@") > 0 ? lines[1] : lines[2];
        var fileNameAndLineNumber = getFileNameAndLineNumber(firstLine);
        if (!fileNameAndLineNumber) {
            return;
        }

        qFileName = fileNameAndLineNumber[0];
        return fileNameAndLineNumber[1];
    }
}

function deprecate(callback, name, alternative) {
    return function () {
        if (typeof console !== "undefined" &&
            typeof console.warn === "function") {
            console.warn(name + " is deprecated, use " + alternative +
                         " instead.", new Error("").stack);
        }
        return callback.apply(callback, arguments);
    };
}

// end of shims
// beginning of real work

/**
 * Constructs a promise for an immediate reference, passes promises through, or
 * coerces promises from different systems.
 * @param value immediate reference or promise
 */
function Q(value) {
    // If the object is already a Promise, return it directly.  This enables
    // the resolve function to both be used to created references from objects,
    // but to tolerably coerce non-promises to promises.
    if (value instanceof Promise) {
        return value;
    }

    // assimilate thenables
    if (isPromiseAlike(value)) {
        return coerce(value);
    } else {
        return fulfill(value);
    }
}
Q.resolve = Q;

/**
 * Performs a task in a future turn of the event loop.
 * @param {Function} task
 */
Q.nextTick = nextTick;

/**
 * Controls whether or not long stack traces will be on
 */
Q.longStackSupport = false;

// enable long stacks if Q_DEBUG is set
if (typeof process === "object" && process && process.env && process.env.Q_DEBUG) {
    Q.longStackSupport = true;
}

/**
 * Constructs a {promise, resolve, reject} object.
 *
 * `resolve` is a callback to invoke with a more resolved value for the
 * promise. To fulfill the promise, invoke `resolve` with any value that is
 * not a thenable. To reject the promise, invoke `resolve` with a rejected
 * thenable, or invoke `reject` with the reason directly. To resolve the
 * promise to another thenable, thus putting it in the same state, invoke
 * `resolve` with that other thenable.
 */
Q.defer = defer;
function defer() {
    // if "messages" is an "Array", that indicates that the promise has not yet
    // been resolved.  If it is "undefined", it has been resolved.  Each
    // element of the messages array is itself an array of complete arguments to
    // forward to the resolved promise.  We coerce the resolution value to a
    // promise using the `resolve` function because it handles both fully
    // non-thenable values and other thenables gracefully.
    var messages = [], progressListeners = [], resolvedPromise;

    var deferred = object_create(defer.prototype);
    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, operands) {
        var args = array_slice(arguments);
        if (messages) {
            messages.push(args);
            if (op === "when" && operands[1]) { // progress operand
                progressListeners.push(operands[1]);
            }
        } else {
            Q.nextTick(function () {
                resolvedPromise.promiseDispatch.apply(resolvedPromise, args);
            });
        }
    };

    // XXX deprecated
    promise.valueOf = function () {
        if (messages) {
            return promise;
        }
        var nearerValue = nearer(resolvedPromise);
        if (isPromise(nearerValue)) {
            resolvedPromise = nearerValue; // shorten chain
        }
        return nearerValue;
    };

    promise.inspect = function () {
        if (!resolvedPromise) {
            return { state: "pending" };
        }
        return resolvedPromise.inspect();
    };

    if (Q.longStackSupport && hasStacks) {
        try {
            throw new Error();
        } catch (e) {
            // NOTE: don't try to use `Error.captureStackTrace` or transfer the
            // accessor around; that causes memory leaks as per GH-111. Just
            // reify the stack trace as a string ASAP.
            //
            // At the same time, cut off the first line; it's always just
            // "[object Promise]\n", as per the `toString`.
            promise.stack = e.stack.substring(e.stack.indexOf("\n") + 1);
        }
    }

    // NOTE: we do the checks for `resolvedPromise` in each method, instead of
    // consolidating them into `become`, since otherwise we'd create new
    // promises with the lines `become(whatever(value))`. See e.g. GH-252.

    function become(newPromise) {
        resolvedPromise = newPromise;
        promise.source = newPromise;

        array_reduce(messages, function (undefined, message) {
            Q.nextTick(function () {
                newPromise.promiseDispatch.apply(newPromise, message);
            });
        }, void 0);

        messages = void 0;
        progressListeners = void 0;
    }

    deferred.promise = promise;
    deferred.resolve = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(Q(value));
    };

    deferred.fulfill = function (value) {
        if (resolvedPromise) {
            return;
        }

        become(fulfill(value));
    };
    deferred.reject = function (reason) {
        if (resolvedPromise) {
            return;
        }

        become(reject(reason));
    };
    deferred.notify = function (progress) {
        if (resolvedPromise) {
            return;
        }

        array_reduce(progressListeners, function (undefined, progressListener) {
            Q.nextTick(function () {
                progressListener(progress);
            });
        }, void 0);
    };

    return deferred;
}

/**
 * Creates a Node-style callback that will resolve or reject the deferred
 * promise.
 * @returns a nodeback
 */
defer.prototype.makeNodeResolver = function () {
    var self = this;
    return function (error, value) {
        if (error) {
            self.reject(error);
        } else if (arguments.length > 2) {
            self.resolve(array_slice(arguments, 1));
        } else {
            self.resolve(value);
        }
    };
};

/**
 * @param resolver {Function} a function that returns nothing and accepts
 * the resolve, reject, and notify functions for a deferred.
 * @returns a promise that may be resolved with the given resolve and reject
 * functions, or rejected by a thrown exception in resolver
 */
Q.Promise = promise; // ES6
Q.promise = promise;
function promise(resolver) {
    if (typeof resolver !== "function") {
        throw new TypeError("resolver must be a function.");
    }
    var deferred = defer();
    try {
        resolver(deferred.resolve, deferred.reject, deferred.notify);
    } catch (reason) {
        deferred.reject(reason);
    }
    return deferred.promise;
}

promise.race = race; // ES6
promise.all = all; // ES6
promise.reject = reject; // ES6
promise.resolve = Q; // ES6

// XXX experimental.  This method is a way to denote that a local value is
// serializable and should be immediately dispatched to a remote upon request,
// instead of passing a reference.
Q.passByCopy = function (object) {
    //freeze(object);
    //passByCopies.set(object, true);
    return object;
};

Promise.prototype.passByCopy = function () {
    //freeze(object);
    //passByCopies.set(object, true);
    return this;
};

/**
 * If two promises eventually fulfill to the same value, promises that value,
 * but otherwise rejects.
 * @param x {Any*}
 * @param y {Any*}
 * @returns {Any*} a promise for x and y if they are the same, but a rejection
 * otherwise.
 *
 */
Q.join = function (x, y) {
    return Q(x).join(y);
};

Promise.prototype.join = function (that) {
    return Q([this, that]).spread(function (x, y) {
        if (x === y) {
            // TODO: "===" should be Object.is or equiv
            return x;
        } else {
            throw new Error("Can't join: not the same: " + x + " " + y);
        }
    });
};

/**
 * Returns a promise for the first of an array of promises to become settled.
 * @param answers {Array[Any*]} promises to race
 * @returns {Any*} the first promise to be settled
 */
Q.race = race;
function race(answerPs) {
    return promise(function (resolve, reject) {
        // Switch to this once we can assume at least ES5
        // answerPs.forEach(function (answerP) {
        //     Q(answerP).then(resolve, reject);
        // });
        // Use this in the meantime
        for (var i = 0, len = answerPs.length; i < len; i++) {
            Q(answerPs[i]).then(resolve, reject);
        }
    });
}

Promise.prototype.race = function () {
    return this.then(Q.race);
};

/**
 * Constructs a Promise with a promise descriptor object and optional fallback
 * function.  The descriptor contains methods like when(rejected), get(name),
 * set(name, value), post(name, args), and delete(name), which all
 * return either a value, a promise for a value, or a rejection.  The fallback
 * accepts the operation name, a resolver, and any further arguments that would
 * have been forwarded to the appropriate method above had a method been
 * provided with the proper name.  The API makes no guarantees about the nature
 * of the returned object, apart from that it is usable whereever promises are
 * bought and sold.
 */
Q.makePromise = Promise;
function Promise(descriptor, fallback, inspect) {
    if (fallback === void 0) {
        fallback = function (op) {
            return reject(new Error(
                "Promise does not support operation: " + op
            ));
        };
    }
    if (inspect === void 0) {
        inspect = function () {
            return {state: "unknown"};
        };
    }

    var promise = object_create(Promise.prototype);

    promise.promiseDispatch = function (resolve, op, args) {
        var result;
        try {
            if (descriptor[op]) {
                result = descriptor[op].apply(promise, args);
            } else {
                result = fallback.call(promise, op, args);
            }
        } catch (exception) {
            result = reject(exception);
        }
        if (resolve) {
            resolve(result);
        }
    };

    promise.inspect = inspect;

    // XXX deprecated `valueOf` and `exception` support
    if (inspect) {
        var inspected = inspect();
        if (inspected.state === "rejected") {
            promise.exception = inspected.reason;
        }

        promise.valueOf = function () {
            var inspected = inspect();
            if (inspected.state === "pending" ||
                inspected.state === "rejected") {
                return promise;
            }
            return inspected.value;
        };
    }

    return promise;
}

Promise.prototype.toString = function () {
    return "[object Promise]";
};

Promise.prototype.then = function (fulfilled, rejected, progressed) {
    var self = this;
    var deferred = defer();
    var done = false;   // ensure the untrusted promise makes at most a
                        // single call to one of the callbacks

    function _fulfilled(value) {
        try {
            return typeof fulfilled === "function" ? fulfilled(value) : value;
        } catch (exception) {
            return reject(exception);
        }
    }

    function _rejected(exception) {
        if (typeof rejected === "function") {
            makeStackTraceLong(exception, self);
            try {
                return rejected(exception);
            } catch (newException) {
                return reject(newException);
            }
        }
        return reject(exception);
    }

    function _progressed(value) {
        return typeof progressed === "function" ? progressed(value) : value;
    }

    Q.nextTick(function () {
        self.promiseDispatch(function (value) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_fulfilled(value));
        }, "when", [function (exception) {
            if (done) {
                return;
            }
            done = true;

            deferred.resolve(_rejected(exception));
        }]);
    });

    // Progress propagator need to be attached in the current tick.
    self.promiseDispatch(void 0, "when", [void 0, function (value) {
        var newValue;
        var threw = false;
        try {
            newValue = _progressed(value);
        } catch (e) {
            threw = true;
            if (Q.onerror) {
                Q.onerror(e);
            } else {
                throw e;
            }
        }

        if (!threw) {
            deferred.notify(newValue);
        }
    }]);

    return deferred.promise;
};

Q.tap = function (promise, callback) {
    return Q(promise).tap(callback);
};

/**
 * Works almost like "finally", but not called for rejections.
 * Original resolution value is passed through callback unaffected.
 * Callback may return a promise that will be awaited for.
 * @param {Function} callback
 * @returns {Q.Promise}
 * @example
 * doSomething()
 *   .then(...)
 *   .tap(console.log)
 *   .then(...);
 */
Promise.prototype.tap = function (callback) {
    callback = Q(callback);

    return this.then(function (value) {
        return callback.fcall(value).thenResolve(value);
    });
};

/**
 * Registers an observer on a promise.
 *
 * Guarantees:
 *
 * 1. that fulfilled and rejected will be called only once.
 * 2. that either the fulfilled callback or the rejected callback will be
 *    called, but not both.
 * 3. that fulfilled and rejected will not be called in this turn.
 *
 * @param value      promise or immediate reference to observe
 * @param fulfilled  function to be called with the fulfilled value
 * @param rejected   function to be called with the rejection exception
 * @param progressed function to be called on any progress notifications
 * @return promise for the return value from the invoked callback
 */
Q.when = when;
function when(value, fulfilled, rejected, progressed) {
    return Q(value).then(fulfilled, rejected, progressed);
}

Promise.prototype.thenResolve = function (value) {
    return this.then(function () { return value; });
};

Q.thenResolve = function (promise, value) {
    return Q(promise).thenResolve(value);
};

Promise.prototype.thenReject = function (reason) {
    return this.then(function () { throw reason; });
};

Q.thenReject = function (promise, reason) {
    return Q(promise).thenReject(reason);
};

/**
 * If an object is not a promise, it is as "near" as possible.
 * If a promise is rejected, it is as "near" as possible too.
 * If it’s a fulfilled promise, the fulfillment value is nearer.
 * If it’s a deferred promise and the deferred has been resolved, the
 * resolution is "nearer".
 * @param object
 * @returns most resolved (nearest) form of the object
 */

// XXX should we re-do this?
Q.nearer = nearer;
function nearer(value) {
    if (isPromise(value)) {
        var inspected = value.inspect();
        if (inspected.state === "fulfilled") {
            return inspected.value;
        }
    }
    return value;
}

/**
 * @returns whether the given object is a promise.
 * Otherwise it is a fulfilled value.
 */
Q.isPromise = isPromise;
function isPromise(object) {
    return object instanceof Promise;
}

Q.isPromiseAlike = isPromiseAlike;
function isPromiseAlike(object) {
    return isObject(object) && typeof object.then === "function";
}

/**
 * @returns whether the given object is a pending promise, meaning not
 * fulfilled or rejected.
 */
Q.isPending = isPending;
function isPending(object) {
    return isPromise(object) && object.inspect().state === "pending";
}

Promise.prototype.isPending = function () {
    return this.inspect().state === "pending";
};

/**
 * @returns whether the given object is a value or fulfilled
 * promise.
 */
Q.isFulfilled = isFulfilled;
function isFulfilled(object) {
    return !isPromise(object) || object.inspect().state === "fulfilled";
}

Promise.prototype.isFulfilled = function () {
    return this.inspect().state === "fulfilled";
};

/**
 * @returns whether the given object is a rejected promise.
 */
Q.isRejected = isRejected;
function isRejected(object) {
    return isPromise(object) && object.inspect().state === "rejected";
}

Promise.prototype.isRejected = function () {
    return this.inspect().state === "rejected";
};

//// BEGIN UNHANDLED REJECTION TRACKING

// This promise library consumes exceptions thrown in handlers so they can be
// handled by a subsequent promise.  The exceptions get added to this array when
// they are created, and removed when they are handled.  Note that in ES6 or
// shimmed environments, this would naturally be a `Set`.
var unhandledReasons = [];
var unhandledRejections = [];
var reportedUnhandledRejections = [];
var trackUnhandledRejections = true;

function resetUnhandledRejections() {
    unhandledReasons.length = 0;
    unhandledRejections.length = 0;

    if (!trackUnhandledRejections) {
        trackUnhandledRejections = true;
    }
}

function trackRejection(promise, reason) {
    if (!trackUnhandledRejections) {
        return;
    }
    if (typeof process === "object" && typeof process.emit === "function") {
        Q.nextTick.runAfter(function () {
            if (array_indexOf(unhandledRejections, promise) !== -1) {
                process.emit("unhandledRejection", reason, promise);
                reportedUnhandledRejections.push(promise);
            }
        });
    }

    unhandledRejections.push(promise);
    if (reason && typeof reason.stack !== "undefined") {
        unhandledReasons.push(reason.stack);
    } else {
        unhandledReasons.push("(no stack) " + reason);
    }
}

function untrackRejection(promise) {
    if (!trackUnhandledRejections) {
        return;
    }

    var at = array_indexOf(unhandledRejections, promise);
    if (at !== -1) {
        if (typeof process === "object" && typeof process.emit === "function") {
            Q.nextTick.runAfter(function () {
                var atReport = array_indexOf(reportedUnhandledRejections, promise);
                if (atReport !== -1) {
                    process.emit("rejectionHandled", unhandledReasons[at], promise);
                    reportedUnhandledRejections.splice(atReport, 1);
                }
            });
        }
        unhandledRejections.splice(at, 1);
        unhandledReasons.splice(at, 1);
    }
}

Q.resetUnhandledRejections = resetUnhandledRejections;

Q.getUnhandledReasons = function () {
    // Make a copy so that consumers can't interfere with our internal state.
    return unhandledReasons.slice();
};

Q.stopUnhandledRejectionTracking = function () {
    resetUnhandledRejections();
    trackUnhandledRejections = false;
};

resetUnhandledRejections();

//// END UNHANDLED REJECTION TRACKING

/**
 * Constructs a rejected promise.
 * @param reason value describing the failure
 */
Q.reject = reject;
function reject(reason) {
    var rejection = Promise({
        "when": function (rejected) {
            // note that the error has been handled
            if (rejected) {
                untrackRejection(this);
            }
            return rejected ? rejected(reason) : this;
        }
    }, function fallback() {
        return this;
    }, function inspect() {
        return { state: "rejected", reason: reason };
    });

    // Note that the reason has not been handled.
    trackRejection(rejection, reason);

    return rejection;
}

/**
 * Constructs a fulfilled promise for an immediate reference.
 * @param value immediate reference
 */
Q.fulfill = fulfill;
function fulfill(value) {
    return Promise({
        "when": function () {
            return value;
        },
        "get": function (name) {
            return value[name];
        },
        "set": function (name, rhs) {
            value[name] = rhs;
        },
        "delete": function (name) {
            delete value[name];
        },
        "post": function (name, args) {
            // Mark Miller proposes that post with no name should apply a
            // promised function.
            if (name === null || name === void 0) {
                return value.apply(void 0, args);
            } else {
                return value[name].apply(value, args);
            }
        },
        "apply": function (thisp, args) {
            return value.apply(thisp, args);
        },
        "keys": function () {
            return object_keys(value);
        }
    }, void 0, function inspect() {
        return { state: "fulfilled", value: value };
    });
}

/**
 * Converts thenables to Q promises.
 * @param promise thenable promise
 * @returns a Q promise
 */
function coerce(promise) {
    var deferred = defer();
    Q.nextTick(function () {
        try {
            promise.then(deferred.resolve, deferred.reject, deferred.notify);
        } catch (exception) {
            deferred.reject(exception);
        }
    });
    return deferred.promise;
}

/**
 * Annotates an object such that it will never be
 * transferred away from this process over any promise
 * communication channel.
 * @param object
 * @returns promise a wrapping of that object that
 * additionally responds to the "isDef" message
 * without a rejection.
 */
Q.master = master;
function master(object) {
    return Promise({
        "isDef": function () {}
    }, function fallback(op, args) {
        return dispatch(object, op, args);
    }, function () {
        return Q(object).inspect();
    });
}

/**
 * Spreads the values of a promised array of arguments into the
 * fulfillment callback.
 * @param fulfilled callback that receives variadic arguments from the
 * promised array
 * @param rejected callback that receives the exception if the promise
 * is rejected.
 * @returns a promise for the return value or thrown exception of
 * either callback.
 */
Q.spread = spread;
function spread(value, fulfilled, rejected) {
    return Q(value).spread(fulfilled, rejected);
}

Promise.prototype.spread = function (fulfilled, rejected) {
    return this.all().then(function (array) {
        return fulfilled.apply(void 0, array);
    }, rejected);
};

/**
 * The async function is a decorator for generator functions, turning
 * them into asynchronous generators.  Although generators are only part
 * of the newest ECMAScript 6 drafts, this code does not cause syntax
 * errors in older engines.  This code should continue to work and will
 * in fact improve over time as the language improves.
 *
 * ES6 generators are currently part of V8 version 3.19 with the
 * --harmony-generators runtime flag enabled.  SpiderMonkey has had them
 * for longer, but under an older Python-inspired form.  This function
 * works on both kinds of generators.
 *
 * Decorates a generator function such that:
 *  - it may yield promises
 *  - execution will continue when that promise is fulfilled
 *  - the value of the yield expression will be the fulfilled value
 *  - it returns a promise for the return value (when the generator
 *    stops iterating)
 *  - the decorated function returns a promise for the return value
 *    of the generator or the first rejected promise among those
 *    yielded.
 *  - if an error is thrown in the generator, it propagates through
 *    every following yield until it is caught, or until it escapes
 *    the generator function altogether, and is translated into a
 *    rejection for the promise returned by the decorated generator.
 */
Q.async = async;
function async(makeGenerator) {
    return function () {
        // when verb is "send", arg is a value
        // when verb is "throw", arg is an exception
        function continuer(verb, arg) {
            var result;

            // Until V8 3.19 / Chromium 29 is released, SpiderMonkey is the only
            // engine that has a deployed base of browsers that support generators.
            // However, SM's generators use the Python-inspired semantics of
            // outdated ES6 drafts.  We would like to support ES6, but we'd also
            // like to make it possible to use generators in deployed browsers, so
            // we also support Python-style generators.  At some point we can remove
            // this block.

            if (typeof StopIteration === "undefined") {
                // ES6 Generators
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    return reject(exception);
                }
                if (result.done) {
                    return Q(result.value);
                } else {
                    return when(result.value, callback, errback);
                }
            } else {
                // SpiderMonkey Generators
                // FIXME: Remove this case when SM does ES6 generators.
                try {
                    result = generator[verb](arg);
                } catch (exception) {
                    if (isStopIteration(exception)) {
                        return Q(exception.value);
                    } else {
                        return reject(exception);
                    }
                }
                return when(result, callback, errback);
            }
        }
        var generator = makeGenerator.apply(this, arguments);
        var callback = continuer.bind(continuer, "next");
        var errback = continuer.bind(continuer, "throw");
        return callback();
    };
}

/**
 * The spawn function is a small wrapper around async that immediately
 * calls the generator and also ends the promise chain, so that any
 * unhandled errors are thrown instead of forwarded to the error
 * handler. This is useful because it's extremely common to run
 * generators at the top-level to work with libraries.
 */
Q.spawn = spawn;
function spawn(makeGenerator) {
    Q.done(Q.async(makeGenerator)());
}

// FIXME: Remove this interface once ES6 generators are in SpiderMonkey.
/**
 * Throws a ReturnValue exception to stop an asynchronous generator.
 *
 * This interface is a stop-gap measure to support generator return
 * values in older Firefox/SpiderMonkey.  In browsers that support ES6
 * generators like Chromium 29, just use "return" in your generator
 * functions.
 *
 * @param value the return value for the surrounding generator
 * @throws ReturnValue exception with the value.
 * @example
 * // ES6 style
 * Q.async(function* () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      return foo + bar;
 * })
 * // Older SpiderMonkey style
 * Q.async(function () {
 *      var foo = yield getFooPromise();
 *      var bar = yield getBarPromise();
 *      Q.return(foo + bar);
 * })
 */
Q["return"] = _return;
function _return(value) {
    throw new QReturnValue(value);
}

/**
 * The promised function decorator ensures that any promise arguments
 * are settled and passed as values (`this` is also settled and passed
 * as a value).  It will also ensure that the result of a function is
 * always a promise.
 *
 * @example
 * var add = Q.promised(function (a, b) {
 *     return a + b;
 * });
 * add(Q(a), Q(B));
 *
 * @param {function} callback The function to decorate
 * @returns {function} a function that has been decorated.
 */
Q.promised = promised;
function promised(callback) {
    return function () {
        return spread([this, all(arguments)], function (self, args) {
            return callback.apply(self, args);
        });
    };
}

/**
 * sends a message to a value in a future turn
 * @param object* the recipient
 * @param op the name of the message operation, e.g., "when",
 * @param args further arguments to be forwarded to the operation
 * @returns result {Promise} a promise for the result of the operation
 */
Q.dispatch = dispatch;
function dispatch(object, op, args) {
    return Q(object).dispatch(op, args);
}

Promise.prototype.dispatch = function (op, args) {
    var self = this;
    var deferred = defer();
    Q.nextTick(function () {
        self.promiseDispatch(deferred.resolve, op, args);
    });
    return deferred.promise;
};

/**
 * Gets the value of a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to get
 * @return promise for the property value
 */
Q.get = function (object, key) {
    return Q(object).dispatch("get", [key]);
};

Promise.prototype.get = function (key) {
    return this.dispatch("get", [key]);
};

/**
 * Sets the value of a property in a future turn.
 * @param object    promise or immediate reference for object object
 * @param name      name of property to set
 * @param value     new value of property
 * @return promise for the return value
 */
Q.set = function (object, key, value) {
    return Q(object).dispatch("set", [key, value]);
};

Promise.prototype.set = function (key, value) {
    return this.dispatch("set", [key, value]);
};

/**
 * Deletes a property in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of property to delete
 * @return promise for the return value
 */
Q.del = // XXX legacy
Q["delete"] = function (object, key) {
    return Q(object).dispatch("delete", [key]);
};

Promise.prototype.del = // XXX legacy
Promise.prototype["delete"] = function (key) {
    return this.dispatch("delete", [key]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param value     a value to post, typically an array of
 *                  invocation arguments for promises that
 *                  are ultimately backed with `resolve` values,
 *                  as opposed to those backed with URLs
 *                  wherein the posted value can be any
 *                  JSON serializable object.
 * @return promise for the return value
 */
// bound locally because it is used by other methods
Q.mapply = // XXX As proposed by "Redsandro"
Q.post = function (object, name, args) {
    return Q(object).dispatch("post", [name, args]);
};

Promise.prototype.mapply = // XXX As proposed by "Redsandro"
Promise.prototype.post = function (name, args) {
    return this.dispatch("post", [name, args]);
};

/**
 * Invokes a method in a future turn.
 * @param object    promise or immediate reference for target object
 * @param name      name of method to invoke
 * @param ...args   array of invocation arguments
 * @return promise for the return value
 */
Q.send = // XXX Mark Miller's proposed parlance
Q.mcall = // XXX As proposed by "Redsandro"
Q.invoke = function (object, name /*...args*/) {
    return Q(object).dispatch("post", [name, array_slice(arguments, 2)]);
};

Promise.prototype.send = // XXX Mark Miller's proposed parlance
Promise.prototype.mcall = // XXX As proposed by "Redsandro"
Promise.prototype.invoke = function (name /*...args*/) {
    return this.dispatch("post", [name, array_slice(arguments, 1)]);
};

/**
 * Applies the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param args      array of application arguments
 */
Q.fapply = function (object, args) {
    return Q(object).dispatch("apply", [void 0, args]);
};

Promise.prototype.fapply = function (args) {
    return this.dispatch("apply", [void 0, args]);
};

/**
 * Calls the promised function in a future turn.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q["try"] =
Q.fcall = function (object /* ...args*/) {
    return Q(object).dispatch("apply", [void 0, array_slice(arguments, 1)]);
};

Promise.prototype.fcall = function (/*...args*/) {
    return this.dispatch("apply", [void 0, array_slice(arguments)]);
};

/**
 * Binds the promised function, transforming return values into a fulfilled
 * promise and thrown errors into a rejected one.
 * @param object    promise or immediate reference for target function
 * @param ...args   array of application arguments
 */
Q.fbind = function (object /*...args*/) {
    var promise = Q(object);
    var args = array_slice(arguments, 1);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};
Promise.prototype.fbind = function (/*...args*/) {
    var promise = this;
    var args = array_slice(arguments);
    return function fbound() {
        return promise.dispatch("apply", [
            this,
            args.concat(array_slice(arguments))
        ]);
    };
};

/**
 * Requests the names of the owned properties of a promised
 * object in a future turn.
 * @param object    promise or immediate reference for target object
 * @return promise for the keys of the eventually settled object
 */
Q.keys = function (object) {
    return Q(object).dispatch("keys", []);
};

Promise.prototype.keys = function () {
    return this.dispatch("keys", []);
};

/**
 * Turns an array of promises into a promise for an array.  If any of
 * the promises gets rejected, the whole array is rejected immediately.
 * @param {Array*} an array (or promise for an array) of values (or
 * promises for values)
 * @returns a promise for an array of the corresponding values
 */
// By Mark Miller
// http://wiki.ecmascript.org/doku.php?id=strawman:concurrency&rev=1308776521#allfulfilled
Q.all = all;
function all(promises) {
    return when(promises, function (promises) {
        var pendingCount = 0;
        var deferred = defer();
        array_reduce(promises, function (undefined, promise, index) {
            var snapshot;
            if (
                isPromise(promise) &&
                (snapshot = promise.inspect()).state === "fulfilled"
            ) {
                promises[index] = snapshot.value;
            } else {
                ++pendingCount;
                when(
                    promise,
                    function (value) {
                        promises[index] = value;
                        if (--pendingCount === 0) {
                            deferred.resolve(promises);
                        }
                    },
                    deferred.reject,
                    function (progress) {
                        deferred.notify({ index: index, value: progress });
                    }
                );
            }
        }, void 0);
        if (pendingCount === 0) {
            deferred.resolve(promises);
        }
        return deferred.promise;
    });
}

Promise.prototype.all = function () {
    return all(this);
};

/**
 * Returns the first resolved promise of an array. Prior rejected promises are
 * ignored.  Rejects only if all promises are rejected.
 * @param {Array*} an array containing values or promises for values
 * @returns a promise fulfilled with the value of the first resolved promise,
 * or a rejected promise if all promises are rejected.
 */
Q.any = any;

function any(promises) {
    if (promises.length === 0) {
        return Q.resolve();
    }

    var deferred = Q.defer();
    var pendingCount = 0;
    array_reduce(promises, function (prev, current, index) {
        var promise = promises[index];

        pendingCount++;

        when(promise, onFulfilled, onRejected, onProgress);
        function onFulfilled(result) {
            deferred.resolve(result);
        }
        function onRejected() {
            pendingCount--;
            if (pendingCount === 0) {
                deferred.reject(new Error(
                    "Can't get fulfillment value from any promise, all " +
                    "promises were rejected."
                ));
            }
        }
        function onProgress(progress) {
            deferred.notify({
                index: index,
                value: progress
            });
        }
    }, undefined);

    return deferred.promise;
}

Promise.prototype.any = function () {
    return any(this);
};

/**
 * Waits for all promises to be settled, either fulfilled or
 * rejected.  This is distinct from `all` since that would stop
 * waiting at the first rejection.  The promise returned by
 * `allResolved` will never be rejected.
 * @param promises a promise for an array (or an array) of promises
 * (or values)
 * @return a promise for an array of promises
 */
Q.allResolved = deprecate(allResolved, "allResolved", "allSettled");
function allResolved(promises) {
    return when(promises, function (promises) {
        promises = array_map(promises, Q);
        return when(all(array_map(promises, function (promise) {
            return when(promise, noop, noop);
        })), function () {
            return promises;
        });
    });
}

Promise.prototype.allResolved = function () {
    return allResolved(this);
};

/**
 * @see Promise#allSettled
 */
Q.allSettled = allSettled;
function allSettled(promises) {
    return Q(promises).allSettled();
}

/**
 * Turns an array of promises into a promise for an array of their states (as
 * returned by `inspect`) when they have all settled.
 * @param {Array[Any*]} values an array (or promise for an array) of values (or
 * promises for values)
 * @returns {Array[State]} an array of states for the respective values.
 */
Promise.prototype.allSettled = function () {
    return this.then(function (promises) {
        return all(array_map(promises, function (promise) {
            promise = Q(promise);
            function regardless() {
                return promise.inspect();
            }
            return promise.then(regardless, regardless);
        }));
    });
};

/**
 * Captures the failure of a promise, giving an oportunity to recover
 * with a callback.  If the given promise is fulfilled, the returned
 * promise is fulfilled.
 * @param {Any*} promise for something
 * @param {Function} callback to fulfill the returned promise if the
 * given promise is rejected
 * @returns a promise for the return value of the callback
 */
Q.fail = // XXX legacy
Q["catch"] = function (object, rejected) {
    return Q(object).then(void 0, rejected);
};

Promise.prototype.fail = // XXX legacy
Promise.prototype["catch"] = function (rejected) {
    return this.then(void 0, rejected);
};

/**
 * Attaches a listener that can respond to progress notifications from a
 * promise's originating deferred. This listener receives the exact arguments
 * passed to ``deferred.notify``.
 * @param {Any*} promise for something
 * @param {Function} callback to receive any progress notifications
 * @returns the given promise, unchanged
 */
Q.progress = progress;
function progress(object, progressed) {
    return Q(object).then(void 0, void 0, progressed);
}

Promise.prototype.progress = function (progressed) {
    return this.then(void 0, void 0, progressed);
};

/**
 * Provides an opportunity to observe the settling of a promise,
 * regardless of whether the promise is fulfilled or rejected.  Forwards
 * the resolution to the returned promise when the callback is done.
 * The callback can return a promise to defer completion.
 * @param {Any*} promise
 * @param {Function} callback to observe the resolution of the given
 * promise, takes no arguments.
 * @returns a promise for the resolution of the given promise when
 * ``fin`` is done.
 */
Q.fin = // XXX legacy
Q["finally"] = function (object, callback) {
    return Q(object)["finally"](callback);
};

Promise.prototype.fin = // XXX legacy
Promise.prototype["finally"] = function (callback) {
    callback = Q(callback);
    return this.then(function (value) {
        return callback.fcall().then(function () {
            return value;
        });
    }, function (reason) {
        // TODO attempt to recycle the rejection with "this".
        return callback.fcall().then(function () {
            throw reason;
        });
    });
};

/**
 * Terminates a chain of promises, forcing rejections to be
 * thrown as exceptions.
 * @param {Any*} promise at the end of a chain of promises
 * @returns nothing
 */
Q.done = function (object, fulfilled, rejected, progress) {
    return Q(object).done(fulfilled, rejected, progress);
};

Promise.prototype.done = function (fulfilled, rejected, progress) {
    var onUnhandledError = function (error) {
        // forward to a future turn so that ``when``
        // does not catch it and turn it into a rejection.
        Q.nextTick(function () {
            makeStackTraceLong(error, promise);
            if (Q.onerror) {
                Q.onerror(error);
            } else {
                throw error;
            }
        });
    };

    // Avoid unnecessary `nextTick`ing via an unnecessary `when`.
    var promise = fulfilled || rejected || progress ?
        this.then(fulfilled, rejected, progress) :
        this;

    if (typeof process === "object" && process && process.domain) {
        onUnhandledError = process.domain.bind(onUnhandledError);
    }

    promise.then(void 0, onUnhandledError);
};

/**
 * Causes a promise to be rejected if it does not get fulfilled before
 * some milliseconds time out.
 * @param {Any*} promise
 * @param {Number} milliseconds timeout
 * @param {Any*} custom error message or Error object (optional)
 * @returns a promise for the resolution of the given promise if it is
 * fulfilled before the timeout, otherwise rejected.
 */
Q.timeout = function (object, ms, error) {
    return Q(object).timeout(ms, error);
};

Promise.prototype.timeout = function (ms, error) {
    var deferred = defer();
    var timeoutId = setTimeout(function () {
        if (!error || "string" === typeof error) {
            error = new Error(error || "Timed out after " + ms + " ms");
            error.code = "ETIMEDOUT";
        }
        deferred.reject(error);
    }, ms);

    this.then(function (value) {
        clearTimeout(timeoutId);
        deferred.resolve(value);
    }, function (exception) {
        clearTimeout(timeoutId);
        deferred.reject(exception);
    }, deferred.notify);

    return deferred.promise;
};

/**
 * Returns a promise for the given value (or promised value), some
 * milliseconds after it resolved. Passes rejections immediately.
 * @param {Any*} promise
 * @param {Number} milliseconds
 * @returns a promise for the resolution of the given promise after milliseconds
 * time has elapsed since the resolution of the given promise.
 * If the given promise rejects, that is passed immediately.
 */
Q.delay = function (object, timeout) {
    if (timeout === void 0) {
        timeout = object;
        object = void 0;
    }
    return Q(object).delay(timeout);
};

Promise.prototype.delay = function (timeout) {
    return this.then(function (value) {
        var deferred = defer();
        setTimeout(function () {
            deferred.resolve(value);
        }, timeout);
        return deferred.promise;
    });
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided as an array, and returns a promise.
 *
 *      Q.nfapply(FS.readFile, [__filename])
 *      .then(function (content) {
 *      })
 *
 */
Q.nfapply = function (callback, args) {
    return Q(callback).nfapply(args);
};

Promise.prototype.nfapply = function (args) {
    var deferred = defer();
    var nodeArgs = array_slice(args);
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Passes a continuation to a Node function, which is called with the given
 * arguments provided individually, and returns a promise.
 * @example
 * Q.nfcall(FS.readFile, __filename)
 * .then(function (content) {
 * })
 *
 */
Q.nfcall = function (callback /*...args*/) {
    var args = array_slice(arguments, 1);
    return Q(callback).nfapply(args);
};

Promise.prototype.nfcall = function (/*...args*/) {
    var nodeArgs = array_slice(arguments);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.fapply(nodeArgs).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Wraps a NodeJS continuation passing function and returns an equivalent
 * version that returns a promise.
 * @example
 * Q.nfbind(FS.readFile, __filename)("utf-8")
 * .then(console.log)
 * .done()
 */
Q.nfbind =
Q.denodeify = function (callback /*...args*/) {
    var baseArgs = array_slice(arguments, 1);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        Q(callback).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nfbind =
Promise.prototype.denodeify = function (/*...args*/) {
    var args = array_slice(arguments);
    args.unshift(this);
    return Q.denodeify.apply(void 0, args);
};

Q.nbind = function (callback, thisp /*...args*/) {
    var baseArgs = array_slice(arguments, 2);
    return function () {
        var nodeArgs = baseArgs.concat(array_slice(arguments));
        var deferred = defer();
        nodeArgs.push(deferred.makeNodeResolver());
        function bound() {
            return callback.apply(thisp, arguments);
        }
        Q(bound).fapply(nodeArgs).fail(deferred.reject);
        return deferred.promise;
    };
};

Promise.prototype.nbind = function (/*thisp, ...args*/) {
    var args = array_slice(arguments, 0);
    args.unshift(this);
    return Q.nbind.apply(void 0, args);
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback with a given array of arguments, plus a provided callback.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param {Array} args arguments to pass to the method; the callback
 * will be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nmapply = // XXX As proposed by "Redsandro"
Q.npost = function (object, name, args) {
    return Q(object).npost(name, args);
};

Promise.prototype.nmapply = // XXX As proposed by "Redsandro"
Promise.prototype.npost = function (name, args) {
    var nodeArgs = array_slice(args || []);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * Calls a method of a Node-style object that accepts a Node-style
 * callback, forwarding the given variadic arguments, plus a provided
 * callback argument.
 * @param object an object that has the named method
 * @param {String} name name of the method of object
 * @param ...args arguments to pass to the method; the callback will
 * be provided by Q and appended to these arguments.
 * @returns a promise for the value or error
 */
Q.nsend = // XXX Based on Mark Miller's proposed "send"
Q.nmcall = // XXX Based on "Redsandro's" proposal
Q.ninvoke = function (object, name /*...args*/) {
    var nodeArgs = array_slice(arguments, 2);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    Q(object).dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

Promise.prototype.nsend = // XXX Based on Mark Miller's proposed "send"
Promise.prototype.nmcall = // XXX Based on "Redsandro's" proposal
Promise.prototype.ninvoke = function (name /*...args*/) {
    var nodeArgs = array_slice(arguments, 1);
    var deferred = defer();
    nodeArgs.push(deferred.makeNodeResolver());
    this.dispatch("post", [name, nodeArgs]).fail(deferred.reject);
    return deferred.promise;
};

/**
 * If a function would like to support both Node continuation-passing-style and
 * promise-returning-style, it can end its internal promise chain with
 * `nodeify(nodeback)`, forwarding the optional nodeback argument.  If the user
 * elects to use a nodeback, the result will be sent there.  If they do not
 * pass a nodeback, they will receive the result promise.
 * @param object a result (or a promise for a result)
 * @param {Function} nodeback a Node.js-style callback
 * @returns either the promise or nothing
 */
Q.nodeify = nodeify;
function nodeify(object, nodeback) {
    return Q(object).nodeify(nodeback);
}

Promise.prototype.nodeify = function (nodeback) {
    if (nodeback) {
        this.then(function (value) {
            Q.nextTick(function () {
                nodeback(null, value);
            });
        }, function (error) {
            Q.nextTick(function () {
                nodeback(error);
            });
        });
    } else {
        return this;
    }
};

Q.noConflict = function() {
    throw new Error("Q.noConflict only works when Q is used as a global");
};

// All code before this point will be filtered from stack traces.
var qEndingLine = captureLine();

return Q;

});

}).call(this,require('_process'))

},{"_process":7}],48:[function(require,module,exports){
'use strict';

var randomFromSeed = require('./random/random-from-seed');

var ORIGINAL = '0123456789abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ_-';
var alphabet;
var previousSeed;

var shuffled;

function reset() {
    shuffled = false;
}

function setCharacters(_alphabet_) {
    if (!_alphabet_) {
        if (alphabet !== ORIGINAL) {
            alphabet = ORIGINAL;
            reset();
        }
        return;
    }

    if (_alphabet_ === alphabet) {
        return;
    }

    if (_alphabet_.length !== ORIGINAL.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. You submitted ' + _alphabet_.length + ' characters: ' + _alphabet_);
    }

    var unique = _alphabet_.split('').filter(function(item, ind, arr){
       return ind !== arr.lastIndexOf(item);
    });

    if (unique.length) {
        throw new Error('Custom alphabet for shortid must be ' + ORIGINAL.length + ' unique characters. These characters were not unique: ' + unique.join(', '));
    }

    alphabet = _alphabet_;
    reset();
}

function characters(_alphabet_) {
    setCharacters(_alphabet_);
    return alphabet;
}

function setSeed(seed) {
    randomFromSeed.seed(seed);
    if (previousSeed !== seed) {
        reset();
        previousSeed = seed;
    }
}

function shuffle() {
    if (!alphabet) {
        setCharacters(ORIGINAL);
    }

    var sourceArray = alphabet.split('');
    var targetArray = [];
    var r = randomFromSeed.nextValue();
    var characterIndex;

    while (sourceArray.length > 0) {
        r = randomFromSeed.nextValue();
        characterIndex = Math.floor(r * sourceArray.length);
        targetArray.push(sourceArray.splice(characterIndex, 1)[0]);
    }
    return targetArray.join('');
}

function getShuffled() {
    if (shuffled) {
        return shuffled;
    }
    shuffled = shuffle();
    return shuffled;
}

/**
 * lookup shuffled letter
 * @param index
 * @returns {string}
 */
function lookup(index) {
    var alphabetShuffled = getShuffled();
    return alphabetShuffled[index];
}

module.exports = {
    characters: characters,
    seed: setSeed,
    lookup: lookup,
    shuffled: getShuffled
};

},{"./random/random-from-seed":54}],49:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

/**
 * Decode the id to get the version and worker
 * Mainly for debugging and testing.
 * @param id - the shortid-generated id.
 */
function decode(id) {
    var characters = alphabet.shuffled();
    return {
        version: characters.indexOf(id.substr(0, 1)) & 0x0f,
        worker: characters.indexOf(id.substr(1, 1)) & 0x0f
    };
}

module.exports = decode;

},{"./alphabet":48}],50:[function(require,module,exports){
'use strict';

var randomByte = require('./random/random-byte');

function encode(lookup, number) {
    var loopCounter = 0;
    var done;

    var str = '';

    while (!done) {
        str = str + lookup( ( (number >> (4 * loopCounter)) & 0x0f ) | randomByte() );
        done = number < (Math.pow(16, loopCounter + 1 ) );
        loopCounter++;
    }
    return str;
}

module.exports = encode;

},{"./random/random-byte":53}],51:[function(require,module,exports){
'use strict';

var alphabet = require('./alphabet');
var encode = require('./encode');
var decode = require('./decode');
var isValid = require('./is-valid');

// Ignore all milliseconds before a certain time to reduce the size of the date entropy without sacrificing uniqueness.
// This number should be updated every year or so to keep the generated id short.
// To regenerate `new Date() - 0` and bump the version. Always bump the version!
var REDUCE_TIME = 1426452414093;

// don't change unless we change the algos or REDUCE_TIME
// must be an integer and less than 16
var version = 5;

// if you are using cluster or multiple servers use this to make each instance
// has a unique value for worker
// Note: I don't know if this is automatically set when using third
// party cluster solutions such as pm2.
var clusterWorkerId = require('./util/cluster-worker-id') || 0;

// Counter is used when shortid is called multiple times in one second.
var counter;

// Remember the last time shortid was called in case counter is needed.
var previousSeconds;

/**
 * Generate unique id
 * Returns string id
 */
function generate() {

    var str = '';

    var seconds = Math.floor((Date.now() - REDUCE_TIME) * 0.001);

    if (seconds === previousSeconds) {
        counter++;
    } else {
        counter = 0;
        previousSeconds = seconds;
    }

    str = str + encode(alphabet.lookup, version);
    str = str + encode(alphabet.lookup, clusterWorkerId);
    if (counter > 0) {
        str = str + encode(alphabet.lookup, counter);
    }
    str = str + encode(alphabet.lookup, seconds);

    return str;
}


/**
 * Set the seed.
 * Highly recommended if you don't want people to try to figure out your id schema.
 * exposed as shortid.seed(int)
 * @param seed Integer value to seed the random alphabet.  ALWAYS USE THE SAME SEED or you might get overlaps.
 */
function seed(seedValue) {
    alphabet.seed(seedValue);
    return module.exports;
}

/**
 * Set the cluster worker or machine id
 * exposed as shortid.worker(int)
 * @param workerId worker must be positive integer.  Number less than 16 is recommended.
 * returns shortid module so it can be chained.
 */
function worker(workerId) {
    clusterWorkerId = workerId;
    return module.exports;
}

/**
 *
 * sets new characters to use in the alphabet
 * returns the shuffled alphabet
 */
function characters(newCharacters) {
    if (newCharacters !== undefined) {
        alphabet.characters(newCharacters);
    }

    return alphabet.shuffled();
}


// Export all other functions as properties of the generate function
module.exports = generate;
module.exports.generate = generate;
module.exports.seed = seed;
module.exports.worker = worker;
module.exports.characters = characters;
module.exports.decode = decode;
module.exports.isValid = isValid;

},{"./alphabet":48,"./decode":49,"./encode":50,"./is-valid":52,"./util/cluster-worker-id":55}],52:[function(require,module,exports){
'use strict';
var alphabet = require('./alphabet');

function isShortId(id) {
    if (!id || typeof id !== 'string' || id.length < 6 ) {
        return false;
    }

    var characters = alphabet.characters();
    var invalidCharacters = id.split('').map(function(char){
        if (characters.indexOf(char) === -1) {
            return char;
        }
    }).join('').split('').join('');

    return invalidCharacters.length === 0;
}

module.exports = isShortId;

},{"./alphabet":48}],53:[function(require,module,exports){
'use strict';

var crypto = window.crypto || window.msCrypto; // IE 11 uses window.msCrypto

function randomByte() {
    if (!crypto || !crypto.getRandomValues) {
        return Math.floor(Math.random() * 256) & 0x30;
    }
    var dest = new Uint8Array(1);
    crypto.getRandomValues(dest);
    return dest[0] & 0x30;
}

module.exports = randomByte;

},{}],54:[function(require,module,exports){
'use strict';

// Found this seed-based random generator somewhere
// Based on The Central Randomizer 1.3 (C) 1997 by Paul Houle (houle@msc.cornell.edu)

var seed = 1;

/**
 * return a random number based on a seed
 * @param seed
 * @returns {number}
 */
function getNextValue() {
    seed = (seed * 9301 + 49297) % 233280;
    return seed/(233280.0);
}

function setSeed(_seed_) {
    seed = _seed_;
}

module.exports = {
    nextValue: getNextValue,
    seed: setSeed
};

},{}],55:[function(require,module,exports){
'use strict';

module.exports = 0;

},{}],56:[function(require,module,exports){
(function (sinonChai) {
    "use strict";

    // Module systems magic dance.

    /* istanbul ignore else */
    if (typeof require === "function" && typeof exports === "object" && typeof module === "object") {
        // NodeJS
        module.exports = sinonChai;
    } else if (typeof define === "function" && define.amd) {
        // AMD
        define(function () {
            return sinonChai;
        });
    } else {
        // Other environment (usually <script> tag): plug in to global chai instance directly.
        chai.use(sinonChai);
    }
}(function sinonChai(chai, utils) {
    "use strict";

    var slice = Array.prototype.slice;

    function isSpy(putativeSpy) {
        return typeof putativeSpy === "function" &&
               typeof putativeSpy.getCall === "function" &&
               typeof putativeSpy.calledWithExactly === "function";
    }

    function timesInWords(count) {
        return count === 1 ? "once" :
               count === 2 ? "twice" :
               count === 3 ? "thrice" :
               (count || 0) + " times";
    }

    function isCall(putativeCall) {
        return putativeCall && isSpy(putativeCall.proxy);
    }

    function assertCanWorkWith(assertion) {
        if (!isSpy(assertion._obj) && !isCall(assertion._obj)) {
            throw new TypeError(utils.inspect(assertion._obj) + " is not a spy or a call to a spy!");
        }
    }

    function getMessages(spy, action, nonNegatedSuffix, always, args) {
        var verbPhrase = always ? "always have " : "have ";
        nonNegatedSuffix = nonNegatedSuffix || "";
        if (isSpy(spy.proxy)) {
            spy = spy.proxy;
        }

        function printfArray(array) {
            return spy.printf.apply(spy, array);
        }

        return {
            affirmative: function () {
                return printfArray(["expected %n to " + verbPhrase + action + nonNegatedSuffix].concat(args));
            },
            negative: function () {
                return printfArray(["expected %n to not " + verbPhrase + action].concat(args));
            }
        };
    }

    function sinonProperty(name, action, nonNegatedSuffix) {
        utils.addProperty(chai.Assertion.prototype, name, function () {
            assertCanWorkWith(this);

            var messages = getMessages(this._obj, action, nonNegatedSuffix, false);
            this.assert(this._obj[name], messages.affirmative, messages.negative);
        });
    }

    function sinonPropertyAsBooleanMethod(name, action, nonNegatedSuffix) {
        utils.addMethod(chai.Assertion.prototype, name, function (arg) {
            assertCanWorkWith(this);

            var messages = getMessages(this._obj, action, nonNegatedSuffix, false, [timesInWords(arg)]);
            this.assert(this._obj[name] === arg, messages.affirmative, messages.negative);
        });
    }

    function createSinonMethodHandler(sinonName, action, nonNegatedSuffix) {
        return function () {
            assertCanWorkWith(this);

            var alwaysSinonMethod = "always" + sinonName[0].toUpperCase() + sinonName.substring(1);
            var shouldBeAlways = utils.flag(this, "always") && typeof this._obj[alwaysSinonMethod] === "function";
            var sinonMethod = shouldBeAlways ? alwaysSinonMethod : sinonName;

            var messages = getMessages(this._obj, action, nonNegatedSuffix, shouldBeAlways, slice.call(arguments));
            this.assert(this._obj[sinonMethod].apply(this._obj, arguments), messages.affirmative, messages.negative);
        };
    }

    function sinonMethodAsProperty(name, action, nonNegatedSuffix) {
        var handler = createSinonMethodHandler(name, action, nonNegatedSuffix);
        utils.addProperty(chai.Assertion.prototype, name, handler);
    }

    function exceptionalSinonMethod(chaiName, sinonName, action, nonNegatedSuffix) {
        var handler = createSinonMethodHandler(sinonName, action, nonNegatedSuffix);
        utils.addMethod(chai.Assertion.prototype, chaiName, handler);
    }

    function sinonMethod(name, action, nonNegatedSuffix) {
        exceptionalSinonMethod(name, name, action, nonNegatedSuffix);
    }

    utils.addProperty(chai.Assertion.prototype, "always", function () {
        utils.flag(this, "always", true);
    });

    sinonProperty("called", "been called", " at least once, but it was never called");
    sinonPropertyAsBooleanMethod("callCount", "been called exactly %1", ", but it was called %c%C");
    sinonProperty("calledOnce", "been called exactly once", ", but it was called %c%C");
    sinonProperty("calledTwice", "been called exactly twice", ", but it was called %c%C");
    sinonProperty("calledThrice", "been called exactly thrice", ", but it was called %c%C");
    sinonMethodAsProperty("calledWithNew", "been called with new");
    sinonMethod("calledBefore", "been called before %1");
    sinonMethod("calledAfter", "been called after %1");
    sinonMethod("calledOn", "been called with %1 as this", ", but it was called with %t instead");
    sinonMethod("calledWith", "been called with arguments %*", "%C");
    sinonMethod("calledWithExactly", "been called with exact arguments %*", "%C");
    sinonMethod("calledWithMatch", "been called with arguments matching %*", "%C");
    sinonMethod("returned", "returned %1");
    exceptionalSinonMethod("thrown", "threw", "thrown %1");
}));

},{}],57:[function(require,module,exports){
/**
 * Sinon core utilities. For internal use only.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
var sinon = (function () { // eslint-disable-line no-unused-vars
    "use strict";

    var sinonModule;
    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        sinonModule = module.exports = require("./sinon/util/core");
        require("./sinon/extend");
        require("./sinon/typeOf");
        require("./sinon/times_in_words");
        require("./sinon/spy");
        require("./sinon/call");
        require("./sinon/behavior");
        require("./sinon/stub");
        require("./sinon/mock");
        require("./sinon/collection");
        require("./sinon/assert");
        require("./sinon/sandbox");
        require("./sinon/test");
        require("./sinon/test_case");
        require("./sinon/match");
        require("./sinon/format");
        require("./sinon/log_error");
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require, module.exports, module);
        sinonModule = module.exports;
    } else {
        sinonModule = {};
    }

    return sinonModule;
}());

},{"./sinon/assert":58,"./sinon/behavior":59,"./sinon/call":60,"./sinon/collection":61,"./sinon/extend":62,"./sinon/format":63,"./sinon/log_error":64,"./sinon/match":65,"./sinon/mock":66,"./sinon/sandbox":67,"./sinon/spy":68,"./sinon/stub":69,"./sinon/test":70,"./sinon/test_case":71,"./sinon/times_in_words":72,"./sinon/typeOf":73,"./sinon/util/core":74}],58:[function(require,module,exports){
(function (global){
/**
 * @depend times_in_words.js
 * @depend util/core.js
 * @depend match.js
 * @depend format.js
 */
/**
 * Assertions matching the test spy retrieval interface.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal, global) {
    "use strict";

    var slice = Array.prototype.slice;

    function makeApi(sinon) {
        var assert;

        function verifyIsStub() {
            var method;

            for (var i = 0, l = arguments.length; i < l; ++i) {
                method = arguments[i];

                if (!method) {
                    assert.fail("fake is not a spy");
                }

                if (method.proxy && method.proxy.isSinonProxy) {
                    verifyIsStub(method.proxy);
                } else {
                    if (typeof method !== "function") {
                        assert.fail(method + " is not a function");
                    }

                    if (typeof method.getCall !== "function") {
                        assert.fail(method + " is not stubbed");
                    }
                }

            }
        }

        function failAssertion(object, msg) {
            object = object || global;
            var failMethod = object.fail || assert.fail;
            failMethod.call(object, msg);
        }

        function mirrorPropAsAssertion(name, method, message) {
            if (arguments.length === 2) {
                message = method;
                method = name;
            }

            assert[name] = function (fake) {
                verifyIsStub(fake);

                var args = slice.call(arguments, 1);
                var failed = false;

                if (typeof method === "function") {
                    failed = !method(fake);
                } else {
                    failed = typeof fake[method] === "function" ?
                        !fake[method].apply(fake, args) : !fake[method];
                }

                if (failed) {
                    failAssertion(this, (fake.printf || fake.proxy.printf).apply(fake, [message].concat(args)));
                } else {
                    assert.pass(name);
                }
            };
        }

        function exposedName(prefix, prop) {
            return !prefix || /^fail/.test(prop) ? prop :
                prefix + prop.slice(0, 1).toUpperCase() + prop.slice(1);
        }

        assert = {
            failException: "AssertError",

            fail: function fail(message) {
                var error = new Error(message);
                error.name = this.failException || assert.failException;

                throw error;
            },

            pass: function pass() {},

            callOrder: function assertCallOrder() {
                verifyIsStub.apply(null, arguments);
                var expected = "";
                var actual = "";

                if (!sinon.calledInOrder(arguments)) {
                    try {
                        expected = [].join.call(arguments, ", ");
                        var calls = slice.call(arguments);
                        var i = calls.length;
                        while (i) {
                            if (!calls[--i].called) {
                                calls.splice(i, 1);
                            }
                        }
                        actual = sinon.orderByFirstCall(calls).join(", ");
                    } catch (e) {
                        // If this fails, we'll just fall back to the blank string
                    }

                    failAssertion(this, "expected " + expected + " to be " +
                                "called in order but were called as " + actual);
                } else {
                    assert.pass("callOrder");
                }
            },

            callCount: function assertCallCount(method, count) {
                verifyIsStub(method);

                if (method.callCount !== count) {
                    var msg = "expected %n to be called " + sinon.timesInWords(count) +
                        " but was called %c%C";
                    failAssertion(this, method.printf(msg));
                } else {
                    assert.pass("callCount");
                }
            },

            expose: function expose(target, options) {
                if (!target) {
                    throw new TypeError("target is null or undefined");
                }

                var o = options || {};
                var prefix = typeof o.prefix === "undefined" && "assert" || o.prefix;
                var includeFail = typeof o.includeFail === "undefined" || !!o.includeFail;

                for (var method in this) {
                    if (method !== "expose" && (includeFail || !/^(fail)/.test(method))) {
                        target[exposedName(prefix, method)] = this[method];
                    }
                }

                return target;
            },

            match: function match(actual, expectation) {
                var matcher = sinon.match(expectation);
                if (matcher.test(actual)) {
                    assert.pass("match");
                } else {
                    var formatted = [
                        "expected value to match",
                        "    expected = " + sinon.format(expectation),
                        "    actual = " + sinon.format(actual)
                    ];

                    failAssertion(this, formatted.join("\n"));
                }
            }
        };

        mirrorPropAsAssertion("called", "expected %n to have been called at least once but was never called");
        mirrorPropAsAssertion("notCalled", function (spy) {
            return !spy.called;
        }, "expected %n to not have been called but was called %c%C");
        mirrorPropAsAssertion("calledOnce", "expected %n to be called once but was called %c%C");
        mirrorPropAsAssertion("calledTwice", "expected %n to be called twice but was called %c%C");
        mirrorPropAsAssertion("calledThrice", "expected %n to be called thrice but was called %c%C");
        mirrorPropAsAssertion("calledOn", "expected %n to be called with %1 as this but was called with %t");
        mirrorPropAsAssertion(
            "alwaysCalledOn",
            "expected %n to always be called with %1 as this but was called with %t"
        );
        mirrorPropAsAssertion("calledWithNew", "expected %n to be called with new");
        mirrorPropAsAssertion("alwaysCalledWithNew", "expected %n to always be called with new");
        mirrorPropAsAssertion("calledWith", "expected %n to be called with arguments %*%C");
        mirrorPropAsAssertion("calledWithMatch", "expected %n to be called with match %*%C");
        mirrorPropAsAssertion("alwaysCalledWith", "expected %n to always be called with arguments %*%C");
        mirrorPropAsAssertion("alwaysCalledWithMatch", "expected %n to always be called with match %*%C");
        mirrorPropAsAssertion("calledWithExactly", "expected %n to be called with exact arguments %*%C");
        mirrorPropAsAssertion("alwaysCalledWithExactly", "expected %n to always be called with exact arguments %*%C");
        mirrorPropAsAssertion("neverCalledWith", "expected %n to never be called with arguments %*%C");
        mirrorPropAsAssertion("neverCalledWithMatch", "expected %n to never be called with match %*%C");
        mirrorPropAsAssertion("threw", "%n did not throw exception%C");
        mirrorPropAsAssertion("alwaysThrew", "%n did not always throw exception%C");

        sinon.assert = assert;
        return assert;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./match");
        require("./format");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon, // eslint-disable-line no-undef
    typeof global !== "undefined" ? global : self
));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"./format":63,"./match":65,"./util/core":74}],59:[function(require,module,exports){
(function (process){
/**
 * @depend util/core.js
 * @depend extend.js
 */
/**
 * Stub behavior
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @author Tim Fischbach (mail@timfischbach.de)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    var slice = Array.prototype.slice;
    var join = Array.prototype.join;
    var useLeftMostCallback = -1;
    var useRightMostCallback = -2;

    var nextTick = (function () {
        if (typeof process === "object" && typeof process.nextTick === "function") {
            return process.nextTick;
        }

        if (typeof setImmediate === "function") {
            return setImmediate;
        }

        return function (callback) {
            setTimeout(callback, 0);
        };
    })();

    function throwsException(error, message) {
        if (typeof error === "string") {
            this.exception = new Error(message || "");
            this.exception.name = error;
        } else if (!error) {
            this.exception = new Error("Error");
        } else {
            this.exception = error;
        }

        return this;
    }

    function getCallback(behavior, args) {
        var callArgAt = behavior.callArgAt;

        if (callArgAt >= 0) {
            return args[callArgAt];
        }

        var argumentList;

        if (callArgAt === useLeftMostCallback) {
            argumentList = args;
        }

        if (callArgAt === useRightMostCallback) {
            argumentList = slice.call(args).reverse();
        }

        var callArgProp = behavior.callArgProp;

        for (var i = 0, l = argumentList.length; i < l; ++i) {
            if (!callArgProp && typeof argumentList[i] === "function") {
                return argumentList[i];
            }

            if (callArgProp && argumentList[i] &&
                typeof argumentList[i][callArgProp] === "function") {
                return argumentList[i][callArgProp];
            }
        }

        return null;
    }

    function makeApi(sinon) {
        function getCallbackError(behavior, func, args) {
            if (behavior.callArgAt < 0) {
                var msg;

                if (behavior.callArgProp) {
                    msg = sinon.functionName(behavior.stub) +
                        " expected to yield to '" + behavior.callArgProp +
                        "', but no object with such a property was passed.";
                } else {
                    msg = sinon.functionName(behavior.stub) +
                        " expected to yield, but no callback was passed.";
                }

                if (args.length > 0) {
                    msg += " Received [" + join.call(args, ", ") + "]";
                }

                return msg;
            }

            return "argument at index " + behavior.callArgAt + " is not a function: " + func;
        }

        function callCallback(behavior, args) {
            if (typeof behavior.callArgAt === "number") {
                var func = getCallback(behavior, args);

                if (typeof func !== "function") {
                    throw new TypeError(getCallbackError(behavior, func, args));
                }

                if (behavior.callbackAsync) {
                    nextTick(function () {
                        func.apply(behavior.callbackContext, behavior.callbackArguments);
                    });
                } else {
                    func.apply(behavior.callbackContext, behavior.callbackArguments);
                }
            }
        }

        var proto = {
            create: function create(stub) {
                var behavior = sinon.extend({}, sinon.behavior);
                delete behavior.create;
                behavior.stub = stub;

                return behavior;
            },

            isPresent: function isPresent() {
                return (typeof this.callArgAt === "number" ||
                        this.exception ||
                        typeof this.returnArgAt === "number" ||
                        this.returnThis ||
                        this.returnValueDefined);
            },

            invoke: function invoke(context, args) {
                callCallback(this, args);

                if (this.exception) {
                    throw this.exception;
                } else if (typeof this.returnArgAt === "number") {
                    return args[this.returnArgAt];
                } else if (this.returnThis) {
                    return context;
                }

                return this.returnValue;
            },

            onCall: function onCall(index) {
                return this.stub.onCall(index);
            },

            onFirstCall: function onFirstCall() {
                return this.stub.onFirstCall();
            },

            onSecondCall: function onSecondCall() {
                return this.stub.onSecondCall();
            },

            onThirdCall: function onThirdCall() {
                return this.stub.onThirdCall();
            },

            withArgs: function withArgs(/* arguments */) {
                throw new Error(
                    "Defining a stub by invoking \"stub.onCall(...).withArgs(...)\" " +
                    "is not supported. Use \"stub.withArgs(...).onCall(...)\" " +
                    "to define sequential behavior for calls with certain arguments."
                );
            },

            callsArg: function callsArg(pos) {
                if (typeof pos !== "number") {
                    throw new TypeError("argument index is not number");
                }

                this.callArgAt = pos;
                this.callbackArguments = [];
                this.callbackContext = undefined;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            callsArgOn: function callsArgOn(pos, context) {
                if (typeof pos !== "number") {
                    throw new TypeError("argument index is not number");
                }
                if (typeof context !== "object") {
                    throw new TypeError("argument context is not an object");
                }

                this.callArgAt = pos;
                this.callbackArguments = [];
                this.callbackContext = context;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            callsArgWith: function callsArgWith(pos) {
                if (typeof pos !== "number") {
                    throw new TypeError("argument index is not number");
                }

                this.callArgAt = pos;
                this.callbackArguments = slice.call(arguments, 1);
                this.callbackContext = undefined;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            callsArgOnWith: function callsArgWith(pos, context) {
                if (typeof pos !== "number") {
                    throw new TypeError("argument index is not number");
                }
                if (typeof context !== "object") {
                    throw new TypeError("argument context is not an object");
                }

                this.callArgAt = pos;
                this.callbackArguments = slice.call(arguments, 2);
                this.callbackContext = context;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            yields: function () {
                this.callArgAt = useLeftMostCallback;
                this.callbackArguments = slice.call(arguments, 0);
                this.callbackContext = undefined;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            yieldsRight: function () {
                this.callArgAt = useRightMostCallback;
                this.callbackArguments = slice.call(arguments, 0);
                this.callbackContext = undefined;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            yieldsOn: function (context) {
                if (typeof context !== "object") {
                    throw new TypeError("argument context is not an object");
                }

                this.callArgAt = useLeftMostCallback;
                this.callbackArguments = slice.call(arguments, 1);
                this.callbackContext = context;
                this.callArgProp = undefined;
                this.callbackAsync = false;

                return this;
            },

            yieldsTo: function (prop) {
                this.callArgAt = useLeftMostCallback;
                this.callbackArguments = slice.call(arguments, 1);
                this.callbackContext = undefined;
                this.callArgProp = prop;
                this.callbackAsync = false;

                return this;
            },

            yieldsToOn: function (prop, context) {
                if (typeof context !== "object") {
                    throw new TypeError("argument context is not an object");
                }

                this.callArgAt = useLeftMostCallback;
                this.callbackArguments = slice.call(arguments, 2);
                this.callbackContext = context;
                this.callArgProp = prop;
                this.callbackAsync = false;

                return this;
            },

            throws: throwsException,
            throwsException: throwsException,

            returns: function returns(value) {
                this.returnValue = value;
                this.returnValueDefined = true;
                this.exception = undefined;

                return this;
            },

            returnsArg: function returnsArg(pos) {
                if (typeof pos !== "number") {
                    throw new TypeError("argument index is not number");
                }

                this.returnArgAt = pos;

                return this;
            },

            returnsThis: function returnsThis() {
                this.returnThis = true;

                return this;
            }
        };

        function createAsyncVersion(syncFnName) {
            return function () {
                var result = this[syncFnName].apply(this, arguments);
                this.callbackAsync = true;
                return result;
            };
        }

        // create asynchronous versions of callsArg* and yields* methods
        for (var method in proto) {
            // need to avoid creating anotherasync versions of the newly added async methods
            if (proto.hasOwnProperty(method) && method.match(/^(callsArg|yields)/) && !method.match(/Async/)) {
                proto[method + "Async"] = createAsyncVersion(method);
            }
        }

        sinon.behavior = proto;
        return proto;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./extend");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

}).call(this,require('_process'))

},{"./extend":62,"./util/core":74,"_process":7}],60:[function(require,module,exports){
/**
  * @depend util/core.js
  * @depend match.js
  * @depend format.js
  */
/**
  * Spy calls
  *
  * @author Christian Johansen (christian@cjohansen.no)
  * @author Maximilian Antoni (mail@maxantoni.de)
  * @license BSD
  *
  * Copyright (c) 2010-2013 Christian Johansen
  * Copyright (c) 2013 Maximilian Antoni
  */
(function (sinonGlobal) {
    "use strict";

    var slice = Array.prototype.slice;

    function makeApi(sinon) {
        function throwYieldError(proxy, text, args) {
            var msg = sinon.functionName(proxy) + text;
            if (args.length) {
                msg += " Received [" + slice.call(args).join(", ") + "]";
            }
            throw new Error(msg);
        }

        var callProto = {
            calledOn: function calledOn(thisValue) {
                if (sinon.match && sinon.match.isMatcher(thisValue)) {
                    return thisValue.test(this.thisValue);
                }
                return this.thisValue === thisValue;
            },

            calledWith: function calledWith() {
                var l = arguments.length;
                if (l > this.args.length) {
                    return false;
                }
                for (var i = 0; i < l; i += 1) {
                    if (!sinon.deepEqual(arguments[i], this.args[i])) {
                        return false;
                    }
                }

                return true;
            },

            calledWithMatch: function calledWithMatch() {
                var l = arguments.length;
                if (l > this.args.length) {
                    return false;
                }
                for (var i = 0; i < l; i += 1) {
                    var actual = this.args[i];
                    var expectation = arguments[i];
                    if (!sinon.match || !sinon.match(expectation).test(actual)) {
                        return false;
                    }
                }
                return true;
            },

            calledWithExactly: function calledWithExactly() {
                return arguments.length === this.args.length &&
                    this.calledWith.apply(this, arguments);
            },

            notCalledWith: function notCalledWith() {
                return !this.calledWith.apply(this, arguments);
            },

            notCalledWithMatch: function notCalledWithMatch() {
                return !this.calledWithMatch.apply(this, arguments);
            },

            returned: function returned(value) {
                return sinon.deepEqual(value, this.returnValue);
            },

            threw: function threw(error) {
                if (typeof error === "undefined" || !this.exception) {
                    return !!this.exception;
                }

                return this.exception === error || this.exception.name === error;
            },

            calledWithNew: function calledWithNew() {
                return this.proxy.prototype && this.thisValue instanceof this.proxy;
            },

            calledBefore: function (other) {
                return this.callId < other.callId;
            },

            calledAfter: function (other) {
                return this.callId > other.callId;
            },

            callArg: function (pos) {
                this.args[pos]();
            },

            callArgOn: function (pos, thisValue) {
                this.args[pos].apply(thisValue);
            },

            callArgWith: function (pos) {
                this.callArgOnWith.apply(this, [pos, null].concat(slice.call(arguments, 1)));
            },

            callArgOnWith: function (pos, thisValue) {
                var args = slice.call(arguments, 2);
                this.args[pos].apply(thisValue, args);
            },

            "yield": function () {
                this.yieldOn.apply(this, [null].concat(slice.call(arguments, 0)));
            },

            yieldOn: function (thisValue) {
                var args = this.args;
                for (var i = 0, l = args.length; i < l; ++i) {
                    if (typeof args[i] === "function") {
                        args[i].apply(thisValue, slice.call(arguments, 1));
                        return;
                    }
                }
                throwYieldError(this.proxy, " cannot yield since no callback was passed.", args);
            },

            yieldTo: function (prop) {
                this.yieldToOn.apply(this, [prop, null].concat(slice.call(arguments, 1)));
            },

            yieldToOn: function (prop, thisValue) {
                var args = this.args;
                for (var i = 0, l = args.length; i < l; ++i) {
                    if (args[i] && typeof args[i][prop] === "function") {
                        args[i][prop].apply(thisValue, slice.call(arguments, 2));
                        return;
                    }
                }
                throwYieldError(this.proxy, " cannot yield to '" + prop +
                    "' since no callback was passed.", args);
            },

            getStackFrames: function () {
                // Omit the error message and the two top stack frames in sinon itself:
                return this.stack && this.stack.split("\n").slice(3);
            },

            toString: function () {
                var callStr = this.proxy.toString() + "(";
                var args = [];

                for (var i = 0, l = this.args.length; i < l; ++i) {
                    args.push(sinon.format(this.args[i]));
                }

                callStr = callStr + args.join(", ") + ")";

                if (typeof this.returnValue !== "undefined") {
                    callStr += " => " + sinon.format(this.returnValue);
                }

                if (this.exception) {
                    callStr += " !" + this.exception.name;

                    if (this.exception.message) {
                        callStr += "(" + this.exception.message + ")";
                    }
                }
                if (this.stack) {
                    callStr += this.getStackFrames()[0].replace(/^\s*(?:at\s+|@)?/, " at ");

                }

                return callStr;
            }
        };

        callProto.invokeCallback = callProto.yield;

        function createSpyCall(spy, thisValue, args, returnValue, exception, id, stack) {
            if (typeof id !== "number") {
                throw new TypeError("Call id is not a number");
            }
            var proxyCall = sinon.create(callProto);
            proxyCall.proxy = spy;
            proxyCall.thisValue = thisValue;
            proxyCall.args = args;
            proxyCall.returnValue = returnValue;
            proxyCall.exception = exception;
            proxyCall.callId = id;
            proxyCall.stack = stack;

            return proxyCall;
        }
        createSpyCall.toString = callProto.toString; // used by mocks

        sinon.spyCall = createSpyCall;
        return createSpyCall;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./match");
        require("./format");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./format":63,"./match":65,"./util/core":74}],61:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend spy.js
 * @depend stub.js
 * @depend mock.js
 */
/**
 * Collections of stubs, spies and mocks.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    var push = [].push;
    var hasOwnProperty = Object.prototype.hasOwnProperty;

    function getFakes(fakeCollection) {
        if (!fakeCollection.fakes) {
            fakeCollection.fakes = [];
        }

        return fakeCollection.fakes;
    }

    function each(fakeCollection, method) {
        var fakes = getFakes(fakeCollection);

        for (var i = 0, l = fakes.length; i < l; i += 1) {
            if (typeof fakes[i][method] === "function") {
                fakes[i][method]();
            }
        }
    }

    function compact(fakeCollection) {
        var fakes = getFakes(fakeCollection);
        var i = 0;
        while (i < fakes.length) {
            fakes.splice(i, 1);
        }
    }

    function makeApi(sinon) {
        var collection = {
            verify: function resolve() {
                each(this, "verify");
            },

            restore: function restore() {
                each(this, "restore");
                compact(this);
            },

            reset: function restore() {
                each(this, "reset");
            },

            verifyAndRestore: function verifyAndRestore() {
                var exception;

                try {
                    this.verify();
                } catch (e) {
                    exception = e;
                }

                this.restore();

                if (exception) {
                    throw exception;
                }
            },

            add: function add(fake) {
                push.call(getFakes(this), fake);
                return fake;
            },

            spy: function spy() {
                return this.add(sinon.spy.apply(sinon, arguments));
            },

            stub: function stub(object, property, value) {
                if (property) {
                    var original = object[property];

                    if (typeof original !== "function") {
                        if (!hasOwnProperty.call(object, property)) {
                            throw new TypeError("Cannot stub non-existent own property " + property);
                        }

                        object[property] = value;

                        return this.add({
                            restore: function () {
                                object[property] = original;
                            }
                        });
                    }
                }
                if (!property && !!object && typeof object === "object") {
                    var stubbedObj = sinon.stub.apply(sinon, arguments);

                    for (var prop in stubbedObj) {
                        if (typeof stubbedObj[prop] === "function") {
                            this.add(stubbedObj[prop]);
                        }
                    }

                    return stubbedObj;
                }

                return this.add(sinon.stub.apply(sinon, arguments));
            },

            mock: function mock() {
                return this.add(sinon.mock.apply(sinon, arguments));
            },

            inject: function inject(obj) {
                var col = this;

                obj.spy = function () {
                    return col.spy.apply(col, arguments);
                };

                obj.stub = function () {
                    return col.stub.apply(col, arguments);
                };

                obj.mock = function () {
                    return col.mock.apply(col, arguments);
                };

                return obj;
            }
        };

        sinon.collection = collection;
        return collection;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./mock");
        require("./spy");
        require("./stub");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./mock":66,"./spy":68,"./stub":69,"./util/core":74}],62:[function(require,module,exports){
/**
 * @depend util/core.js
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {

        // Adapted from https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug
        var hasDontEnumBug = (function () {
            var obj = {
                constructor: function () {
                    return "0";
                },
                toString: function () {
                    return "1";
                },
                valueOf: function () {
                    return "2";
                },
                toLocaleString: function () {
                    return "3";
                },
                prototype: function () {
                    return "4";
                },
                isPrototypeOf: function () {
                    return "5";
                },
                propertyIsEnumerable: function () {
                    return "6";
                },
                hasOwnProperty: function () {
                    return "7";
                },
                length: function () {
                    return "8";
                },
                unique: function () {
                    return "9";
                }
            };

            var result = [];
            for (var prop in obj) {
                if (obj.hasOwnProperty(prop)) {
                    result.push(obj[prop]());
                }
            }
            return result.join("") !== "0123456789";
        })();

        /* Public: Extend target in place with all (own) properties from sources in-order. Thus, last source will
         *         override properties in previous sources.
         *
         * target - The Object to extend
         * sources - Objects to copy properties from.
         *
         * Returns the extended target
         */
        function extend(target /*, sources */) {
            var sources = Array.prototype.slice.call(arguments, 1);
            var source, i, prop;

            for (i = 0; i < sources.length; i++) {
                source = sources[i];

                for (prop in source) {
                    if (source.hasOwnProperty(prop)) {
                        target[prop] = source[prop];
                    }
                }

                // Make sure we copy (own) toString method even when in JScript with DontEnum bug
                // See https://developer.mozilla.org/en/docs/ECMAScript_DontEnum_attribute#JScript_DontEnum_Bug
                if (hasDontEnumBug && source.hasOwnProperty("toString") && source.toString !== target.toString) {
                    target.toString = source.toString;
                }
            }

            return target;
        }

        sinon.extend = extend;
        return sinon.extend;
    }

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        module.exports = makeApi(sinon);
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./util/core":74}],63:[function(require,module,exports){
/**
 * @depend util/core.js
 */
/**
 * Format functions
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2014 Christian Johansen
 */
(function (sinonGlobal, formatio) {
    "use strict";

    function makeApi(sinon) {
        function valueFormatter(value) {
            return "" + value;
        }

        function getFormatioFormatter() {
            var formatter = formatio.configure({
                    quoteStrings: false,
                    limitChildrenCount: 250
                });

            function format() {
                return formatter.ascii.apply(formatter, arguments);
            }

            return format;
        }

        function getNodeFormatter() {
            try {
                var util = require("util");
            } catch (e) {
                /* Node, but no util module - would be very old, but better safe than sorry */
            }

            function format(v) {
                var isObjectWithNativeToString = typeof v === "object" && v.toString === Object.prototype.toString;
                return isObjectWithNativeToString ? util.inspect(v) : v;
            }

            return util ? format : valueFormatter;
        }

        var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
        var formatter;

        if (isNode) {
            try {
                formatio = require("formatio");
            }
            catch (e) {} // eslint-disable-line no-empty
        }

        if (formatio) {
            formatter = getFormatioFormatter();
        } else if (isNode) {
            formatter = getNodeFormatter();
        } else {
            formatter = valueFormatter;
        }

        sinon.format = formatter;
        return sinon.format;
    }

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        module.exports = makeApi(sinon);
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon, // eslint-disable-line no-undef
    typeof formatio === "object" && formatio // eslint-disable-line no-undef
));

},{"./util/core":74,"formatio":81,"util":9}],64:[function(require,module,exports){
/**
 * @depend util/core.js
 */
/**
 * Logs errors
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2014 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    // cache a reference to setTimeout, so that our reference won't be stubbed out
    // when using fake timers and errors will still get logged
    // https://github.com/cjohansen/Sinon.JS/issues/381
    var realSetTimeout = setTimeout;

    function makeApi(sinon) {

        function log() {}

        function logError(label, err) {
            var msg = label + " threw exception: ";

            sinon.log(msg + "[" + err.name + "] " + err.message);

            if (err.stack) {
                sinon.log(err.stack);
            }

            logError.setTimeout(function () {
                err.message = msg + err.message;
                throw err;
            }, 0);
        }

        // wrap realSetTimeout with something we can stub in tests
        logError.setTimeout = function (func, timeout) {
            realSetTimeout(func, timeout);
        };

        var exports = {};
        exports.log = sinon.log = log;
        exports.logError = sinon.logError = logError;

        return exports;
    }

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        module.exports = makeApi(sinon);
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./util/core":74}],65:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend typeOf.js
 */
/*jslint eqeqeq: false, onevar: false, plusplus: false*/
/*global module, require, sinon*/
/**
 * Match functions
 *
 * @author Maximilian Antoni (mail@maxantoni.de)
 * @license BSD
 *
 * Copyright (c) 2012 Maximilian Antoni
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        function assertType(value, type, name) {
            var actual = sinon.typeOf(value);
            if (actual !== type) {
                throw new TypeError("Expected type of " + name + " to be " +
                    type + ", but was " + actual);
            }
        }

        var matcher = {
            toString: function () {
                return this.message;
            }
        };

        function isMatcher(object) {
            return matcher.isPrototypeOf(object);
        }

        function matchObject(expectation, actual) {
            if (actual === null || actual === undefined) {
                return false;
            }
            for (var key in expectation) {
                if (expectation.hasOwnProperty(key)) {
                    var exp = expectation[key];
                    var act = actual[key];
                    if (isMatcher(exp)) {
                        if (!exp.test(act)) {
                            return false;
                        }
                    } else if (sinon.typeOf(exp) === "object") {
                        if (!matchObject(exp, act)) {
                            return false;
                        }
                    } else if (!sinon.deepEqual(exp, act)) {
                        return false;
                    }
                }
            }
            return true;
        }

        function match(expectation, message) {
            var m = sinon.create(matcher);
            var type = sinon.typeOf(expectation);
            switch (type) {
            case "object":
                if (typeof expectation.test === "function") {
                    m.test = function (actual) {
                        return expectation.test(actual) === true;
                    };
                    m.message = "match(" + sinon.functionName(expectation.test) + ")";
                    return m;
                }
                var str = [];
                for (var key in expectation) {
                    if (expectation.hasOwnProperty(key)) {
                        str.push(key + ": " + expectation[key]);
                    }
                }
                m.test = function (actual) {
                    return matchObject(expectation, actual);
                };
                m.message = "match(" + str.join(", ") + ")";
                break;
            case "number":
                m.test = function (actual) {
                    // we need type coercion here
                    return expectation == actual; // eslint-disable-line eqeqeq
                };
                break;
            case "string":
                m.test = function (actual) {
                    if (typeof actual !== "string") {
                        return false;
                    }
                    return actual.indexOf(expectation) !== -1;
                };
                m.message = "match(\"" + expectation + "\")";
                break;
            case "regexp":
                m.test = function (actual) {
                    if (typeof actual !== "string") {
                        return false;
                    }
                    return expectation.test(actual);
                };
                break;
            case "function":
                m.test = expectation;
                if (message) {
                    m.message = message;
                } else {
                    m.message = "match(" + sinon.functionName(expectation) + ")";
                }
                break;
            default:
                m.test = function (actual) {
                    return sinon.deepEqual(expectation, actual);
                };
            }
            if (!m.message) {
                m.message = "match(" + expectation + ")";
            }
            return m;
        }

        matcher.or = function (m2) {
            if (!arguments.length) {
                throw new TypeError("Matcher expected");
            } else if (!isMatcher(m2)) {
                m2 = match(m2);
            }
            var m1 = this;
            var or = sinon.create(matcher);
            or.test = function (actual) {
                return m1.test(actual) || m2.test(actual);
            };
            or.message = m1.message + ".or(" + m2.message + ")";
            return or;
        };

        matcher.and = function (m2) {
            if (!arguments.length) {
                throw new TypeError("Matcher expected");
            } else if (!isMatcher(m2)) {
                m2 = match(m2);
            }
            var m1 = this;
            var and = sinon.create(matcher);
            and.test = function (actual) {
                return m1.test(actual) && m2.test(actual);
            };
            and.message = m1.message + ".and(" + m2.message + ")";
            return and;
        };

        match.isMatcher = isMatcher;

        match.any = match(function () {
            return true;
        }, "any");

        match.defined = match(function (actual) {
            return actual !== null && actual !== undefined;
        }, "defined");

        match.truthy = match(function (actual) {
            return !!actual;
        }, "truthy");

        match.falsy = match(function (actual) {
            return !actual;
        }, "falsy");

        match.same = function (expectation) {
            return match(function (actual) {
                return expectation === actual;
            }, "same(" + expectation + ")");
        };

        match.typeOf = function (type) {
            assertType(type, "string", "type");
            return match(function (actual) {
                return sinon.typeOf(actual) === type;
            }, "typeOf(\"" + type + "\")");
        };

        match.instanceOf = function (type) {
            assertType(type, "function", "type");
            return match(function (actual) {
                return actual instanceof type;
            }, "instanceOf(" + sinon.functionName(type) + ")");
        };

        function createPropertyMatcher(propertyTest, messagePrefix) {
            return function (property, value) {
                assertType(property, "string", "property");
                var onlyProperty = arguments.length === 1;
                var message = messagePrefix + "(\"" + property + "\"";
                if (!onlyProperty) {
                    message += ", " + value;
                }
                message += ")";
                return match(function (actual) {
                    if (actual === undefined || actual === null ||
                            !propertyTest(actual, property)) {
                        return false;
                    }
                    return onlyProperty || sinon.deepEqual(value, actual[property]);
                }, message);
            };
        }

        match.has = createPropertyMatcher(function (actual, property) {
            if (typeof actual === "object") {
                return property in actual;
            }
            return actual[property] !== undefined;
        }, "has");

        match.hasOwn = createPropertyMatcher(function (actual, property) {
            return actual.hasOwnProperty(property);
        }, "hasOwn");

        match.bool = match.typeOf("boolean");
        match.number = match.typeOf("number");
        match.string = match.typeOf("string");
        match.object = match.typeOf("object");
        match.func = match.typeOf("function");
        match.array = match.typeOf("array");
        match.regexp = match.typeOf("regexp");
        match.date = match.typeOf("date");

        sinon.match = match;
        return match;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./typeOf");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./typeOf":73,"./util/core":74}],66:[function(require,module,exports){
/**
 * @depend times_in_words.js
 * @depend util/core.js
 * @depend call.js
 * @depend extend.js
 * @depend match.js
 * @depend spy.js
 * @depend stub.js
 * @depend format.js
 */
/**
 * Mock functions.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        var push = [].push;
        var match = sinon.match;

        function mock(object) {
            // if (typeof console !== undefined && console.warn) {
            //     console.warn("mock will be removed from Sinon.JS v2.0");
            // }

            if (!object) {
                return sinon.expectation.create("Anonymous mock");
            }

            return mock.create(object);
        }

        function each(collection, callback) {
            if (!collection) {
                return;
            }

            for (var i = 0, l = collection.length; i < l; i += 1) {
                callback(collection[i]);
            }
        }

        function arrayEquals(arr1, arr2, compareLength) {
            if (compareLength && (arr1.length !== arr2.length)) {
                return false;
            }

            for (var i = 0, l = arr1.length; i < l; i++) {
                if (!sinon.deepEqual(arr1[i], arr2[i])) {
                    return false;
                }
            }
            return true;
        }

        sinon.extend(mock, {
            create: function create(object) {
                if (!object) {
                    throw new TypeError("object is null");
                }

                var mockObject = sinon.extend({}, mock);
                mockObject.object = object;
                delete mockObject.create;

                return mockObject;
            },

            expects: function expects(method) {
                if (!method) {
                    throw new TypeError("method is falsy");
                }

                if (!this.expectations) {
                    this.expectations = {};
                    this.proxies = [];
                }

                if (!this.expectations[method]) {
                    this.expectations[method] = [];
                    var mockObject = this;

                    sinon.wrapMethod(this.object, method, function () {
                        return mockObject.invokeMethod(method, this, arguments);
                    });

                    push.call(this.proxies, method);
                }

                var expectation = sinon.expectation.create(method);
                push.call(this.expectations[method], expectation);

                return expectation;
            },

            restore: function restore() {
                var object = this.object;

                each(this.proxies, function (proxy) {
                    if (typeof object[proxy].restore === "function") {
                        object[proxy].restore();
                    }
                });
            },

            verify: function verify() {
                var expectations = this.expectations || {};
                var messages = [];
                var met = [];

                each(this.proxies, function (proxy) {
                    each(expectations[proxy], function (expectation) {
                        if (!expectation.met()) {
                            push.call(messages, expectation.toString());
                        } else {
                            push.call(met, expectation.toString());
                        }
                    });
                });

                this.restore();

                if (messages.length > 0) {
                    sinon.expectation.fail(messages.concat(met).join("\n"));
                } else if (met.length > 0) {
                    sinon.expectation.pass(messages.concat(met).join("\n"));
                }

                return true;
            },

            invokeMethod: function invokeMethod(method, thisValue, args) {
                var expectations = this.expectations && this.expectations[method] ? this.expectations[method] : [];
                var expectationsWithMatchingArgs = [];
                var currentArgs = args || [];
                var i, available;

                for (i = 0; i < expectations.length; i += 1) {
                    var expectedArgs = expectations[i].expectedArguments || [];
                    if (arrayEquals(expectedArgs, currentArgs, expectations[i].expectsExactArgCount)) {
                        expectationsWithMatchingArgs.push(expectations[i]);
                    }
                }

                for (i = 0; i < expectationsWithMatchingArgs.length; i += 1) {
                    if (!expectationsWithMatchingArgs[i].met() &&
                        expectationsWithMatchingArgs[i].allowsCall(thisValue, args)) {
                        return expectationsWithMatchingArgs[i].apply(thisValue, args);
                    }
                }

                var messages = [];
                var exhausted = 0;

                for (i = 0; i < expectationsWithMatchingArgs.length; i += 1) {
                    if (expectationsWithMatchingArgs[i].allowsCall(thisValue, args)) {
                        available = available || expectationsWithMatchingArgs[i];
                    } else {
                        exhausted += 1;
                    }
                }

                if (available && exhausted === 0) {
                    return available.apply(thisValue, args);
                }

                for (i = 0; i < expectations.length; i += 1) {
                    push.call(messages, "    " + expectations[i].toString());
                }

                messages.unshift("Unexpected call: " + sinon.spyCall.toString.call({
                    proxy: method,
                    args: args
                }));

                sinon.expectation.fail(messages.join("\n"));
            }
        });

        var times = sinon.timesInWords;
        var slice = Array.prototype.slice;

        function callCountInWords(callCount) {
            if (callCount === 0) {
                return "never called";
            }

            return "called " + times(callCount);
        }

        function expectedCallCountInWords(expectation) {
            var min = expectation.minCalls;
            var max = expectation.maxCalls;

            if (typeof min === "number" && typeof max === "number") {
                var str = times(min);

                if (min !== max) {
                    str = "at least " + str + " and at most " + times(max);
                }

                return str;
            }

            if (typeof min === "number") {
                return "at least " + times(min);
            }

            return "at most " + times(max);
        }

        function receivedMinCalls(expectation) {
            var hasMinLimit = typeof expectation.minCalls === "number";
            return !hasMinLimit || expectation.callCount >= expectation.minCalls;
        }

        function receivedMaxCalls(expectation) {
            if (typeof expectation.maxCalls !== "number") {
                return false;
            }

            return expectation.callCount === expectation.maxCalls;
        }

        function verifyMatcher(possibleMatcher, arg) {
            var isMatcher = match && match.isMatcher(possibleMatcher);

            return isMatcher && possibleMatcher.test(arg) || true;
        }

        sinon.expectation = {
            minCalls: 1,
            maxCalls: 1,

            create: function create(methodName) {
                var expectation = sinon.extend(sinon.stub.create(), sinon.expectation);
                delete expectation.create;
                expectation.method = methodName;

                return expectation;
            },

            invoke: function invoke(func, thisValue, args) {
                this.verifyCallAllowed(thisValue, args);

                return sinon.spy.invoke.apply(this, arguments);
            },

            atLeast: function atLeast(num) {
                if (typeof num !== "number") {
                    throw new TypeError("'" + num + "' is not number");
                }

                if (!this.limitsSet) {
                    this.maxCalls = null;
                    this.limitsSet = true;
                }

                this.minCalls = num;

                return this;
            },

            atMost: function atMost(num) {
                if (typeof num !== "number") {
                    throw new TypeError("'" + num + "' is not number");
                }

                if (!this.limitsSet) {
                    this.minCalls = null;
                    this.limitsSet = true;
                }

                this.maxCalls = num;

                return this;
            },

            never: function never() {
                return this.exactly(0);
            },

            once: function once() {
                return this.exactly(1);
            },

            twice: function twice() {
                return this.exactly(2);
            },

            thrice: function thrice() {
                return this.exactly(3);
            },

            exactly: function exactly(num) {
                if (typeof num !== "number") {
                    throw new TypeError("'" + num + "' is not a number");
                }

                this.atLeast(num);
                return this.atMost(num);
            },

            met: function met() {
                return !this.failed && receivedMinCalls(this);
            },

            verifyCallAllowed: function verifyCallAllowed(thisValue, args) {
                if (receivedMaxCalls(this)) {
                    this.failed = true;
                    sinon.expectation.fail(this.method + " already called " + times(this.maxCalls));
                }

                if ("expectedThis" in this && this.expectedThis !== thisValue) {
                    sinon.expectation.fail(this.method + " called with " + thisValue + " as thisValue, expected " +
                        this.expectedThis);
                }

                if (!("expectedArguments" in this)) {
                    return;
                }

                if (!args) {
                    sinon.expectation.fail(this.method + " received no arguments, expected " +
                        sinon.format(this.expectedArguments));
                }

                if (args.length < this.expectedArguments.length) {
                    sinon.expectation.fail(this.method + " received too few arguments (" + sinon.format(args) +
                        "), expected " + sinon.format(this.expectedArguments));
                }

                if (this.expectsExactArgCount &&
                    args.length !== this.expectedArguments.length) {
                    sinon.expectation.fail(this.method + " received too many arguments (" + sinon.format(args) +
                        "), expected " + sinon.format(this.expectedArguments));
                }

                for (var i = 0, l = this.expectedArguments.length; i < l; i += 1) {

                    if (!verifyMatcher(this.expectedArguments[i], args[i])) {
                        sinon.expectation.fail(this.method + " received wrong arguments " + sinon.format(args) +
                            ", didn't match " + this.expectedArguments.toString());
                    }

                    if (!sinon.deepEqual(this.expectedArguments[i], args[i])) {
                        sinon.expectation.fail(this.method + " received wrong arguments " + sinon.format(args) +
                            ", expected " + sinon.format(this.expectedArguments));
                    }
                }
            },

            allowsCall: function allowsCall(thisValue, args) {
                if (this.met() && receivedMaxCalls(this)) {
                    return false;
                }

                if ("expectedThis" in this && this.expectedThis !== thisValue) {
                    return false;
                }

                if (!("expectedArguments" in this)) {
                    return true;
                }

                args = args || [];

                if (args.length < this.expectedArguments.length) {
                    return false;
                }

                if (this.expectsExactArgCount &&
                    args.length !== this.expectedArguments.length) {
                    return false;
                }

                for (var i = 0, l = this.expectedArguments.length; i < l; i += 1) {
                    if (!verifyMatcher(this.expectedArguments[i], args[i])) {
                        return false;
                    }

                    if (!sinon.deepEqual(this.expectedArguments[i], args[i])) {
                        return false;
                    }
                }

                return true;
            },

            withArgs: function withArgs() {
                this.expectedArguments = slice.call(arguments);
                return this;
            },

            withExactArgs: function withExactArgs() {
                this.withArgs.apply(this, arguments);
                this.expectsExactArgCount = true;
                return this;
            },

            on: function on(thisValue) {
                this.expectedThis = thisValue;
                return this;
            },

            toString: function () {
                var args = (this.expectedArguments || []).slice();

                if (!this.expectsExactArgCount) {
                    push.call(args, "[...]");
                }

                var callStr = sinon.spyCall.toString.call({
                    proxy: this.method || "anonymous mock expectation",
                    args: args
                });

                var message = callStr.replace(", [...", "[, ...") + " " +
                    expectedCallCountInWords(this);

                if (this.met()) {
                    return "Expectation met: " + message;
                }

                return "Expected " + message + " (" +
                    callCountInWords(this.callCount) + ")";
            },

            verify: function verify() {
                if (!this.met()) {
                    sinon.expectation.fail(this.toString());
                } else {
                    sinon.expectation.pass(this.toString());
                }

                return true;
            },

            pass: function pass(message) {
                sinon.assert.pass(message);
            },

            fail: function fail(message) {
                var exception = new Error(message);
                exception.name = "ExpectationError";

                throw exception;
            }
        };

        sinon.mock = mock;
        return mock;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./times_in_words");
        require("./call");
        require("./extend");
        require("./match");
        require("./spy");
        require("./stub");
        require("./format");

        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./call":60,"./extend":62,"./format":63,"./match":65,"./spy":68,"./stub":69,"./times_in_words":72,"./util/core":74}],67:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend extend.js
 * @depend collection.js
 * @depend util/fake_timers.js
 * @depend util/fake_server_with_clock.js
 */
/**
 * Manages fake collections as well as fake utilities such as Sinon's
 * timers and fake XHR implementation in one convenient object.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        var push = [].push;

        function exposeValue(sandbox, config, key, value) {
            if (!value) {
                return;
            }

            if (config.injectInto && !(key in config.injectInto)) {
                config.injectInto[key] = value;
                sandbox.injectedKeys.push(key);
            } else {
                push.call(sandbox.args, value);
            }
        }

        function prepareSandboxFromConfig(config) {
            var sandbox = sinon.create(sinon.sandbox);

            if (config.useFakeServer) {
                if (typeof config.useFakeServer === "object") {
                    sandbox.serverPrototype = config.useFakeServer;
                }

                sandbox.useFakeServer();
            }

            if (config.useFakeTimers) {
                if (typeof config.useFakeTimers === "object") {
                    sandbox.useFakeTimers.apply(sandbox, config.useFakeTimers);
                } else {
                    sandbox.useFakeTimers();
                }
            }

            return sandbox;
        }

        sinon.sandbox = sinon.extend(sinon.create(sinon.collection), {
            useFakeTimers: function useFakeTimers() {
                this.clock = sinon.useFakeTimers.apply(sinon, arguments);

                return this.add(this.clock);
            },

            serverPrototype: sinon.fakeServer,

            useFakeServer: function useFakeServer() {
                var proto = this.serverPrototype || sinon.fakeServer;

                if (!proto || !proto.create) {
                    return null;
                }

                this.server = proto.create();
                return this.add(this.server);
            },

            inject: function (obj) {
                sinon.collection.inject.call(this, obj);

                if (this.clock) {
                    obj.clock = this.clock;
                }

                if (this.server) {
                    obj.server = this.server;
                    obj.requests = this.server.requests;
                }

                obj.match = sinon.match;

                return obj;
            },

            restore: function () {
                sinon.collection.restore.apply(this, arguments);
                this.restoreContext();
            },

            restoreContext: function () {
                if (this.injectedKeys) {
                    for (var i = 0, j = this.injectedKeys.length; i < j; i++) {
                        delete this.injectInto[this.injectedKeys[i]];
                    }
                    this.injectedKeys = [];
                }
            },

            create: function (config) {
                if (!config) {
                    return sinon.create(sinon.sandbox);
                }

                var sandbox = prepareSandboxFromConfig(config);
                sandbox.args = sandbox.args || [];
                sandbox.injectedKeys = [];
                sandbox.injectInto = config.injectInto;
                var prop,
                    value;
                var exposed = sandbox.inject({});

                if (config.properties) {
                    for (var i = 0, l = config.properties.length; i < l; i++) {
                        prop = config.properties[i];
                        value = exposed[prop] || prop === "sandbox" && sandbox;
                        exposeValue(sandbox, config, prop, value);
                    }
                } else {
                    exposeValue(sandbox, config, "sandbox", value);
                }

                return sandbox;
            },

            match: sinon.match
        });

        sinon.sandbox.useFakeXMLHttpRequest = sinon.sandbox.useFakeServer;

        return sinon.sandbox;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./util/core");
        require("./extend");
        require("./util/fake_server_with_clock");
        require("./util/fake_timers");
        require("./collection");
        module.exports = makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./collection":61,"./extend":62,"./util/core":74,"./util/fake_server_with_clock":77,"./util/fake_timers":78}],68:[function(require,module,exports){
/**
  * @depend times_in_words.js
  * @depend util/core.js
  * @depend extend.js
  * @depend call.js
  * @depend format.js
  */
/**
  * Spy functions
  *
  * @author Christian Johansen (christian@cjohansen.no)
  * @license BSD
  *
  * Copyright (c) 2010-2013 Christian Johansen
  */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        var push = Array.prototype.push;
        var slice = Array.prototype.slice;
        var callId = 0;

        function spy(object, property, types) {
            if (!property && typeof object === "function") {
                return spy.create(object);
            }

            if (!object && !property) {
                return spy.create(function () { });
            }

            if (types) {
                var methodDesc = sinon.getPropertyDescriptor(object, property);
                for (var i = 0; i < types.length; i++) {
                    methodDesc[types[i]] = spy.create(methodDesc[types[i]]);
                }
                return sinon.wrapMethod(object, property, methodDesc);
            }

            return sinon.wrapMethod(object, property, spy.create(object[property]));
        }

        function matchingFake(fakes, args, strict) {
            if (!fakes) {
                return undefined;
            }

            for (var i = 0, l = fakes.length; i < l; i++) {
                if (fakes[i].matches(args, strict)) {
                    return fakes[i];
                }
            }
        }

        function incrementCallCount() {
            this.called = true;
            this.callCount += 1;
            this.notCalled = false;
            this.calledOnce = this.callCount === 1;
            this.calledTwice = this.callCount === 2;
            this.calledThrice = this.callCount === 3;
        }

        function createCallProperties() {
            this.firstCall = this.getCall(0);
            this.secondCall = this.getCall(1);
            this.thirdCall = this.getCall(2);
            this.lastCall = this.getCall(this.callCount - 1);
        }

        var vars = "a,b,c,d,e,f,g,h,i,j,k,l";
        function createProxy(func, proxyLength) {
            // Retain the function length:
            var p;
            if (proxyLength) {
                eval("p = (function proxy(" + vars.substring(0, proxyLength * 2 - 1) + // eslint-disable-line no-eval
                    ") { return p.invoke(func, this, slice.call(arguments)); });");
            } else {
                p = function proxy() {
                    return p.invoke(func, this, slice.call(arguments));
                };
            }
            p.isSinonProxy = true;
            return p;
        }

        var uuid = 0;

        // Public API
        var spyApi = {
            reset: function () {
                if (this.invoking) {
                    var err = new Error("Cannot reset Sinon function while invoking it. " +
                                        "Move the call to .reset outside of the callback.");
                    err.name = "InvalidResetException";
                    throw err;
                }

                this.called = false;
                this.notCalled = true;
                this.calledOnce = false;
                this.calledTwice = false;
                this.calledThrice = false;
                this.callCount = 0;
                this.firstCall = null;
                this.secondCall = null;
                this.thirdCall = null;
                this.lastCall = null;
                this.args = [];
                this.returnValues = [];
                this.thisValues = [];
                this.exceptions = [];
                this.callIds = [];
                this.stacks = [];
                if (this.fakes) {
                    for (var i = 0; i < this.fakes.length; i++) {
                        this.fakes[i].reset();
                    }
                }

                return this;
            },

            create: function create(func, spyLength) {
                var name;

                if (typeof func !== "function") {
                    func = function () { };
                } else {
                    name = sinon.functionName(func);
                }

                if (!spyLength) {
                    spyLength = func.length;
                }

                var proxy = createProxy(func, spyLength);

                sinon.extend(proxy, spy);
                delete proxy.create;
                sinon.extend(proxy, func);

                proxy.reset();
                proxy.prototype = func.prototype;
                proxy.displayName = name || "spy";
                proxy.toString = sinon.functionToString;
                proxy.instantiateFake = sinon.spy.create;
                proxy.id = "spy#" + uuid++;

                return proxy;
            },

            invoke: function invoke(func, thisValue, args) {
                var matching = matchingFake(this.fakes, args);
                var exception, returnValue;

                incrementCallCount.call(this);
                push.call(this.thisValues, thisValue);
                push.call(this.args, args);
                push.call(this.callIds, callId++);

                // Make call properties available from within the spied function:
                createCallProperties.call(this);

                try {
                    this.invoking = true;

                    if (matching) {
                        returnValue = matching.invoke(func, thisValue, args);
                    } else {
                        returnValue = (this.func || func).apply(thisValue, args);
                    }

                    var thisCall = this.getCall(this.callCount - 1);
                    if (thisCall.calledWithNew() && typeof returnValue !== "object") {
                        returnValue = thisValue;
                    }
                } catch (e) {
                    exception = e;
                } finally {
                    delete this.invoking;
                }

                push.call(this.exceptions, exception);
                push.call(this.returnValues, returnValue);
                push.call(this.stacks, new Error().stack);

                // Make return value and exception available in the calls:
                createCallProperties.call(this);

                if (exception !== undefined) {
                    throw exception;
                }

                return returnValue;
            },

            named: function named(name) {
                this.displayName = name;
                return this;
            },

            getCall: function getCall(i) {
                if (i < 0 || i >= this.callCount) {
                    return null;
                }

                return sinon.spyCall(this, this.thisValues[i], this.args[i],
                                        this.returnValues[i], this.exceptions[i],
                                        this.callIds[i], this.stacks[i]);
            },

            getCalls: function () {
                var calls = [];
                var i;

                for (i = 0; i < this.callCount; i++) {
                    calls.push(this.getCall(i));
                }

                return calls;
            },

            calledBefore: function calledBefore(spyFn) {
                if (!this.called) {
                    return false;
                }

                if (!spyFn.called) {
                    return true;
                }

                return this.callIds[0] < spyFn.callIds[spyFn.callIds.length - 1];
            },

            calledAfter: function calledAfter(spyFn) {
                if (!this.called || !spyFn.called) {
                    return false;
                }

                return this.callIds[this.callCount - 1] > spyFn.callIds[spyFn.callCount - 1];
            },

            withArgs: function () {
                var args = slice.call(arguments);

                if (this.fakes) {
                    var match = matchingFake(this.fakes, args, true);

                    if (match) {
                        return match;
                    }
                } else {
                    this.fakes = [];
                }

                var original = this;
                var fake = this.instantiateFake();
                fake.matchingAguments = args;
                fake.parent = this;
                push.call(this.fakes, fake);

                fake.withArgs = function () {
                    return original.withArgs.apply(original, arguments);
                };

                for (var i = 0; i < this.args.length; i++) {
                    if (fake.matches(this.args[i])) {
                        incrementCallCount.call(fake);
                        push.call(fake.thisValues, this.thisValues[i]);
                        push.call(fake.args, this.args[i]);
                        push.call(fake.returnValues, this.returnValues[i]);
                        push.call(fake.exceptions, this.exceptions[i]);
                        push.call(fake.callIds, this.callIds[i]);
                    }
                }
                createCallProperties.call(fake);

                return fake;
            },

            matches: function (args, strict) {
                var margs = this.matchingAguments;

                if (margs.length <= args.length &&
                    sinon.deepEqual(margs, args.slice(0, margs.length))) {
                    return !strict || margs.length === args.length;
                }
            },

            printf: function (format) {
                var spyInstance = this;
                var args = slice.call(arguments, 1);
                var formatter;

                return (format || "").replace(/%(.)/g, function (match, specifyer) {
                    formatter = spyApi.formatters[specifyer];

                    if (typeof formatter === "function") {
                        return formatter.call(null, spyInstance, args);
                    } else if (!isNaN(parseInt(specifyer, 10))) {
                        return sinon.format(args[specifyer - 1]);
                    }

                    return "%" + specifyer;
                });
            }
        };

        function delegateToCalls(method, matchAny, actual, notCalled) {
            spyApi[method] = function () {
                if (!this.called) {
                    if (notCalled) {
                        return notCalled.apply(this, arguments);
                    }
                    return false;
                }

                var currentCall;
                var matches = 0;

                for (var i = 0, l = this.callCount; i < l; i += 1) {
                    currentCall = this.getCall(i);

                    if (currentCall[actual || method].apply(currentCall, arguments)) {
                        matches += 1;

                        if (matchAny) {
                            return true;
                        }
                    }
                }

                return matches === this.callCount;
            };
        }

        delegateToCalls("calledOn", true);
        delegateToCalls("alwaysCalledOn", false, "calledOn");
        delegateToCalls("calledWith", true);
        delegateToCalls("calledWithMatch", true);
        delegateToCalls("alwaysCalledWith", false, "calledWith");
        delegateToCalls("alwaysCalledWithMatch", false, "calledWithMatch");
        delegateToCalls("calledWithExactly", true);
        delegateToCalls("alwaysCalledWithExactly", false, "calledWithExactly");
        delegateToCalls("neverCalledWith", false, "notCalledWith", function () {
            return true;
        });
        delegateToCalls("neverCalledWithMatch", false, "notCalledWithMatch", function () {
            return true;
        });
        delegateToCalls("threw", true);
        delegateToCalls("alwaysThrew", false, "threw");
        delegateToCalls("returned", true);
        delegateToCalls("alwaysReturned", false, "returned");
        delegateToCalls("calledWithNew", true);
        delegateToCalls("alwaysCalledWithNew", false, "calledWithNew");
        delegateToCalls("callArg", false, "callArgWith", function () {
            throw new Error(this.toString() + " cannot call arg since it was not yet invoked.");
        });
        spyApi.callArgWith = spyApi.callArg;
        delegateToCalls("callArgOn", false, "callArgOnWith", function () {
            throw new Error(this.toString() + " cannot call arg since it was not yet invoked.");
        });
        spyApi.callArgOnWith = spyApi.callArgOn;
        delegateToCalls("yield", false, "yield", function () {
            throw new Error(this.toString() + " cannot yield since it was not yet invoked.");
        });
        // "invokeCallback" is an alias for "yield" since "yield" is invalid in strict mode.
        spyApi.invokeCallback = spyApi.yield;
        delegateToCalls("yieldOn", false, "yieldOn", function () {
            throw new Error(this.toString() + " cannot yield since it was not yet invoked.");
        });
        delegateToCalls("yieldTo", false, "yieldTo", function (property) {
            throw new Error(this.toString() + " cannot yield to '" + property +
                "' since it was not yet invoked.");
        });
        delegateToCalls("yieldToOn", false, "yieldToOn", function (property) {
            throw new Error(this.toString() + " cannot yield to '" + property +
                "' since it was not yet invoked.");
        });

        spyApi.formatters = {
            c: function (spyInstance) {
                return sinon.timesInWords(spyInstance.callCount);
            },

            n: function (spyInstance) {
                return spyInstance.toString();
            },

            C: function (spyInstance) {
                var calls = [];

                for (var i = 0, l = spyInstance.callCount; i < l; ++i) {
                    var stringifiedCall = "    " + spyInstance.getCall(i).toString();
                    if (/\n/.test(calls[i - 1])) {
                        stringifiedCall = "\n" + stringifiedCall;
                    }
                    push.call(calls, stringifiedCall);
                }

                return calls.length > 0 ? "\n" + calls.join("\n") : "";
            },

            t: function (spyInstance) {
                var objects = [];

                for (var i = 0, l = spyInstance.callCount; i < l; ++i) {
                    push.call(objects, sinon.format(spyInstance.thisValues[i]));
                }

                return objects.join(", ");
            },

            "*": function (spyInstance, args) {
                var formatted = [];

                for (var i = 0, l = args.length; i < l; ++i) {
                    push.call(formatted, sinon.format(args[i]));
                }

                return formatted.join(", ");
            }
        };

        sinon.extend(spy, spyApi);

        spy.spyCall = sinon.spyCall;
        sinon.spy = spy;

        return spy;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        require("./call");
        require("./extend");
        require("./times_in_words");
        require("./format");
        module.exports = makeApi(core);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./call":60,"./extend":62,"./format":63,"./times_in_words":72,"./util/core":74}],69:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend extend.js
 * @depend spy.js
 * @depend behavior.js
 */
/**
 * Stub functions
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        function stub(object, property, func) {
            if (!!func && typeof func !== "function" && typeof func !== "object") {
                throw new TypeError("Custom stub should be a function or a property descriptor");
            }

            var wrapper,
                prop;

            if (func) {
                if (typeof func === "function") {
                    wrapper = sinon.spy && sinon.spy.create ? sinon.spy.create(func) : func;
                } else {
                    wrapper = func;
                    if (sinon.spy && sinon.spy.create) {
                        var types = sinon.objectKeys(wrapper);
                        for (var i = 0; i < types.length; i++) {
                            wrapper[types[i]] = sinon.spy.create(wrapper[types[i]]);
                        }
                    }
                }
            } else {
                var stubLength = 0;
                if (typeof object === "object" && typeof object[property] === "function") {
                    stubLength = object[property].length;
                }
                wrapper = stub.create(stubLength);
            }

            if (!object && typeof property === "undefined") {
                return sinon.stub.create();
            }

            if (typeof property === "undefined" && typeof object === "object") {
                for (prop in object) {
                    if (typeof sinon.getPropertyDescriptor(object, prop).value === "function") {
                        stub(object, prop);
                    }
                }

                return object;
            }

            return sinon.wrapMethod(object, property, wrapper);
        }


        /*eslint-disable no-use-before-define*/
        function getParentBehaviour(stubInstance) {
            return (stubInstance.parent && getCurrentBehavior(stubInstance.parent));
        }

        function getDefaultBehavior(stubInstance) {
            return stubInstance.defaultBehavior ||
                    getParentBehaviour(stubInstance) ||
                    sinon.behavior.create(stubInstance);
        }

        function getCurrentBehavior(stubInstance) {
            var behavior = stubInstance.behaviors[stubInstance.callCount - 1];
            return behavior && behavior.isPresent() ? behavior : getDefaultBehavior(stubInstance);
        }
        /*eslint-enable no-use-before-define*/

        var uuid = 0;

        var proto = {
            create: function create(stubLength) {
                var functionStub = function () {
                    return getCurrentBehavior(functionStub).invoke(this, arguments);
                };

                functionStub.id = "stub#" + uuid++;
                var orig = functionStub;
                functionStub = sinon.spy.create(functionStub, stubLength);
                functionStub.func = orig;

                sinon.extend(functionStub, stub);
                functionStub.instantiateFake = sinon.stub.create;
                functionStub.displayName = "stub";
                functionStub.toString = sinon.functionToString;

                functionStub.defaultBehavior = null;
                functionStub.behaviors = [];

                return functionStub;
            },

            resetBehavior: function () {
                var i;

                this.defaultBehavior = null;
                this.behaviors = [];

                delete this.returnValue;
                delete this.returnArgAt;
                this.returnThis = false;

                if (this.fakes) {
                    for (i = 0; i < this.fakes.length; i++) {
                        this.fakes[i].resetBehavior();
                    }
                }
            },

            onCall: function onCall(index) {
                if (!this.behaviors[index]) {
                    this.behaviors[index] = sinon.behavior.create(this);
                }

                return this.behaviors[index];
            },

            onFirstCall: function onFirstCall() {
                return this.onCall(0);
            },

            onSecondCall: function onSecondCall() {
                return this.onCall(1);
            },

            onThirdCall: function onThirdCall() {
                return this.onCall(2);
            }
        };

        function createBehavior(behaviorMethod) {
            return function () {
                this.defaultBehavior = this.defaultBehavior || sinon.behavior.create(this);
                this.defaultBehavior[behaviorMethod].apply(this.defaultBehavior, arguments);
                return this;
            };
        }

        for (var method in sinon.behavior) {
            if (sinon.behavior.hasOwnProperty(method) &&
                !proto.hasOwnProperty(method) &&
                method !== "create" &&
                method !== "withArgs" &&
                method !== "invoke") {
                proto[method] = createBehavior(method);
            }
        }

        sinon.extend(stub, proto);
        sinon.stub = stub;

        return stub;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        require("./behavior");
        require("./spy");
        require("./extend");
        module.exports = makeApi(core);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./behavior":59,"./extend":62,"./spy":68,"./util/core":74}],70:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend sandbox.js
 */
/**
 * Test function, sandboxes fakes
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        var slice = Array.prototype.slice;

        function test(callback) {
            var type = typeof callback;

            if (type !== "function") {
                throw new TypeError("sinon.test needs to wrap a test function, got " + type);
            }

            function sinonSandboxedTest() {
                var config = sinon.getConfig(sinon.config);
                config.injectInto = config.injectIntoThis && this || config.injectInto;
                var sandbox = sinon.sandbox.create(config);
                var args = slice.call(arguments);
                var oldDone = args.length && args[args.length - 1];
                var exception, result;

                if (typeof oldDone === "function") {
                    args[args.length - 1] = function sinonDone(res) {
                        if (res) {
                            sandbox.restore();
                            throw exception;
                        } else {
                            sandbox.verifyAndRestore();
                        }
                        oldDone(res);
                    };
                }

                try {
                    result = callback.apply(this, args.concat(sandbox.args));
                } catch (e) {
                    exception = e;
                }

                if (typeof oldDone !== "function") {
                    if (typeof exception !== "undefined") {
                        sandbox.restore();
                        throw exception;
                    } else {
                        sandbox.verifyAndRestore();
                    }
                }

                return result;
            }

            if (callback.length) {
                return function sinonAsyncSandboxedTest(done) { // eslint-disable-line no-unused-vars
                    return sinonSandboxedTest.apply(this, arguments);
                };
            }

            return sinonSandboxedTest;
        }

        test.config = {
            injectIntoThis: true,
            injectInto: null,
            properties: ["spy", "stub", "mock", "clock", "server", "requests"],
            useFakeTimers: true,
            useFakeServer: true
        };

        sinon.test = test;
        return test;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        require("./sandbox");
        module.exports = makeApi(core);
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require, module.exports, module);
    } else if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(typeof sinon === "object" && sinon || null)); // eslint-disable-line no-undef

},{"./sandbox":67,"./util/core":74}],71:[function(require,module,exports){
/**
 * @depend util/core.js
 * @depend test.js
 */
/**
 * Test case, sandboxes all test functions
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function createTest(property, setUp, tearDown) {
        return function () {
            if (setUp) {
                setUp.apply(this, arguments);
            }

            var exception, result;

            try {
                result = property.apply(this, arguments);
            } catch (e) {
                exception = e;
            }

            if (tearDown) {
                tearDown.apply(this, arguments);
            }

            if (exception) {
                throw exception;
            }

            return result;
        };
    }

    function makeApi(sinon) {
        function testCase(tests, prefix) {
            if (!tests || typeof tests !== "object") {
                throw new TypeError("sinon.testCase needs an object with test functions");
            }

            prefix = prefix || "test";
            var rPrefix = new RegExp("^" + prefix);
            var methods = {};
            var setUp = tests.setUp;
            var tearDown = tests.tearDown;
            var testName,
                property,
                method;

            for (testName in tests) {
                if (tests.hasOwnProperty(testName) && !/^(setUp|tearDown)$/.test(testName)) {
                    property = tests[testName];

                    if (typeof property === "function" && rPrefix.test(testName)) {
                        method = property;

                        if (setUp || tearDown) {
                            method = createTest(property, setUp, tearDown);
                        }

                        methods[testName] = sinon.test(method);
                    } else {
                        methods[testName] = tests[testName];
                    }
                }
            }

            return methods;
        }

        sinon.testCase = testCase;
        return testCase;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        require("./test");
        module.exports = makeApi(core);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./test":70,"./util/core":74}],72:[function(require,module,exports){
/**
 * @depend util/core.js
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {

        function timesInWords(count) {
            switch (count) {
                case 1:
                    return "once";
                case 2:
                    return "twice";
                case 3:
                    return "thrice";
                default:
                    return (count || 0) + " times";
            }
        }

        sinon.timesInWords = timesInWords;
        return sinon.timesInWords;
    }

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        module.exports = makeApi(core);
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./util/core":74}],73:[function(require,module,exports){
/**
 * @depend util/core.js
 */
/**
 * Format functions
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2014 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    function makeApi(sinon) {
        function typeOf(value) {
            if (value === null) {
                return "null";
            } else if (value === undefined) {
                return "undefined";
            }
            var string = Object.prototype.toString.call(value);
            return string.substring(8, string.length - 1).toLowerCase();
        }

        sinon.typeOf = typeOf;
        return sinon.typeOf;
    }

    function loadDependencies(require, exports, module) {
        var core = require("./util/core");
        module.exports = makeApi(core);
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{"./util/core":74}],74:[function(require,module,exports){
/**
 * @depend ../../sinon.js
 */
/**
 * Sinon core utilities. For internal use only.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal) {
    "use strict";

    var div = typeof document !== "undefined" && document.createElement("div");
    var hasOwn = Object.prototype.hasOwnProperty;

    function isDOMNode(obj) {
        var success = false;

        try {
            obj.appendChild(div);
            success = div.parentNode === obj;
        } catch (e) {
            return false;
        } finally {
            try {
                obj.removeChild(div);
            } catch (e) {
                // Remove failed, not much we can do about that
            }
        }

        return success;
    }

    function isElement(obj) {
        return div && obj && obj.nodeType === 1 && isDOMNode(obj);
    }

    function isFunction(obj) {
        return typeof obj === "function" || !!(obj && obj.constructor && obj.call && obj.apply);
    }

    function isReallyNaN(val) {
        return typeof val === "number" && isNaN(val);
    }

    function mirrorProperties(target, source) {
        for (var prop in source) {
            if (!hasOwn.call(target, prop)) {
                target[prop] = source[prop];
            }
        }
    }

    function isRestorable(obj) {
        return typeof obj === "function" && typeof obj.restore === "function" && obj.restore.sinon;
    }

    // Cheap way to detect if we have ES5 support.
    var hasES5Support = "keys" in Object;

    function makeApi(sinon) {
        sinon.wrapMethod = function wrapMethod(object, property, method) {
            if (!object) {
                throw new TypeError("Should wrap property of object");
            }

            if (typeof method !== "function" && typeof method !== "object") {
                throw new TypeError("Method wrapper should be a function or a property descriptor");
            }

            function checkWrappedMethod(wrappedMethod) {
                var error;

                if (!isFunction(wrappedMethod)) {
                    error = new TypeError("Attempted to wrap " + (typeof wrappedMethod) + " property " +
                                        property + " as function");
                } else if (wrappedMethod.restore && wrappedMethod.restore.sinon) {
                    error = new TypeError("Attempted to wrap " + property + " which is already wrapped");
                } else if (wrappedMethod.calledBefore) {
                    var verb = wrappedMethod.returns ? "stubbed" : "spied on";
                    error = new TypeError("Attempted to wrap " + property + " which is already " + verb);
                }

                if (error) {
                    if (wrappedMethod && wrappedMethod.stackTrace) {
                        error.stack += "\n--------------\n" + wrappedMethod.stackTrace;
                    }
                    throw error;
                }
            }

            var error, wrappedMethod, i;

            // IE 8 does not support hasOwnProperty on the window object and Firefox has a problem
            // when using hasOwn.call on objects from other frames.
            var owned = object.hasOwnProperty ? object.hasOwnProperty(property) : hasOwn.call(object, property);

            if (hasES5Support) {
                var methodDesc = (typeof method === "function") ? {value: method} : method;
                var wrappedMethodDesc = sinon.getPropertyDescriptor(object, property);

                if (!wrappedMethodDesc) {
                    error = new TypeError("Attempted to wrap " + (typeof wrappedMethod) + " property " +
                                        property + " as function");
                } else if (wrappedMethodDesc.restore && wrappedMethodDesc.restore.sinon) {
                    error = new TypeError("Attempted to wrap " + property + " which is already wrapped");
                }
                if (error) {
                    if (wrappedMethodDesc && wrappedMethodDesc.stackTrace) {
                        error.stack += "\n--------------\n" + wrappedMethodDesc.stackTrace;
                    }
                    throw error;
                }

                var types = sinon.objectKeys(methodDesc);
                for (i = 0; i < types.length; i++) {
                    wrappedMethod = wrappedMethodDesc[types[i]];
                    checkWrappedMethod(wrappedMethod);
                }

                mirrorProperties(methodDesc, wrappedMethodDesc);
                for (i = 0; i < types.length; i++) {
                    mirrorProperties(methodDesc[types[i]], wrappedMethodDesc[types[i]]);
                }
                Object.defineProperty(object, property, methodDesc);
            } else {
                wrappedMethod = object[property];
                checkWrappedMethod(wrappedMethod);
                object[property] = method;
                method.displayName = property;
            }

            method.displayName = property;

            // Set up a stack trace which can be used later to find what line of
            // code the original method was created on.
            method.stackTrace = (new Error("Stack Trace for original")).stack;

            method.restore = function () {
                // For prototype properties try to reset by delete first.
                // If this fails (ex: localStorage on mobile safari) then force a reset
                // via direct assignment.
                if (!owned) {
                    // In some cases `delete` may throw an error
                    try {
                        delete object[property];
                    } catch (e) {} // eslint-disable-line no-empty
                    // For native code functions `delete` fails without throwing an error
                    // on Chrome < 43, PhantomJS, etc.
                } else if (hasES5Support) {
                    Object.defineProperty(object, property, wrappedMethodDesc);
                }

                // Use strict equality comparison to check failures then force a reset
                // via direct assignment.
                if (object[property] === method) {
                    object[property] = wrappedMethod;
                }
            };

            method.restore.sinon = true;

            if (!hasES5Support) {
                mirrorProperties(method, wrappedMethod);
            }

            return method;
        };

        sinon.create = function create(proto) {
            var F = function () {};
            F.prototype = proto;
            return new F();
        };

        sinon.deepEqual = function deepEqual(a, b) {
            if (sinon.match && sinon.match.isMatcher(a)) {
                return a.test(b);
            }

            if (typeof a !== "object" || typeof b !== "object") {
                return isReallyNaN(a) && isReallyNaN(b) || a === b;
            }

            if (isElement(a) || isElement(b)) {
                return a === b;
            }

            if (a === b) {
                return true;
            }

            if ((a === null && b !== null) || (a !== null && b === null)) {
                return false;
            }

            if (a instanceof RegExp && b instanceof RegExp) {
                return (a.source === b.source) && (a.global === b.global) &&
                    (a.ignoreCase === b.ignoreCase) && (a.multiline === b.multiline);
            }

            var aString = Object.prototype.toString.call(a);
            if (aString !== Object.prototype.toString.call(b)) {
                return false;
            }

            if (aString === "[object Date]") {
                return a.valueOf() === b.valueOf();
            }

            var prop;
            var aLength = 0;
            var bLength = 0;

            if (aString === "[object Array]" && a.length !== b.length) {
                return false;
            }

            for (prop in a) {
                if (a.hasOwnProperty(prop)) {
                    aLength += 1;

                    if (!(prop in b)) {
                        return false;
                    }

                    if (!deepEqual(a[prop], b[prop])) {
                        return false;
                    }
                }
            }

            for (prop in b) {
                if (b.hasOwnProperty(prop)) {
                    bLength += 1;
                }
            }

            return aLength === bLength;
        };

        sinon.functionName = function functionName(func) {
            var name = func.displayName || func.name;

            // Use function decomposition as a last resort to get function
            // name. Does not rely on function decomposition to work - if it
            // doesn't debugging will be slightly less informative
            // (i.e. toString will say 'spy' rather than 'myFunc').
            if (!name) {
                var matches = func.toString().match(/function ([^\s\(]+)/);
                name = matches && matches[1];
            }

            return name;
        };

        sinon.functionToString = function toString() {
            if (this.getCall && this.callCount) {
                var thisValue,
                    prop;
                var i = this.callCount;

                while (i--) {
                    thisValue = this.getCall(i).thisValue;

                    for (prop in thisValue) {
                        if (thisValue[prop] === this) {
                            return prop;
                        }
                    }
                }
            }

            return this.displayName || "sinon fake";
        };

        sinon.objectKeys = function objectKeys(obj) {
            if (obj !== Object(obj)) {
                throw new TypeError("sinon.objectKeys called on a non-object");
            }

            var keys = [];
            var key;
            for (key in obj) {
                if (hasOwn.call(obj, key)) {
                    keys.push(key);
                }
            }

            return keys;
        };

        sinon.getPropertyDescriptor = function getPropertyDescriptor(object, property) {
            var proto = object;
            var descriptor;

            while (proto && !(descriptor = Object.getOwnPropertyDescriptor(proto, property))) {
                proto = Object.getPrototypeOf(proto);
            }
            return descriptor;
        };

        sinon.getConfig = function (custom) {
            var config = {};
            custom = custom || {};
            var defaults = sinon.defaultConfig;

            for (var prop in defaults) {
                if (defaults.hasOwnProperty(prop)) {
                    config[prop] = custom.hasOwnProperty(prop) ? custom[prop] : defaults[prop];
                }
            }

            return config;
        };

        sinon.defaultConfig = {
            injectIntoThis: true,
            injectInto: null,
            properties: ["spy", "stub", "mock", "clock", "server", "requests"],
            useFakeTimers: true,
            useFakeServer: true
        };

        sinon.timesInWords = function timesInWords(count) {
            return count === 1 && "once" ||
                count === 2 && "twice" ||
                count === 3 && "thrice" ||
                (count || 0) + " times";
        };

        sinon.calledInOrder = function (spies) {
            for (var i = 1, l = spies.length; i < l; i++) {
                if (!spies[i - 1].calledBefore(spies[i]) || !spies[i].called) {
                    return false;
                }
            }

            return true;
        };

        sinon.orderByFirstCall = function (spies) {
            return spies.sort(function (a, b) {
                // uuid, won't ever be equal
                var aCall = a.getCall(0);
                var bCall = b.getCall(0);
                var aId = aCall && aCall.callId || -1;
                var bId = bCall && bCall.callId || -1;

                return aId < bId ? -1 : 1;
            });
        };

        sinon.createStubInstance = function (constructor) {
            if (typeof constructor !== "function") {
                throw new TypeError("The constructor should be a function.");
            }
            return sinon.stub(sinon.create(constructor.prototype));
        };

        sinon.restore = function (object) {
            if (object !== null && typeof object === "object") {
                for (var prop in object) {
                    if (isRestorable(object[prop])) {
                        object[prop].restore();
                    }
                }
            } else if (isRestorable(object)) {
                object.restore();
            }
        };

        return sinon;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports) {
        makeApi(exports);
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon // eslint-disable-line no-undef
));

},{}],75:[function(require,module,exports){
/**
 * Minimal Event interface implementation
 *
 * Original implementation by Sven Fuchs: https://gist.github.com/995028
 * Modifications and tests by Christian Johansen.
 *
 * @author Sven Fuchs (svenfuchs@artweb-design.de)
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2011 Sven Fuchs, Christian Johansen
 */
if (typeof sinon === "undefined") {
    this.sinon = {};
}

(function () {
    "use strict";

    var push = [].push;

    function makeApi(sinon) {
        sinon.Event = function Event(type, bubbles, cancelable, target) {
            this.initEvent(type, bubbles, cancelable, target);
        };

        sinon.Event.prototype = {
            initEvent: function (type, bubbles, cancelable, target) {
                this.type = type;
                this.bubbles = bubbles;
                this.cancelable = cancelable;
                this.target = target;
            },

            stopPropagation: function () {},

            preventDefault: function () {
                this.defaultPrevented = true;
            }
        };

        sinon.ProgressEvent = function ProgressEvent(type, progressEventRaw, target) {
            this.initEvent(type, false, false, target);
            this.loaded = progressEventRaw.loaded || null;
            this.total = progressEventRaw.total || null;
            this.lengthComputable = !!progressEventRaw.total;
        };

        sinon.ProgressEvent.prototype = new sinon.Event();

        sinon.ProgressEvent.prototype.constructor = sinon.ProgressEvent;

        sinon.CustomEvent = function CustomEvent(type, customData, target) {
            this.initEvent(type, false, false, target);
            this.detail = customData.detail || null;
        };

        sinon.CustomEvent.prototype = new sinon.Event();

        sinon.CustomEvent.prototype.constructor = sinon.CustomEvent;

        sinon.EventTarget = {
            addEventListener: function addEventListener(event, listener) {
                this.eventListeners = this.eventListeners || {};
                this.eventListeners[event] = this.eventListeners[event] || [];
                push.call(this.eventListeners[event], listener);
            },

            removeEventListener: function removeEventListener(event, listener) {
                var listeners = this.eventListeners && this.eventListeners[event] || [];

                for (var i = 0, l = listeners.length; i < l; ++i) {
                    if (listeners[i] === listener) {
                        return listeners.splice(i, 1);
                    }
                }
            },

            dispatchEvent: function dispatchEvent(event) {
                var type = event.type;
                var listeners = this.eventListeners && this.eventListeners[type] || [];

                for (var i = 0; i < listeners.length; i++) {
                    if (typeof listeners[i] === "function") {
                        listeners[i].call(this, event);
                    } else {
                        listeners[i].handleEvent(event);
                    }
                }

                return !!event.defaultPrevented;
            }
        };
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require) {
        var sinon = require("./core");
        makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require);
    } else {
        makeApi(sinon); // eslint-disable-line no-undef
    }
}());

},{"./core":74}],76:[function(require,module,exports){
/**
 * @depend fake_xdomain_request.js
 * @depend fake_xml_http_request.js
 * @depend ../format.js
 * @depend ../log_error.js
 */
/**
 * The Sinon "server" mimics a web server that receives requests from
 * sinon.FakeXMLHttpRequest and provides an API to respond to those requests,
 * both synchronously and asynchronously. To respond synchronuously, canned
 * answers have to be provided upfront.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function () {
    "use strict";

    var push = [].push;

    function responseArray(handler) {
        var response = handler;

        if (Object.prototype.toString.call(handler) !== "[object Array]") {
            response = [200, {}, handler];
        }

        if (typeof response[2] !== "string") {
            throw new TypeError("Fake server response body should be string, but was " +
                                typeof response[2]);
        }

        return response;
    }

    var wloc = typeof window !== "undefined" ? window.location : {};
    var rCurrLoc = new RegExp("^" + wloc.protocol + "//" + wloc.host);

    function matchOne(response, reqMethod, reqUrl) {
        var rmeth = response.method;
        var matchMethod = !rmeth || rmeth.toLowerCase() === reqMethod.toLowerCase();
        var url = response.url;
        var matchUrl = !url || url === reqUrl || (typeof url.test === "function" && url.test(reqUrl));

        return matchMethod && matchUrl;
    }

    function match(response, request) {
        var requestUrl = request.url;

        if (!/^https?:\/\//.test(requestUrl) || rCurrLoc.test(requestUrl)) {
            requestUrl = requestUrl.replace(rCurrLoc, "");
        }

        if (matchOne(response, this.getHTTPMethod(request), requestUrl)) {
            if (typeof response.response === "function") {
                var ru = response.url;
                var args = [request].concat(ru && typeof ru.exec === "function" ? ru.exec(requestUrl).slice(1) : []);
                return response.response.apply(response, args);
            }

            return true;
        }

        return false;
    }

    function makeApi(sinon) {
        sinon.fakeServer = {
            create: function (config) {
                var server = sinon.create(this);
                server.configure(config);
                if (!sinon.xhr.supportsCORS) {
                    this.xhr = sinon.useFakeXDomainRequest();
                } else {
                    this.xhr = sinon.useFakeXMLHttpRequest();
                }
                server.requests = [];

                this.xhr.onCreate = function (xhrObj) {
                    server.addRequest(xhrObj);
                };

                return server;
            },
            configure: function (config) {
                var whitelist = {
                    "autoRespond": true,
                    "autoRespondAfter": true,
                    "respondImmediately": true,
                    "fakeHTTPMethods": true
                };
                var setting;

                config = config || {};
                for (setting in config) {
                    if (whitelist.hasOwnProperty(setting) && config.hasOwnProperty(setting)) {
                        this[setting] = config[setting];
                    }
                }
            },
            addRequest: function addRequest(xhrObj) {
                var server = this;
                push.call(this.requests, xhrObj);

                xhrObj.onSend = function () {
                    server.handleRequest(this);

                    if (server.respondImmediately) {
                        server.respond();
                    } else if (server.autoRespond && !server.responding) {
                        setTimeout(function () {
                            server.responding = false;
                            server.respond();
                        }, server.autoRespondAfter || 10);

                        server.responding = true;
                    }
                };
            },

            getHTTPMethod: function getHTTPMethod(request) {
                if (this.fakeHTTPMethods && /post/i.test(request.method)) {
                    var matches = (request.requestBody || "").match(/_method=([^\b;]+)/);
                    return matches ? matches[1] : request.method;
                }

                return request.method;
            },

            handleRequest: function handleRequest(xhr) {
                if (xhr.async) {
                    if (!this.queue) {
                        this.queue = [];
                    }

                    push.call(this.queue, xhr);
                } else {
                    this.processRequest(xhr);
                }
            },

            log: function log(response, request) {
                var str;

                str = "Request:\n" + sinon.format(request) + "\n\n";
                str += "Response:\n" + sinon.format(response) + "\n\n";

                sinon.log(str);
            },

            respondWith: function respondWith(method, url, body) {
                if (arguments.length === 1 && typeof method !== "function") {
                    this.response = responseArray(method);
                    return;
                }

                if (!this.responses) {
                    this.responses = [];
                }

                if (arguments.length === 1) {
                    body = method;
                    url = method = null;
                }

                if (arguments.length === 2) {
                    body = url;
                    url = method;
                    method = null;
                }

                push.call(this.responses, {
                    method: method,
                    url: url,
                    response: typeof body === "function" ? body : responseArray(body)
                });
            },

            respond: function respond() {
                if (arguments.length > 0) {
                    this.respondWith.apply(this, arguments);
                }

                var queue = this.queue || [];
                var requests = queue.splice(0, queue.length);

                for (var i = 0; i < requests.length; i++) {
                    this.processRequest(requests[i]);
                }
            },

            processRequest: function processRequest(request) {
                try {
                    if (request.aborted) {
                        return;
                    }

                    var response = this.response || [404, {}, ""];

                    if (this.responses) {
                        for (var l = this.responses.length, i = l - 1; i >= 0; i--) {
                            if (match.call(this, this.responses[i], request)) {
                                response = this.responses[i].response;
                                break;
                            }
                        }
                    }

                    if (request.readyState !== 4) {
                        this.log(response, request);

                        request.respond(response[0], response[1], response[2]);
                    }
                } catch (e) {
                    sinon.logError("Fake server request processing", e);
                }
            },

            restore: function restore() {
                return this.xhr.restore && this.xhr.restore.apply(this.xhr, arguments);
            }
        };
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./core");
        require("./fake_xdomain_request");
        require("./fake_xml_http_request");
        require("../format");
        makeApi(sinon);
        module.exports = sinon;
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require, module.exports, module);
    } else {
        makeApi(sinon); // eslint-disable-line no-undef
    }
}());

},{"../format":63,"./core":74,"./fake_xdomain_request":79,"./fake_xml_http_request":80}],77:[function(require,module,exports){
/**
 * @depend fake_server.js
 * @depend fake_timers.js
 */
/**
 * Add-on for sinon.fakeServer that automatically handles a fake timer along with
 * the FakeXMLHttpRequest. The direct inspiration for this add-on is jQuery
 * 1.3.x, which does not use xhr object's onreadystatehandler at all - instead,
 * it polls the object for completion with setInterval. Dispite the direct
 * motivation, there is nothing jQuery-specific in this file, so it can be used
 * in any environment where the ajax implementation depends on setInterval or
 * setTimeout.
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function () {
    "use strict";

    function makeApi(sinon) {
        function Server() {}
        Server.prototype = sinon.fakeServer;

        sinon.fakeServerWithClock = new Server();

        sinon.fakeServerWithClock.addRequest = function addRequest(xhr) {
            if (xhr.async) {
                if (typeof setTimeout.clock === "object") {
                    this.clock = setTimeout.clock;
                } else {
                    this.clock = sinon.useFakeTimers();
                    this.resetClock = true;
                }

                if (!this.longestTimeout) {
                    var clockSetTimeout = this.clock.setTimeout;
                    var clockSetInterval = this.clock.setInterval;
                    var server = this;

                    this.clock.setTimeout = function (fn, timeout) {
                        server.longestTimeout = Math.max(timeout, server.longestTimeout || 0);

                        return clockSetTimeout.apply(this, arguments);
                    };

                    this.clock.setInterval = function (fn, timeout) {
                        server.longestTimeout = Math.max(timeout, server.longestTimeout || 0);

                        return clockSetInterval.apply(this, arguments);
                    };
                }
            }

            return sinon.fakeServer.addRequest.call(this, xhr);
        };

        sinon.fakeServerWithClock.respond = function respond() {
            var returnVal = sinon.fakeServer.respond.apply(this, arguments);

            if (this.clock) {
                this.clock.tick(this.longestTimeout || 0);
                this.longestTimeout = 0;

                if (this.resetClock) {
                    this.clock.restore();
                    this.resetClock = false;
                }
            }

            return returnVal;
        };

        sinon.fakeServerWithClock.restore = function restore() {
            if (this.clock) {
                this.clock.restore();
            }

            return sinon.fakeServer.restore.apply(this, arguments);
        };
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require) {
        var sinon = require("./core");
        require("./fake_server");
        require("./fake_timers");
        makeApi(sinon);
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require);
    } else {
        makeApi(sinon); // eslint-disable-line no-undef
    }
}());

},{"./core":74,"./fake_server":76,"./fake_timers":78}],78:[function(require,module,exports){
/**
 * Fake timer API
 * setTimeout
 * setInterval
 * clearTimeout
 * clearInterval
 * tick
 * reset
 * Date
 *
 * Inspired by jsUnitMockTimeOut from JsUnit
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function () {
    "use strict";

    function makeApi(s, lol) {
        /*global lolex */
        var llx = typeof lolex !== "undefined" ? lolex : lol;

        s.useFakeTimers = function () {
            var now;
            var methods = Array.prototype.slice.call(arguments);

            if (typeof methods[0] === "string") {
                now = 0;
            } else {
                now = methods.shift();
            }

            var clock = llx.install(now || 0, methods);
            clock.restore = clock.uninstall;
            return clock;
        };

        s.clock = {
            create: function (now) {
                return llx.createClock(now);
            }
        };

        s.timers = {
            setTimeout: setTimeout,
            clearTimeout: clearTimeout,
            setImmediate: (typeof setImmediate !== "undefined" ? setImmediate : undefined),
            clearImmediate: (typeof clearImmediate !== "undefined" ? clearImmediate : undefined),
            setInterval: setInterval,
            clearInterval: clearInterval,
            Date: Date
        };
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, epxorts, module, lolex) {
        var core = require("./core");
        makeApi(core, lolex);
        module.exports = core;
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require, module.exports, module, require("lolex"));
    } else {
        makeApi(sinon); // eslint-disable-line no-undef
    }
}());

},{"./core":74,"lolex":82}],79:[function(require,module,exports){
(function (global){
/**
 * @depend core.js
 * @depend ../extend.js
 * @depend event.js
 * @depend ../log_error.js
 */
/**
 * Fake XDomainRequest object
 */
if (typeof sinon === "undefined") {
    this.sinon = {};
}

// wrapper for global
(function (global) {
    "use strict";

    var xdr = { XDomainRequest: global.XDomainRequest };
    xdr.GlobalXDomainRequest = global.XDomainRequest;
    xdr.supportsXDR = typeof xdr.GlobalXDomainRequest !== "undefined";
    xdr.workingXDR = xdr.supportsXDR ? xdr.GlobalXDomainRequest : false;

    function makeApi(sinon) {
        sinon.xdr = xdr;

        function FakeXDomainRequest() {
            this.readyState = FakeXDomainRequest.UNSENT;
            this.requestBody = null;
            this.requestHeaders = {};
            this.status = 0;
            this.timeout = null;

            if (typeof FakeXDomainRequest.onCreate === "function") {
                FakeXDomainRequest.onCreate(this);
            }
        }

        function verifyState(x) {
            if (x.readyState !== FakeXDomainRequest.OPENED) {
                throw new Error("INVALID_STATE_ERR");
            }

            if (x.sendFlag) {
                throw new Error("INVALID_STATE_ERR");
            }
        }

        function verifyRequestSent(x) {
            if (x.readyState === FakeXDomainRequest.UNSENT) {
                throw new Error("Request not sent");
            }
            if (x.readyState === FakeXDomainRequest.DONE) {
                throw new Error("Request done");
            }
        }

        function verifyResponseBodyType(body) {
            if (typeof body !== "string") {
                var error = new Error("Attempted to respond to fake XDomainRequest with " +
                                    body + ", which is not a string.");
                error.name = "InvalidBodyException";
                throw error;
            }
        }

        sinon.extend(FakeXDomainRequest.prototype, sinon.EventTarget, {
            open: function open(method, url) {
                this.method = method;
                this.url = url;

                this.responseText = null;
                this.sendFlag = false;

                this.readyStateChange(FakeXDomainRequest.OPENED);
            },

            readyStateChange: function readyStateChange(state) {
                this.readyState = state;
                var eventName = "";
                switch (this.readyState) {
                case FakeXDomainRequest.UNSENT:
                    break;
                case FakeXDomainRequest.OPENED:
                    break;
                case FakeXDomainRequest.LOADING:
                    if (this.sendFlag) {
                        //raise the progress event
                        eventName = "onprogress";
                    }
                    break;
                case FakeXDomainRequest.DONE:
                    if (this.isTimeout) {
                        eventName = "ontimeout";
                    } else if (this.errorFlag || (this.status < 200 || this.status > 299)) {
                        eventName = "onerror";
                    } else {
                        eventName = "onload";
                    }
                    break;
                }

                // raising event (if defined)
                if (eventName) {
                    if (typeof this[eventName] === "function") {
                        try {
                            this[eventName]();
                        } catch (e) {
                            sinon.logError("Fake XHR " + eventName + " handler", e);
                        }
                    }
                }
            },

            send: function send(data) {
                verifyState(this);

                if (!/^(get|head)$/i.test(this.method)) {
                    this.requestBody = data;
                }
                this.requestHeaders["Content-Type"] = "text/plain;charset=utf-8";

                this.errorFlag = false;
                this.sendFlag = true;
                this.readyStateChange(FakeXDomainRequest.OPENED);

                if (typeof this.onSend === "function") {
                    this.onSend(this);
                }
            },

            abort: function abort() {
                this.aborted = true;
                this.responseText = null;
                this.errorFlag = true;

                if (this.readyState > sinon.FakeXDomainRequest.UNSENT && this.sendFlag) {
                    this.readyStateChange(sinon.FakeXDomainRequest.DONE);
                    this.sendFlag = false;
                }
            },

            setResponseBody: function setResponseBody(body) {
                verifyRequestSent(this);
                verifyResponseBodyType(body);

                var chunkSize = this.chunkSize || 10;
                var index = 0;
                this.responseText = "";

                do {
                    this.readyStateChange(FakeXDomainRequest.LOADING);
                    this.responseText += body.substring(index, index + chunkSize);
                    index += chunkSize;
                } while (index < body.length);

                this.readyStateChange(FakeXDomainRequest.DONE);
            },

            respond: function respond(status, contentType, body) {
                // content-type ignored, since XDomainRequest does not carry this
                // we keep the same syntax for respond(...) as for FakeXMLHttpRequest to ease
                // test integration across browsers
                this.status = typeof status === "number" ? status : 200;
                this.setResponseBody(body || "");
            },

            simulatetimeout: function simulatetimeout() {
                this.status = 0;
                this.isTimeout = true;
                // Access to this should actually throw an error
                this.responseText = undefined;
                this.readyStateChange(FakeXDomainRequest.DONE);
            }
        });

        sinon.extend(FakeXDomainRequest, {
            UNSENT: 0,
            OPENED: 1,
            LOADING: 3,
            DONE: 4
        });

        sinon.useFakeXDomainRequest = function useFakeXDomainRequest() {
            sinon.FakeXDomainRequest.restore = function restore(keepOnCreate) {
                if (xdr.supportsXDR) {
                    global.XDomainRequest = xdr.GlobalXDomainRequest;
                }

                delete sinon.FakeXDomainRequest.restore;

                if (keepOnCreate !== true) {
                    delete sinon.FakeXDomainRequest.onCreate;
                }
            };
            if (xdr.supportsXDR) {
                global.XDomainRequest = sinon.FakeXDomainRequest;
            }
            return sinon.FakeXDomainRequest;
        };

        sinon.FakeXDomainRequest = FakeXDomainRequest;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./core");
        require("../extend");
        require("./event");
        require("../log_error");
        makeApi(sinon);
        module.exports = sinon;
    }

    if (isAMD) {
        define(loadDependencies);
    } else if (isNode) {
        loadDependencies(require, module.exports, module);
    } else {
        makeApi(sinon); // eslint-disable-line no-undef
    }
})(typeof global !== "undefined" ? global : self);

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../extend":62,"../log_error":64,"./core":74,"./event":75}],80:[function(require,module,exports){
(function (global){
/**
 * @depend core.js
 * @depend ../extend.js
 * @depend event.js
 * @depend ../log_error.js
 */
/**
 * Fake XMLHttpRequest object
 *
 * @author Christian Johansen (christian@cjohansen.no)
 * @license BSD
 *
 * Copyright (c) 2010-2013 Christian Johansen
 */
(function (sinonGlobal, global) {
    "use strict";

    function getWorkingXHR(globalScope) {
        var supportsXHR = typeof globalScope.XMLHttpRequest !== "undefined";
        if (supportsXHR) {
            return globalScope.XMLHttpRequest;
        }

        var supportsActiveX = typeof globalScope.ActiveXObject !== "undefined";
        if (supportsActiveX) {
            return function () {
                return new globalScope.ActiveXObject("MSXML2.XMLHTTP.3.0");
            };
        }

        return false;
    }

    var supportsProgress = typeof ProgressEvent !== "undefined";
    var supportsCustomEvent = typeof CustomEvent !== "undefined";
    var supportsFormData = typeof FormData !== "undefined";
    var sinonXhr = { XMLHttpRequest: global.XMLHttpRequest };
    sinonXhr.GlobalXMLHttpRequest = global.XMLHttpRequest;
    sinonXhr.GlobalActiveXObject = global.ActiveXObject;
    sinonXhr.supportsActiveX = typeof sinonXhr.GlobalActiveXObject !== "undefined";
    sinonXhr.supportsXHR = typeof sinonXhr.GlobalXMLHttpRequest !== "undefined";
    sinonXhr.workingXHR = getWorkingXHR(global);
    sinonXhr.supportsCORS = sinonXhr.supportsXHR && "withCredentials" in (new sinonXhr.GlobalXMLHttpRequest());

    var unsafeHeaders = {
        "Accept-Charset": true,
        "Accept-Encoding": true,
        Connection: true,
        "Content-Length": true,
        Cookie: true,
        Cookie2: true,
        "Content-Transfer-Encoding": true,
        Date: true,
        Expect: true,
        Host: true,
        "Keep-Alive": true,
        Referer: true,
        TE: true,
        Trailer: true,
        "Transfer-Encoding": true,
        Upgrade: true,
        "User-Agent": true,
        Via: true
    };

    // An upload object is created for each
    // FakeXMLHttpRequest and allows upload
    // events to be simulated using uploadProgress
    // and uploadError.
    function UploadProgress() {
        this.eventListeners = {
            progress: [],
            load: [],
            abort: [],
            error: []
        };
    }

    UploadProgress.prototype.addEventListener = function addEventListener(event, listener) {
        this.eventListeners[event].push(listener);
    };

    UploadProgress.prototype.removeEventListener = function removeEventListener(event, listener) {
        var listeners = this.eventListeners[event] || [];

        for (var i = 0, l = listeners.length; i < l; ++i) {
            if (listeners[i] === listener) {
                return listeners.splice(i, 1);
            }
        }
    };

    UploadProgress.prototype.dispatchEvent = function dispatchEvent(event) {
        var listeners = this.eventListeners[event.type] || [];

        for (var i = 0, listener; (listener = listeners[i]) != null; i++) {
            listener(event);
        }
    };

    // Note that for FakeXMLHttpRequest to work pre ES5
    // we lose some of the alignment with the spec.
    // To ensure as close a match as possible,
    // set responseType before calling open, send or respond;
    function FakeXMLHttpRequest() {
        this.readyState = FakeXMLHttpRequest.UNSENT;
        this.requestHeaders = {};
        this.requestBody = null;
        this.status = 0;
        this.statusText = "";
        this.upload = new UploadProgress();
        this.responseType = "";
        this.response = "";
        if (sinonXhr.supportsCORS) {
            this.withCredentials = false;
        }

        var xhr = this;
        var events = ["loadstart", "load", "abort", "loadend"];

        function addEventListener(eventName) {
            xhr.addEventListener(eventName, function (event) {
                var listener = xhr["on" + eventName];

                if (listener && typeof listener === "function") {
                    listener.call(this, event);
                }
            });
        }

        for (var i = events.length - 1; i >= 0; i--) {
            addEventListener(events[i]);
        }

        if (typeof FakeXMLHttpRequest.onCreate === "function") {
            FakeXMLHttpRequest.onCreate(this);
        }
    }

    function verifyState(xhr) {
        if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {
            throw new Error("INVALID_STATE_ERR");
        }

        if (xhr.sendFlag) {
            throw new Error("INVALID_STATE_ERR");
        }
    }

    function getHeader(headers, header) {
        header = header.toLowerCase();

        for (var h in headers) {
            if (h.toLowerCase() === header) {
                return h;
            }
        }

        return null;
    }

    // filtering to enable a white-list version of Sinon FakeXhr,
    // where whitelisted requests are passed through to real XHR
    function each(collection, callback) {
        if (!collection) {
            return;
        }

        for (var i = 0, l = collection.length; i < l; i += 1) {
            callback(collection[i]);
        }
    }
    function some(collection, callback) {
        for (var index = 0; index < collection.length; index++) {
            if (callback(collection[index]) === true) {
                return true;
            }
        }
        return false;
    }
    // largest arity in XHR is 5 - XHR#open
    var apply = function (obj, method, args) {
        switch (args.length) {
        case 0: return obj[method]();
        case 1: return obj[method](args[0]);
        case 2: return obj[method](args[0], args[1]);
        case 3: return obj[method](args[0], args[1], args[2]);
        case 4: return obj[method](args[0], args[1], args[2], args[3]);
        case 5: return obj[method](args[0], args[1], args[2], args[3], args[4]);
        }
    };

    FakeXMLHttpRequest.filters = [];
    FakeXMLHttpRequest.addFilter = function addFilter(fn) {
        this.filters.push(fn);
    };
    var IE6Re = /MSIE 6/;
    FakeXMLHttpRequest.defake = function defake(fakeXhr, xhrArgs) {
        var xhr = new sinonXhr.workingXHR(); // eslint-disable-line new-cap

        each([
            "open",
            "setRequestHeader",
            "send",
            "abort",
            "getResponseHeader",
            "getAllResponseHeaders",
            "addEventListener",
            "overrideMimeType",
            "removeEventListener"
        ], function (method) {
            fakeXhr[method] = function () {
                return apply(xhr, method, arguments);
            };
        });

        var copyAttrs = function (args) {
            each(args, function (attr) {
                try {
                    fakeXhr[attr] = xhr[attr];
                } catch (e) {
                    if (!IE6Re.test(navigator.userAgent)) {
                        throw e;
                    }
                }
            });
        };

        var stateChange = function stateChange() {
            fakeXhr.readyState = xhr.readyState;
            if (xhr.readyState >= FakeXMLHttpRequest.HEADERS_RECEIVED) {
                copyAttrs(["status", "statusText"]);
            }
            if (xhr.readyState >= FakeXMLHttpRequest.LOADING) {
                copyAttrs(["responseText", "response"]);
            }
            if (xhr.readyState === FakeXMLHttpRequest.DONE) {
                copyAttrs(["responseXML"]);
            }
            if (fakeXhr.onreadystatechange) {
                fakeXhr.onreadystatechange.call(fakeXhr, { target: fakeXhr });
            }
        };

        if (xhr.addEventListener) {
            for (var event in fakeXhr.eventListeners) {
                if (fakeXhr.eventListeners.hasOwnProperty(event)) {

                    /*eslint-disable no-loop-func*/
                    each(fakeXhr.eventListeners[event], function (handler) {
                        xhr.addEventListener(event, handler);
                    });
                    /*eslint-enable no-loop-func*/
                }
            }
            xhr.addEventListener("readystatechange", stateChange);
        } else {
            xhr.onreadystatechange = stateChange;
        }
        apply(xhr, "open", xhrArgs);
    };
    FakeXMLHttpRequest.useFilters = false;

    function verifyRequestOpened(xhr) {
        if (xhr.readyState !== FakeXMLHttpRequest.OPENED) {
            throw new Error("INVALID_STATE_ERR - " + xhr.readyState);
        }
    }

    function verifyRequestSent(xhr) {
        if (xhr.readyState === FakeXMLHttpRequest.DONE) {
            throw new Error("Request done");
        }
    }

    function verifyHeadersReceived(xhr) {
        if (xhr.async && xhr.readyState !== FakeXMLHttpRequest.HEADERS_RECEIVED) {
            throw new Error("No headers received");
        }
    }

    function verifyResponseBodyType(body) {
        if (typeof body !== "string") {
            var error = new Error("Attempted to respond to fake XMLHttpRequest with " +
                                 body + ", which is not a string.");
            error.name = "InvalidBodyException";
            throw error;
        }
    }

    FakeXMLHttpRequest.parseXML = function parseXML(text) {
        var xmlDoc;

        if (typeof DOMParser !== "undefined") {
            var parser = new DOMParser();
            xmlDoc = parser.parseFromString(text, "text/xml");
        } else {
            xmlDoc = new window.ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async = "false";
            xmlDoc.loadXML(text);
        }

        return xmlDoc;
    };

    FakeXMLHttpRequest.statusCodes = {
        100: "Continue",
        101: "Switching Protocols",
        200: "OK",
        201: "Created",
        202: "Accepted",
        203: "Non-Authoritative Information",
        204: "No Content",
        205: "Reset Content",
        206: "Partial Content",
        207: "Multi-Status",
        300: "Multiple Choice",
        301: "Moved Permanently",
        302: "Found",
        303: "See Other",
        304: "Not Modified",
        305: "Use Proxy",
        307: "Temporary Redirect",
        400: "Bad Request",
        401: "Unauthorized",
        402: "Payment Required",
        403: "Forbidden",
        404: "Not Found",
        405: "Method Not Allowed",
        406: "Not Acceptable",
        407: "Proxy Authentication Required",
        408: "Request Timeout",
        409: "Conflict",
        410: "Gone",
        411: "Length Required",
        412: "Precondition Failed",
        413: "Request Entity Too Large",
        414: "Request-URI Too Long",
        415: "Unsupported Media Type",
        416: "Requested Range Not Satisfiable",
        417: "Expectation Failed",
        422: "Unprocessable Entity",
        500: "Internal Server Error",
        501: "Not Implemented",
        502: "Bad Gateway",
        503: "Service Unavailable",
        504: "Gateway Timeout",
        505: "HTTP Version Not Supported"
    };

    function makeApi(sinon) {
        sinon.xhr = sinonXhr;

        sinon.extend(FakeXMLHttpRequest.prototype, sinon.EventTarget, {
            async: true,

            open: function open(method, url, async, username, password) {
                this.method = method;
                this.url = url;
                this.async = typeof async === "boolean" ? async : true;
                this.username = username;
                this.password = password;
                this.responseText = null;
                this.response = this.responseType === "json" ? null : "";
                this.responseXML = null;
                this.requestHeaders = {};
                this.sendFlag = false;

                if (FakeXMLHttpRequest.useFilters === true) {
                    var xhrArgs = arguments;
                    var defake = some(FakeXMLHttpRequest.filters, function (filter) {
                        return filter.apply(this, xhrArgs);
                    });
                    if (defake) {
                        return FakeXMLHttpRequest.defake(this, arguments);
                    }
                }
                this.readyStateChange(FakeXMLHttpRequest.OPENED);
            },

            readyStateChange: function readyStateChange(state) {
                this.readyState = state;

                var readyStateChangeEvent = new sinon.Event("readystatechange", false, false, this);

                if (typeof this.onreadystatechange === "function") {
                    try {
                        this.onreadystatechange(readyStateChangeEvent);
                    } catch (e) {
                        sinon.logError("Fake XHR onreadystatechange handler", e);
                    }
                }

                switch (this.readyState) {
                    case FakeXMLHttpRequest.DONE:
                        if (supportsProgress) {
                            this.upload.dispatchEvent(new sinon.ProgressEvent("progress", {loaded: 100, total: 100}));
                            this.dispatchEvent(new sinon.ProgressEvent("progress", {loaded: 100, total: 100}));
                        }
                        this.upload.dispatchEvent(new sinon.Event("load", false, false, this));
                        this.dispatchEvent(new sinon.Event("load", false, false, this));
                        this.dispatchEvent(new sinon.Event("loadend", false, false, this));
                        break;
                }

                this.dispatchEvent(readyStateChangeEvent);
            },

            setRequestHeader: function setRequestHeader(header, value) {
                verifyState(this);

                if (unsafeHeaders[header] || /^(Sec-|Proxy-)/.test(header)) {
                    throw new Error("Refused to set unsafe header \"" + header + "\"");
                }

                if (this.requestHeaders[header]) {
                    this.requestHeaders[header] += "," + value;
                } else {
                    this.requestHeaders[header] = value;
                }
            },

            // Helps testing
            setResponseHeaders: function setResponseHeaders(headers) {
                verifyRequestOpened(this);
                this.responseHeaders = {};

                for (var header in headers) {
                    if (headers.hasOwnProperty(header)) {
                        this.responseHeaders[header] = headers[header];
                    }
                }

                if (this.async) {
                    this.readyStateChange(FakeXMLHttpRequest.HEADERS_RECEIVED);
                } else {
                    this.readyState = FakeXMLHttpRequest.HEADERS_RECEIVED;
                }
            },

            // Currently treats ALL data as a DOMString (i.e. no Document)
            send: function send(data) {
                verifyState(this);

                if (!/^(get|head)$/i.test(this.method)) {
                    var contentType = getHeader(this.requestHeaders, "Content-Type");
                    if (this.requestHeaders[contentType]) {
                        var value = this.requestHeaders[contentType].split(";");
                        this.requestHeaders[contentType] = value[0] + ";charset=utf-8";
                    } else if (supportsFormData && !(data instanceof FormData)) {
                        this.requestHeaders["Content-Type"] = "text/plain;charset=utf-8";
                    }

                    this.requestBody = data;
                }

                this.errorFlag = false;
                this.sendFlag = this.async;
                this.response = this.responseType === "json" ? null : "";
                this.readyStateChange(FakeXMLHttpRequest.OPENED);

                if (typeof this.onSend === "function") {
                    this.onSend(this);
                }

                this.dispatchEvent(new sinon.Event("loadstart", false, false, this));
            },

            abort: function abort() {
                this.aborted = true;
                this.responseText = null;
                this.response = this.responseType === "json" ? null : "";
                this.errorFlag = true;
                this.requestHeaders = {};
                this.responseHeaders = {};

                if (this.readyState > FakeXMLHttpRequest.UNSENT && this.sendFlag) {
                    this.readyStateChange(FakeXMLHttpRequest.DONE);
                    this.sendFlag = false;
                }

                this.readyState = FakeXMLHttpRequest.UNSENT;

                this.dispatchEvent(new sinon.Event("abort", false, false, this));

                this.upload.dispatchEvent(new sinon.Event("abort", false, false, this));

                if (typeof this.onerror === "function") {
                    this.onerror();
                }
            },

            getResponseHeader: function getResponseHeader(header) {
                if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {
                    return null;
                }

                if (/^Set-Cookie2?$/i.test(header)) {
                    return null;
                }

                header = getHeader(this.responseHeaders, header);

                return this.responseHeaders[header] || null;
            },

            getAllResponseHeaders: function getAllResponseHeaders() {
                if (this.readyState < FakeXMLHttpRequest.HEADERS_RECEIVED) {
                    return "";
                }

                var headers = "";

                for (var header in this.responseHeaders) {
                    if (this.responseHeaders.hasOwnProperty(header) &&
                        !/^Set-Cookie2?$/i.test(header)) {
                        headers += header + ": " + this.responseHeaders[header] + "\r\n";
                    }
                }

                return headers;
            },

            setResponseBody: function setResponseBody(body) {
                verifyRequestSent(this);
                verifyHeadersReceived(this);
                verifyResponseBodyType(body);

                var chunkSize = this.chunkSize || 10;
                var index = 0;
                this.responseText = "";

                do {
                    if (this.async) {
                        this.readyStateChange(FakeXMLHttpRequest.LOADING);
                    }

                    this.responseText += body.substring(index, index + chunkSize);
                    index += chunkSize;
                } while (index < body.length);

                var type = this.getResponseHeader("Content-Type");

                if (this.responseText &&
                    (!type || /(text\/xml)|(application\/xml)|(\+xml)/.test(type))) {
                    try {
                        this.responseXML = FakeXMLHttpRequest.parseXML(this.responseText);
                    } catch (e) {
                        // Unable to parse XML - no biggie
                    }
                }

                this.response = this.responseType === "json" ? JSON.parse(this.responseText) : this.responseText;
                this.readyStateChange(FakeXMLHttpRequest.DONE);
            },

            respond: function respond(status, headers, body) {
                this.status = typeof status === "number" ? status : 200;
                this.statusText = FakeXMLHttpRequest.statusCodes[this.status];
                this.setResponseHeaders(headers || {});
                this.setResponseBody(body || "");
            },

            uploadProgress: function uploadProgress(progressEventRaw) {
                if (supportsProgress) {
                    this.upload.dispatchEvent(new sinon.ProgressEvent("progress", progressEventRaw));
                }
            },

            downloadProgress: function downloadProgress(progressEventRaw) {
                if (supportsProgress) {
                    this.dispatchEvent(new sinon.ProgressEvent("progress", progressEventRaw));
                }
            },

            uploadError: function uploadError(error) {
                if (supportsCustomEvent) {
                    this.upload.dispatchEvent(new sinon.CustomEvent("error", {detail: error}));
                }
            }
        });

        sinon.extend(FakeXMLHttpRequest, {
            UNSENT: 0,
            OPENED: 1,
            HEADERS_RECEIVED: 2,
            LOADING: 3,
            DONE: 4
        });

        sinon.useFakeXMLHttpRequest = function () {
            FakeXMLHttpRequest.restore = function restore(keepOnCreate) {
                if (sinonXhr.supportsXHR) {
                    global.XMLHttpRequest = sinonXhr.GlobalXMLHttpRequest;
                }

                if (sinonXhr.supportsActiveX) {
                    global.ActiveXObject = sinonXhr.GlobalActiveXObject;
                }

                delete FakeXMLHttpRequest.restore;

                if (keepOnCreate !== true) {
                    delete FakeXMLHttpRequest.onCreate;
                }
            };
            if (sinonXhr.supportsXHR) {
                global.XMLHttpRequest = FakeXMLHttpRequest;
            }

            if (sinonXhr.supportsActiveX) {
                global.ActiveXObject = function ActiveXObject(objId) {
                    if (objId === "Microsoft.XMLHTTP" || /^Msxml2\.XMLHTTP/i.test(objId)) {

                        return new FakeXMLHttpRequest();
                    }

                    return new sinonXhr.GlobalActiveXObject(objId);
                };
            }

            return FakeXMLHttpRequest;
        };

        sinon.FakeXMLHttpRequest = FakeXMLHttpRequest;
    }

    var isNode = typeof module !== "undefined" && module.exports && typeof require === "function";
    var isAMD = typeof define === "function" && typeof define.amd === "object" && define.amd;

    function loadDependencies(require, exports, module) {
        var sinon = require("./core");
        require("../extend");
        require("./event");
        require("../log_error");
        makeApi(sinon);
        module.exports = sinon;
    }

    if (isAMD) {
        define(loadDependencies);
        return;
    }

    if (isNode) {
        loadDependencies(require, module.exports, module);
        return;
    }

    if (sinonGlobal) {
        makeApi(sinonGlobal);
    }
}(
    typeof sinon === "object" && sinon, // eslint-disable-line no-undef
    typeof global !== "undefined" ? global : self
));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"../extend":62,"../log_error":64,"./core":74,"./event":75}],81:[function(require,module,exports){
(function (global){
((typeof define === "function" && define.amd && function (m) {
    define("formatio", ["samsam"], m);
}) || (typeof module === "object" && function (m) {
    module.exports = m(require("samsam"));
}) || function (m) { this.formatio = m(this.samsam); }
)(function (samsam) {
    "use strict";

    var formatio = {
        excludeConstructors: ["Object", /^.$/],
        quoteStrings: true,
        limitChildrenCount: 0
    };

    var hasOwn = Object.prototype.hasOwnProperty;

    var specialObjects = [];
    if (typeof global !== "undefined") {
        specialObjects.push({ object: global, value: "[object global]" });
    }
    if (typeof document !== "undefined") {
        specialObjects.push({
            object: document,
            value: "[object HTMLDocument]"
        });
    }
    if (typeof window !== "undefined") {
        specialObjects.push({ object: window, value: "[object Window]" });
    }

    function functionName(func) {
        if (!func) { return ""; }
        if (func.displayName) { return func.displayName; }
        if (func.name) { return func.name; }
        var matches = func.toString().match(/function\s+([^\(]+)/m);
        return (matches && matches[1]) || "";
    }

    function constructorName(f, object) {
        var name = functionName(object && object.constructor);
        var excludes = f.excludeConstructors ||
                formatio.excludeConstructors || [];

        var i, l;
        for (i = 0, l = excludes.length; i < l; ++i) {
            if (typeof excludes[i] === "string" && excludes[i] === name) {
                return "";
            } else if (excludes[i].test && excludes[i].test(name)) {
                return "";
            }
        }

        return name;
    }

    function isCircular(object, objects) {
        if (typeof object !== "object") { return false; }
        var i, l;
        for (i = 0, l = objects.length; i < l; ++i) {
            if (objects[i] === object) { return true; }
        }
        return false;
    }

    function ascii(f, object, processed, indent) {
        if (typeof object === "string") {
            var qs = f.quoteStrings;
            var quote = typeof qs !== "boolean" || qs;
            return processed || quote ? '"' + object + '"' : object;
        }

        if (typeof object === "function" && !(object instanceof RegExp)) {
            return ascii.func(object);
        }

        processed = processed || [];

        if (isCircular(object, processed)) { return "[Circular]"; }

        if (Object.prototype.toString.call(object) === "[object Array]") {
            return ascii.array.call(f, object, processed);
        }

        if (!object) { return String((1/object) === -Infinity ? "-0" : object); }
        if (samsam.isElement(object)) { return ascii.element(object); }

        if (typeof object.toString === "function" &&
                object.toString !== Object.prototype.toString) {
            return object.toString();
        }

        var i, l;
        for (i = 0, l = specialObjects.length; i < l; i++) {
            if (object === specialObjects[i].object) {
                return specialObjects[i].value;
            }
        }

        return ascii.object.call(f, object, processed, indent);
    }

    ascii.func = function (func) {
        return "function " + functionName(func) + "() {}";
    };

    ascii.array = function (array, processed) {
        processed = processed || [];
        processed.push(array);
        var pieces = [];
        var i, l;
        l = (this.limitChildrenCount > 0) ? 
            Math.min(this.limitChildrenCount, array.length) : array.length;

        for (i = 0; i < l; ++i) {
            pieces.push(ascii(this, array[i], processed));
        }

        if(l < array.length)
            pieces.push("[... " + (array.length - l) + " more elements]");

        return "[" + pieces.join(", ") + "]";
    };

    ascii.object = function (object, processed, indent) {
        processed = processed || [];
        processed.push(object);
        indent = indent || 0;
        var pieces = [], properties = samsam.keys(object).sort();
        var length = 3;
        var prop, str, obj, i, k, l;
        l = (this.limitChildrenCount > 0) ? 
            Math.min(this.limitChildrenCount, properties.length) : properties.length;

        for (i = 0; i < l; ++i) {
            prop = properties[i];
            obj = object[prop];

            if (isCircular(obj, processed)) {
                str = "[Circular]";
            } else {
                str = ascii(this, obj, processed, indent + 2);
            }

            str = (/\s/.test(prop) ? '"' + prop + '"' : prop) + ": " + str;
            length += str.length;
            pieces.push(str);
        }

        var cons = constructorName(this, object);
        var prefix = cons ? "[" + cons + "] " : "";
        var is = "";
        for (i = 0, k = indent; i < k; ++i) { is += " "; }

        if(l < properties.length)
            pieces.push("[... " + (properties.length - l) + " more elements]");

        if (length + indent > 80) {
            return prefix + "{\n  " + is + pieces.join(",\n  " + is) + "\n" +
                is + "}";
        }
        return prefix + "{ " + pieces.join(", ") + " }";
    };

    ascii.element = function (element) {
        var tagName = element.tagName.toLowerCase();
        var attrs = element.attributes, attr, pairs = [], attrName, i, l, val;

        for (i = 0, l = attrs.length; i < l; ++i) {
            attr = attrs.item(i);
            attrName = attr.nodeName.toLowerCase().replace("html:", "");
            val = attr.nodeValue;
            if (attrName !== "contenteditable" || val !== "inherit") {
                if (!!val) { pairs.push(attrName + "=\"" + val + "\""); }
            }
        }

        var formatted = "<" + tagName + (pairs.length > 0 ? " " : "");
        var content = element.innerHTML;

        if (content.length > 20) {
            content = content.substr(0, 20) + "[...]";
        }

        var res = formatted + pairs.join(" ") + ">" + content +
                "</" + tagName + ">";

        return res.replace(/ contentEditable="inherit"/, "");
    };

    function Formatio(options) {
        for (var opt in options) {
            this[opt] = options[opt];
        }
    }

    Formatio.prototype = {
        functionName: functionName,

        configure: function (options) {
            return new Formatio(options);
        },

        constructorName: function (object) {
            return constructorName(this, object);
        },

        ascii: function (object, processed, indent) {
            return ascii(this, object, processed, indent);
        }
    };

    return Formatio.prototype;
});

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{"samsam":83}],82:[function(require,module,exports){
(function (global){
/*global global, window*/
/**
 * @author Christian Johansen (christian@cjohansen.no) and contributors
 * @license BSD
 *
 * Copyright (c) 2010-2014 Christian Johansen
 */

(function (global) {
    "use strict";

    // Make properties writable in IE, as per
    // http://www.adequatelygood.com/Replacing-setTimeout-Globally.html
    // JSLint being anal
    var glbl = global;

    global.setTimeout = glbl.setTimeout;
    global.clearTimeout = glbl.clearTimeout;
    global.setImmediate = glbl.setImmediate;
    global.clearImmediate = glbl.clearImmediate;
    global.setInterval = glbl.setInterval;
    global.clearInterval = glbl.clearInterval;
    global.Date = glbl.Date;

    // node expects setTimeout/setInterval to return a fn object w/ .ref()/.unref()
    // browsers, a number.
    // see https://github.com/cjohansen/Sinon.JS/pull/436

    var NOOP = function () { return undefined; };
    var timeoutResult = setTimeout(NOOP, 0);
    var addTimerReturnsObject = typeof timeoutResult === "object";
    clearTimeout(timeoutResult);

    var NativeDate = Date;
    var uniqueTimerId = 1;

    /**
     * Parse strings like "01:10:00" (meaning 1 hour, 10 minutes, 0 seconds) into
     * number of milliseconds. This is used to support human-readable strings passed
     * to clock.tick()
     */
    function parseTime(str) {
        if (!str) {
            return 0;
        }

        var strings = str.split(":");
        var l = strings.length, i = l;
        var ms = 0, parsed;

        if (l > 3 || !/^(\d\d:){0,2}\d\d?$/.test(str)) {
            throw new Error("tick only understands numbers and 'h:m:s'");
        }

        while (i--) {
            parsed = parseInt(strings[i], 10);

            if (parsed >= 60) {
                throw new Error("Invalid time " + str);
            }

            ms += parsed * Math.pow(60, (l - i - 1));
        }

        return ms * 1000;
    }

    /**
     * Used to grok the `now` parameter to createClock.
     */
    function getEpoch(epoch) {
        if (!epoch) { return 0; }
        if (typeof epoch.getTime === "function") { return epoch.getTime(); }
        if (typeof epoch === "number") { return epoch; }
        throw new TypeError("now should be milliseconds since UNIX epoch");
    }

    function inRange(from, to, timer) {
        return timer && timer.callAt >= from && timer.callAt <= to;
    }

    function mirrorDateProperties(target, source) {
        var prop;
        for (prop in source) {
            if (source.hasOwnProperty(prop)) {
                target[prop] = source[prop];
            }
        }

        // set special now implementation
        if (source.now) {
            target.now = function now() {
                return target.clock.now;
            };
        } else {
            delete target.now;
        }

        // set special toSource implementation
        if (source.toSource) {
            target.toSource = function toSource() {
                return source.toSource();
            };
        } else {
            delete target.toSource;
        }

        // set special toString implementation
        target.toString = function toString() {
            return source.toString();
        };

        target.prototype = source.prototype;
        target.parse = source.parse;
        target.UTC = source.UTC;
        target.prototype.toUTCString = source.prototype.toUTCString;

        return target;
    }

    function createDate() {
        function ClockDate(year, month, date, hour, minute, second, ms) {
            // Defensive and verbose to avoid potential harm in passing
            // explicit undefined when user does not pass argument
            switch (arguments.length) {
            case 0:
                return new NativeDate(ClockDate.clock.now);
            case 1:
                return new NativeDate(year);
            case 2:
                return new NativeDate(year, month);
            case 3:
                return new NativeDate(year, month, date);
            case 4:
                return new NativeDate(year, month, date, hour);
            case 5:
                return new NativeDate(year, month, date, hour, minute);
            case 6:
                return new NativeDate(year, month, date, hour, minute, second);
            default:
                return new NativeDate(year, month, date, hour, minute, second, ms);
            }
        }

        return mirrorDateProperties(ClockDate, NativeDate);
    }

    function addTimer(clock, timer) {
        if (timer.func === undefined) {
            throw new Error("Callback must be provided to timer calls");
        }

        if (!clock.timers) {
            clock.timers = {};
        }

        timer.id = uniqueTimerId++;
        timer.createdAt = clock.now;
        timer.callAt = clock.now + (timer.delay || (clock.duringTick ? 1 : 0));

        clock.timers[timer.id] = timer;

        if (addTimerReturnsObject) {
            return {
                id: timer.id,
                ref: NOOP,
                unref: NOOP
            };
        }

        return timer.id;
    }


    function compareTimers(a, b) {
        // Sort first by absolute timing
        if (a.callAt < b.callAt) {
            return -1;
        }
        if (a.callAt > b.callAt) {
            return 1;
        }

        // Sort next by immediate, immediate timers take precedence
        if (a.immediate && !b.immediate) {
            return -1;
        }
        if (!a.immediate && b.immediate) {
            return 1;
        }

        // Sort next by creation time, earlier-created timers take precedence
        if (a.createdAt < b.createdAt) {
            return -1;
        }
        if (a.createdAt > b.createdAt) {
            return 1;
        }

        // Sort next by id, lower-id timers take precedence
        if (a.id < b.id) {
            return -1;
        }
        if (a.id > b.id) {
            return 1;
        }

        // As timer ids are unique, no fallback `0` is necessary
    }

    function firstTimerInRange(clock, from, to) {
        var timers = clock.timers,
            timer = null,
            id,
            isInRange;

        for (id in timers) {
            if (timers.hasOwnProperty(id)) {
                isInRange = inRange(from, to, timers[id]);

                if (isInRange && (!timer || compareTimers(timer, timers[id]) === 1)) {
                    timer = timers[id];
                }
            }
        }

        return timer;
    }

    function callTimer(clock, timer) {
        var exception;

        if (typeof timer.interval === "number") {
            clock.timers[timer.id].callAt += timer.interval;
        } else {
            delete clock.timers[timer.id];
        }

        try {
            if (typeof timer.func === "function") {
                timer.func.apply(null, timer.args);
            } else {
                eval(timer.func);
            }
        } catch (e) {
            exception = e;
        }

        if (!clock.timers[timer.id]) {
            if (exception) {
                throw exception;
            }
            return;
        }

        if (exception) {
            throw exception;
        }
    }

    function timerType(timer) {
        if (timer.immediate) {
            return "Immediate";
        } else if (typeof timer.interval !== "undefined") {
            return "Interval";
        } else {
            return "Timeout";
        }
    }

    function clearTimer(clock, timerId, ttype) {
        if (!timerId) {
            // null appears to be allowed in most browsers, and appears to be
            // relied upon by some libraries, like Bootstrap carousel
            return;
        }

        if (!clock.timers) {
            clock.timers = [];
        }

        // in Node, timerId is an object with .ref()/.unref(), and
        // its .id field is the actual timer id.
        if (typeof timerId === "object") {
            timerId = timerId.id;
        }

        if (clock.timers.hasOwnProperty(timerId)) {
            // check that the ID matches a timer of the correct type
            var timer = clock.timers[timerId];
            if (timerType(timer) === ttype) {
                delete clock.timers[timerId];
            } else {
				throw new Error("Cannot clear timer: timer created with set" + ttype + "() but cleared with clear" + timerType(timer) + "()");
			}
        }
    }

    function uninstall(clock, target) {
        var method,
            i,
            l;

        for (i = 0, l = clock.methods.length; i < l; i++) {
            method = clock.methods[i];

            if (target[method].hadOwnProperty) {
                target[method] = clock["_" + method];
            } else {
                try {
                    delete target[method];
                } catch (ignore) {}
            }
        }

        // Prevent multiple executions which will completely remove these props
        clock.methods = [];
    }

    function hijackMethod(target, method, clock) {
        var prop;

        clock[method].hadOwnProperty = Object.prototype.hasOwnProperty.call(target, method);
        clock["_" + method] = target[method];

        if (method === "Date") {
            var date = mirrorDateProperties(clock[method], target[method]);
            target[method] = date;
        } else {
            target[method] = function () {
                return clock[method].apply(clock, arguments);
            };

            for (prop in clock[method]) {
                if (clock[method].hasOwnProperty(prop)) {
                    target[method][prop] = clock[method][prop];
                }
            }
        }

        target[method].clock = clock;
    }

    var timers = {
        setTimeout: setTimeout,
        clearTimeout: clearTimeout,
        setImmediate: global.setImmediate,
        clearImmediate: global.clearImmediate,
        setInterval: setInterval,
        clearInterval: clearInterval,
        Date: Date
    };

    var keys = Object.keys || function (obj) {
        var ks = [],
            key;

        for (key in obj) {
            if (obj.hasOwnProperty(key)) {
                ks.push(key);
            }
        }

        return ks;
    };

    exports.timers = timers;

    function createClock(now) {
        var clock = {
            now: getEpoch(now),
            timeouts: {},
            Date: createDate()
        };

        clock.Date.clock = clock;

        clock.setTimeout = function setTimeout(func, timeout) {
            return addTimer(clock, {
                func: func,
                args: Array.prototype.slice.call(arguments, 2),
                delay: timeout
            });
        };

        clock.clearTimeout = function clearTimeout(timerId) {
            return clearTimer(clock, timerId, "Timeout");
        };

        clock.setInterval = function setInterval(func, timeout) {
            return addTimer(clock, {
                func: func,
                args: Array.prototype.slice.call(arguments, 2),
                delay: timeout,
                interval: timeout
            });
        };

        clock.clearInterval = function clearInterval(timerId) {
            return clearTimer(clock, timerId, "Interval");
        };

        clock.setImmediate = function setImmediate(func) {
            return addTimer(clock, {
                func: func,
                args: Array.prototype.slice.call(arguments, 1),
                immediate: true
            });
        };

        clock.clearImmediate = function clearImmediate(timerId) {
            return clearTimer(clock, timerId, "Immediate");
        };

        clock.tick = function tick(ms) {
            ms = typeof ms === "number" ? ms : parseTime(ms);
            var tickFrom = clock.now, tickTo = clock.now + ms, previous = clock.now;
            var timer = firstTimerInRange(clock, tickFrom, tickTo);
            var oldNow;

            clock.duringTick = true;

            var firstException;
            while (timer && tickFrom <= tickTo) {
                if (clock.timers[timer.id]) {
                    tickFrom = clock.now = timer.callAt;
                    try {
                        oldNow = clock.now;
                        callTimer(clock, timer);
                        // compensate for any setSystemTime() call during timer callback
                        if (oldNow !== clock.now) {
                            tickFrom += clock.now - oldNow;
                            tickTo += clock.now - oldNow;
                            previous += clock.now - oldNow;
                        }
                    } catch (e) {
                        firstException = firstException || e;
                    }
                }

                timer = firstTimerInRange(clock, previous, tickTo);
                previous = tickFrom;
            }

            clock.duringTick = false;
            clock.now = tickTo;

            if (firstException) {
                throw firstException;
            }

            return clock.now;
        };

        clock.reset = function reset() {
            clock.timers = {};
        };

        clock.setSystemTime = function setSystemTime(now) {
            // determine time difference
            var newNow = getEpoch(now);
            var difference = newNow - clock.now;

            // update 'system clock'
            clock.now = newNow;

            // update timers and intervals to keep them stable
            for (var id in clock.timers) {
                if (clock.timers.hasOwnProperty(id)) {
                    var timer = clock.timers[id];
                    timer.createdAt += difference;
                    timer.callAt += difference;
                }
            }
        };

        return clock;
    }
    exports.createClock = createClock;

    exports.install = function install(target, now, toFake) {
        var i,
            l;

        if (typeof target === "number") {
            toFake = now;
            now = target;
            target = null;
        }

        if (!target) {
            target = global;
        }

        var clock = createClock(now);

        clock.uninstall = function () {
            uninstall(clock, target);
        };

        clock.methods = toFake || [];

        if (clock.methods.length === 0) {
            clock.methods = keys(timers);
        }

        for (i = 0, l = clock.methods.length; i < l; i++) {
            hijackMethod(target, clock.methods[i], clock);
        }

        return clock;
    };

}(global || this));

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],83:[function(require,module,exports){
((typeof define === "function" && define.amd && function (m) { define("samsam", m); }) ||
 (typeof module === "object" &&
      function (m) { module.exports = m(); }) || // Node
 function (m) { this.samsam = m(); } // Browser globals
)(function () {
    var o = Object.prototype;
    var div = typeof document !== "undefined" && document.createElement("div");

    function isNaN(value) {
        // Unlike global isNaN, this avoids type coercion
        // typeof check avoids IE host object issues, hat tip to
        // lodash
        var val = value; // JsLint thinks value !== value is "weird"
        return typeof value === "number" && value !== val;
    }

    function getClass(value) {
        // Returns the internal [[Class]] by calling Object.prototype.toString
        // with the provided value as this. Return value is a string, naming the
        // internal class, e.g. "Array"
        return o.toString.call(value).split(/[ \]]/)[1];
    }

    /**
     * @name samsam.isArguments
     * @param Object object
     *
     * Returns ``true`` if ``object`` is an ``arguments`` object,
     * ``false`` otherwise.
     */
    function isArguments(object) {
        if (getClass(object) === 'Arguments') { return true; }
        if (typeof object !== "object" || typeof object.length !== "number" ||
                getClass(object) === "Array") {
            return false;
        }
        if (typeof object.callee == "function") { return true; }
        try {
            object[object.length] = 6;
            delete object[object.length];
        } catch (e) {
            return true;
        }
        return false;
    }

    /**
     * @name samsam.isElement
     * @param Object object
     *
     * Returns ``true`` if ``object`` is a DOM element node. Unlike
     * Underscore.js/lodash, this function will return ``false`` if ``object``
     * is an *element-like* object, i.e. a regular object with a ``nodeType``
     * property that holds the value ``1``.
     */
    function isElement(object) {
        if (!object || object.nodeType !== 1 || !div) { return false; }
        try {
            object.appendChild(div);
            object.removeChild(div);
        } catch (e) {
            return false;
        }
        return true;
    }

    /**
     * @name samsam.keys
     * @param Object object
     *
     * Return an array of own property names.
     */
    function keys(object) {
        var ks = [], prop;
        for (prop in object) {
            if (o.hasOwnProperty.call(object, prop)) { ks.push(prop); }
        }
        return ks;
    }

    /**
     * @name samsam.isDate
     * @param Object value
     *
     * Returns true if the object is a ``Date``, or *date-like*. Duck typing
     * of date objects work by checking that the object has a ``getTime``
     * function whose return value equals the return value from the object's
     * ``valueOf``.
     */
    function isDate(value) {
        return typeof value.getTime == "function" &&
            value.getTime() == value.valueOf();
    }

    /**
     * @name samsam.isNegZero
     * @param Object value
     *
     * Returns ``true`` if ``value`` is ``-0``.
     */
    function isNegZero(value) {
        return value === 0 && 1 / value === -Infinity;
    }

    /**
     * @name samsam.equal
     * @param Object obj1
     * @param Object obj2
     *
     * Returns ``true`` if two objects are strictly equal. Compared to
     * ``===`` there are two exceptions:
     *
     *   - NaN is considered equal to NaN
     *   - -0 and +0 are not considered equal
     */
    function identical(obj1, obj2) {
        if (obj1 === obj2 || (isNaN(obj1) && isNaN(obj2))) {
            return obj1 !== 0 || isNegZero(obj1) === isNegZero(obj2);
        }
    }


    /**
     * @name samsam.deepEqual
     * @param Object obj1
     * @param Object obj2
     *
     * Deep equal comparison. Two values are "deep equal" if:
     *
     *   - They are equal, according to samsam.identical
     *   - They are both date objects representing the same time
     *   - They are both arrays containing elements that are all deepEqual
     *   - They are objects with the same set of properties, and each property
     *     in ``obj1`` is deepEqual to the corresponding property in ``obj2``
     *
     * Supports cyclic objects.
     */
    function deepEqualCyclic(obj1, obj2) {

        // used for cyclic comparison
        // contain already visited objects
        var objects1 = [],
            objects2 = [],
        // contain pathes (position in the object structure)
        // of the already visited objects
        // indexes same as in objects arrays
            paths1 = [],
            paths2 = [],
        // contains combinations of already compared objects
        // in the manner: { "$1['ref']$2['ref']": true }
            compared = {};

        /**
         * used to check, if the value of a property is an object
         * (cyclic logic is only needed for objects)
         * only needed for cyclic logic
         */
        function isObject(value) {

            if (typeof value === 'object' && value !== null &&
                    !(value instanceof Boolean) &&
                    !(value instanceof Date)    &&
                    !(value instanceof Number)  &&
                    !(value instanceof RegExp)  &&
                    !(value instanceof String)) {

                return true;
            }

            return false;
        }

        /**
         * returns the index of the given object in the
         * given objects array, -1 if not contained
         * only needed for cyclic logic
         */
        function getIndex(objects, obj) {

            var i;
            for (i = 0; i < objects.length; i++) {
                if (objects[i] === obj) {
                    return i;
                }
            }

            return -1;
        }

        // does the recursion for the deep equal check
        return (function deepEqual(obj1, obj2, path1, path2) {
            var type1 = typeof obj1;
            var type2 = typeof obj2;

            // == null also matches undefined
            if (obj1 === obj2 ||
                    isNaN(obj1) || isNaN(obj2) ||
                    obj1 == null || obj2 == null ||
                    type1 !== "object" || type2 !== "object") {

                return identical(obj1, obj2);
            }

            // Elements are only equal if identical(expected, actual)
            if (isElement(obj1) || isElement(obj2)) { return false; }

            var isDate1 = isDate(obj1), isDate2 = isDate(obj2);
            if (isDate1 || isDate2) {
                if (!isDate1 || !isDate2 || obj1.getTime() !== obj2.getTime()) {
                    return false;
                }
            }

            if (obj1 instanceof RegExp && obj2 instanceof RegExp) {
                if (obj1.toString() !== obj2.toString()) { return false; }
            }

            var class1 = getClass(obj1);
            var class2 = getClass(obj2);
            var keys1 = keys(obj1);
            var keys2 = keys(obj2);

            if (isArguments(obj1) || isArguments(obj2)) {
                if (obj1.length !== obj2.length) { return false; }
            } else {
                if (type1 !== type2 || class1 !== class2 ||
                        keys1.length !== keys2.length) {
                    return false;
                }
            }

            var key, i, l,
                // following vars are used for the cyclic logic
                value1, value2,
                isObject1, isObject2,
                index1, index2,
                newPath1, newPath2;

            for (i = 0, l = keys1.length; i < l; i++) {
                key = keys1[i];
                if (!o.hasOwnProperty.call(obj2, key)) {
                    return false;
                }

                // Start of the cyclic logic

                value1 = obj1[key];
                value2 = obj2[key];

                isObject1 = isObject(value1);
                isObject2 = isObject(value2);

                // determine, if the objects were already visited
                // (it's faster to check for isObject first, than to
                // get -1 from getIndex for non objects)
                index1 = isObject1 ? getIndex(objects1, value1) : -1;
                index2 = isObject2 ? getIndex(objects2, value2) : -1;

                // determine the new pathes of the objects
                // - for non cyclic objects the current path will be extended
                //   by current property name
                // - for cyclic objects the stored path is taken
                newPath1 = index1 !== -1
                    ? paths1[index1]
                    : path1 + '[' + JSON.stringify(key) + ']';
                newPath2 = index2 !== -1
                    ? paths2[index2]
                    : path2 + '[' + JSON.stringify(key) + ']';

                // stop recursion if current objects are already compared
                if (compared[newPath1 + newPath2]) {
                    return true;
                }

                // remember the current objects and their pathes
                if (index1 === -1 && isObject1) {
                    objects1.push(value1);
                    paths1.push(newPath1);
                }
                if (index2 === -1 && isObject2) {
                    objects2.push(value2);
                    paths2.push(newPath2);
                }

                // remember that the current objects are already compared
                if (isObject1 && isObject2) {
                    compared[newPath1 + newPath2] = true;
                }

                // End of cyclic logic

                // neither value1 nor value2 is a cycle
                // continue with next level
                if (!deepEqual(value1, value2, newPath1, newPath2)) {
                    return false;
                }
            }

            return true;

        }(obj1, obj2, '$1', '$2'));
    }

    var match;

    function arrayContains(array, subset) {
        if (subset.length === 0) { return true; }
        var i, l, j, k;
        for (i = 0, l = array.length; i < l; ++i) {
            if (match(array[i], subset[0])) {
                for (j = 0, k = subset.length; j < k; ++j) {
                    if (!match(array[i + j], subset[j])) { return false; }
                }
                return true;
            }
        }
        return false;
    }

    /**
     * @name samsam.match
     * @param Object object
     * @param Object matcher
     *
     * Compare arbitrary value ``object`` with matcher.
     */
    match = function match(object, matcher) {
        if (matcher && typeof matcher.test === "function") {
            return matcher.test(object);
        }

        if (typeof matcher === "function") {
            return matcher(object) === true;
        }

        if (typeof matcher === "string") {
            matcher = matcher.toLowerCase();
            var notNull = typeof object === "string" || !!object;
            return notNull &&
                (String(object)).toLowerCase().indexOf(matcher) >= 0;
        }

        if (typeof matcher === "number") {
            return matcher === object;
        }

        if (typeof matcher === "boolean") {
            return matcher === object;
        }

        if (typeof(matcher) === "undefined") {
            return typeof(object) === "undefined";
        }

        if (matcher === null) {
            return object === null;
        }

        if (getClass(object) === "Array" && getClass(matcher) === "Array") {
            return arrayContains(object, matcher);
        }

        if (matcher && typeof matcher === "object") {
            if (matcher === object) {
                return true;
            }
            var prop;
            for (prop in matcher) {
                var value = object[prop];
                if (typeof value === "undefined" &&
                        typeof object.getAttribute === "function") {
                    value = object.getAttribute(prop);
                }
                if (matcher[prop] === null || typeof matcher[prop] === 'undefined') {
                    if (value !== matcher[prop]) {
                        return false;
                    }
                } else if (typeof  value === "undefined" || !match(value, matcher[prop])) {
                    return false;
                }
            }
            return true;
        }

        throw new Error("Matcher was not a string, a number, a " +
                        "function, a boolean or an object");
    };

    return {
        isArguments: isArguments,
        isElement: isElement,
        isDate: isDate,
        isNegZero: isNegZero,
        identical: identical,
        deepEqual: deepEqualCyclic,
        match: match,
        keys: keys
    };
});

},{}],84:[function(require,module,exports){
/*!
 * Sizzle CSS Selector Engine v2.2.0
 * http://sizzlejs.com/
 *
 * Copyright jQuery Foundation and other contributors
 * Released under the MIT license
 * http://jquery.org/license
 *
 * Date: 2015-04-10
 */
(function( window ) {

var i,
	support,
	Expr,
	getText,
	isXML,
	tokenize,
	compile,
	select,
	outermostContext,
	sortInput,
	hasDuplicate,

	// Local document vars
	setDocument,
	document,
	docElem,
	documentIsHTML,
	rbuggyQSA,
	rbuggyMatches,
	matches,
	contains,

	// Instance-specific data
	expando = "sizzle" + 1 * new Date(),
	preferredDoc = window.document,
	dirruns = 0,
	done = 0,
	classCache = createCache(),
	tokenCache = createCache(),
	compilerCache = createCache(),
	sortOrder = function( a, b ) {
		if ( a === b ) {
			hasDuplicate = true;
		}
		return 0;
	},

	// General-purpose constants
	MAX_NEGATIVE = 1 << 31,

	// Instance methods
	hasOwn = ({}).hasOwnProperty,
	arr = [],
	pop = arr.pop,
	push_native = arr.push,
	push = arr.push,
	slice = arr.slice,
	// Use a stripped-down indexOf as it's faster than native
	// http://jsperf.com/thor-indexof-vs-for/5
	indexOf = function( list, elem ) {
		var i = 0,
			len = list.length;
		for ( ; i < len; i++ ) {
			if ( list[i] === elem ) {
				return i;
			}
		}
		return -1;
	},

	booleans = "checked|selected|async|autofocus|autoplay|controls|defer|disabled|hidden|ismap|loop|multiple|open|readonly|required|scoped",

	// Regular expressions

	// http://www.w3.org/TR/css3-selectors/#whitespace
	whitespace = "[\\x20\\t\\r\\n\\f]",

	// http://www.w3.org/TR/CSS21/syndata.html#value-def-identifier
	identifier = "(?:\\\\.|[\\w-]|[^\\x00-\\xa0])+",

	// Attribute selectors: http://www.w3.org/TR/selectors/#attribute-selectors
	attributes = "\\[" + whitespace + "*(" + identifier + ")(?:" + whitespace +
		// Operator (capture 2)
		"*([*^$|!~]?=)" + whitespace +
		// "Attribute values must be CSS identifiers [capture 5] or strings [capture 3 or capture 4]"
		"*(?:'((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\"|(" + identifier + "))|)" + whitespace +
		"*\\]",

	pseudos = ":(" + identifier + ")(?:\\((" +
		// To reduce the number of selectors needing tokenize in the preFilter, prefer arguments:
		// 1. quoted (capture 3; capture 4 or capture 5)
		"('((?:\\\\.|[^\\\\'])*)'|\"((?:\\\\.|[^\\\\\"])*)\")|" +
		// 2. simple (capture 6)
		"((?:\\\\.|[^\\\\()[\\]]|" + attributes + ")*)|" +
		// 3. anything else (capture 2)
		".*" +
		")\\)|)",

	// Leading and non-escaped trailing whitespace, capturing some non-whitespace characters preceding the latter
	rwhitespace = new RegExp( whitespace + "+", "g" ),
	rtrim = new RegExp( "^" + whitespace + "+|((?:^|[^\\\\])(?:\\\\.)*)" + whitespace + "+$", "g" ),

	rcomma = new RegExp( "^" + whitespace + "*," + whitespace + "*" ),
	rcombinators = new RegExp( "^" + whitespace + "*([>+~]|" + whitespace + ")" + whitespace + "*" ),

	rattributeQuotes = new RegExp( "=" + whitespace + "*([^\\]'\"]*?)" + whitespace + "*\\]", "g" ),

	rpseudo = new RegExp( pseudos ),
	ridentifier = new RegExp( "^" + identifier + "$" ),

	matchExpr = {
		"ID": new RegExp( "^#(" + identifier + ")" ),
		"CLASS": new RegExp( "^\\.(" + identifier + ")" ),
		"TAG": new RegExp( "^(" + identifier + "|[*])" ),
		"ATTR": new RegExp( "^" + attributes ),
		"PSEUDO": new RegExp( "^" + pseudos ),
		"CHILD": new RegExp( "^:(only|first|last|nth|nth-last)-(child|of-type)(?:\\(" + whitespace +
			"*(even|odd|(([+-]|)(\\d*)n|)" + whitespace + "*(?:([+-]|)" + whitespace +
			"*(\\d+)|))" + whitespace + "*\\)|)", "i" ),
		"bool": new RegExp( "^(?:" + booleans + ")$", "i" ),
		// For use in libraries implementing .is()
		// We use this for POS matching in `select`
		"needsContext": new RegExp( "^" + whitespace + "*[>+~]|:(even|odd|eq|gt|lt|nth|first|last)(?:\\(" +
			whitespace + "*((?:-\\d)?\\d*)" + whitespace + "*\\)|)(?=[^-]|$)", "i" )
	},

	rinputs = /^(?:input|select|textarea|button)$/i,
	rheader = /^h\d$/i,

	rnative = /^[^{]+\{\s*\[native \w/,

	// Easily-parseable/retrievable ID or TAG or CLASS selectors
	rquickExpr = /^(?:#([\w-]+)|(\w+)|\.([\w-]+))$/,

	rsibling = /[+~]/,
	rescape = /'|\\/g,

	// CSS escapes http://www.w3.org/TR/CSS21/syndata.html#escaped-characters
	runescape = new RegExp( "\\\\([\\da-f]{1,6}" + whitespace + "?|(" + whitespace + ")|.)", "ig" ),
	funescape = function( _, escaped, escapedWhitespace ) {
		var high = "0x" + escaped - 0x10000;
		// NaN means non-codepoint
		// Support: Firefox<24
		// Workaround erroneous numeric interpretation of +"0x"
		return high !== high || escapedWhitespace ?
			escaped :
			high < 0 ?
				// BMP codepoint
				String.fromCharCode( high + 0x10000 ) :
				// Supplemental Plane codepoint (surrogate pair)
				String.fromCharCode( high >> 10 | 0xD800, high & 0x3FF | 0xDC00 );
	},

	// Used for iframes
	// See setDocument()
	// Removing the function wrapper causes a "Permission Denied"
	// error in IE
	unloadHandler = function() {
		setDocument();
	};

// Optimize for push.apply( _, NodeList )
try {
	push.apply(
		(arr = slice.call( preferredDoc.childNodes )),
		preferredDoc.childNodes
	);
	// Support: Android<4.0
	// Detect silently failing push.apply
	arr[ preferredDoc.childNodes.length ].nodeType;
} catch ( e ) {
	push = { apply: arr.length ?

		// Leverage slice if possible
		function( target, els ) {
			push_native.apply( target, slice.call(els) );
		} :

		// Support: IE<9
		// Otherwise append directly
		function( target, els ) {
			var j = target.length,
				i = 0;
			// Can't trust NodeList.length
			while ( (target[j++] = els[i++]) ) {}
			target.length = j - 1;
		}
	};
}

function Sizzle( selector, context, results, seed ) {
	var m, i, elem, nid, match, groups, newSelector,
		newContext = context && context.ownerDocument,

		// nodeType defaults to 9, since context defaults to document
		nodeType = context ? context.nodeType : 9;

	results = results || [];

	// Return early from calls with invalid selector or context
	if ( typeof selector !== "string" || !selector ||
		nodeType !== 1 && nodeType !== 9 && nodeType !== 11 ) {

		return results;
	}

	// Try to shortcut find operations (as opposed to filters) in HTML documents
	if ( !seed ) {

		if ( ( context ? context.ownerDocument || context : preferredDoc ) !== document ) {
			setDocument( context );
		}
		context = context || document;

		if ( documentIsHTML ) {

			// If the selector is sufficiently simple, try using a "get*By*" DOM method
			// (excepting DocumentFragment context, where the methods don't exist)
			if ( nodeType !== 11 && (match = rquickExpr.exec( selector )) ) {

				// ID selector
				if ( (m = match[1]) ) {

					// Document context
					if ( nodeType === 9 ) {
						if ( (elem = context.getElementById( m )) ) {

							// Support: IE, Opera, Webkit
							// TODO: identify versions
							// getElementById can match elements by name instead of ID
							if ( elem.id === m ) {
								results.push( elem );
								return results;
							}
						} else {
							return results;
						}

					// Element context
					} else {

						// Support: IE, Opera, Webkit
						// TODO: identify versions
						// getElementById can match elements by name instead of ID
						if ( newContext && (elem = newContext.getElementById( m )) &&
							contains( context, elem ) &&
							elem.id === m ) {

							results.push( elem );
							return results;
						}
					}

				// Type selector
				} else if ( match[2] ) {
					push.apply( results, context.getElementsByTagName( selector ) );
					return results;

				// Class selector
				} else if ( (m = match[3]) && support.getElementsByClassName &&
					context.getElementsByClassName ) {

					push.apply( results, context.getElementsByClassName( m ) );
					return results;
				}
			}

			// Take advantage of querySelectorAll
			if ( support.qsa &&
				!compilerCache[ selector + " " ] &&
				(!rbuggyQSA || !rbuggyQSA.test( selector )) ) {

				if ( nodeType !== 1 ) {
					newContext = context;
					newSelector = selector;

				// qSA looks outside Element context, which is not what we want
				// Thanks to Andrew Dupont for this workaround technique
				// Support: IE <=8
				// Exclude object elements
				} else if ( context.nodeName.toLowerCase() !== "object" ) {

					// Capture the context ID, setting it first if necessary
					if ( (nid = context.getAttribute( "id" )) ) {
						nid = nid.replace( rescape, "\\$&" );
					} else {
						context.setAttribute( "id", (nid = expando) );
					}

					// Prefix every selector in the list
					groups = tokenize( selector );
					i = groups.length;
					while ( i-- ) {
						groups[i] = "[id='" + nid + "'] " + toSelector( groups[i] );
					}
					newSelector = groups.join( "," );

					// Expand context for sibling selectors
					newContext = rsibling.test( selector ) && testContext( context.parentNode ) ||
						context;
				}

				if ( newSelector ) {
					try {
						push.apply( results,
							newContext.querySelectorAll( newSelector )
						);
						return results;
					} catch ( qsaError ) {
					} finally {
						if ( nid === expando ) {
							context.removeAttribute( "id" );
						}
					}
				}
			}
		}
	}

	// All others
	return select( selector.replace( rtrim, "$1" ), context, results, seed );
}

/**
 * Create key-value caches of limited size
 * @returns {function(string, object)} Returns the Object data after storing it on itself with
 *	property name the (space-suffixed) string and (if the cache is larger than Expr.cacheLength)
 *	deleting the oldest entry
 */
function createCache() {
	var keys = [];

	function cache( key, value ) {
		// Use (key + " ") to avoid collision with native prototype properties (see Issue #157)
		if ( keys.push( key + " " ) > Expr.cacheLength ) {
			// Only keep the most recent entries
			delete cache[ keys.shift() ];
		}
		return (cache[ key + " " ] = value);
	}
	return cache;
}

/**
 * Mark a function for special use by Sizzle
 * @param {Function} fn The function to mark
 */
function markFunction( fn ) {
	fn[ expando ] = true;
	return fn;
}

/**
 * Support testing using an element
 * @param {Function} fn Passed the created div and expects a boolean result
 */
function assert( fn ) {
	var div = document.createElement("div");

	try {
		return !!fn( div );
	} catch (e) {
		return false;
	} finally {
		// Remove from its parent by default
		if ( div.parentNode ) {
			div.parentNode.removeChild( div );
		}
		// release memory in IE
		div = null;
	}
}

/**
 * Adds the same handler for all of the specified attrs
 * @param {String} attrs Pipe-separated list of attributes
 * @param {Function} handler The method that will be applied
 */
function addHandle( attrs, handler ) {
	var arr = attrs.split("|"),
		i = attrs.length;

	while ( i-- ) {
		Expr.attrHandle[ arr[i] ] = handler;
	}
}

/**
 * Checks document order of two siblings
 * @param {Element} a
 * @param {Element} b
 * @returns {Number} Returns less than 0 if a precedes b, greater than 0 if a follows b
 */
function siblingCheck( a, b ) {
	var cur = b && a,
		diff = cur && a.nodeType === 1 && b.nodeType === 1 &&
			( ~b.sourceIndex || MAX_NEGATIVE ) -
			( ~a.sourceIndex || MAX_NEGATIVE );

	// Use IE sourceIndex if available on both nodes
	if ( diff ) {
		return diff;
	}

	// Check if b follows a
	if ( cur ) {
		while ( (cur = cur.nextSibling) ) {
			if ( cur === b ) {
				return -1;
			}
		}
	}

	return a ? 1 : -1;
}

/**
 * Returns a function to use in pseudos for input types
 * @param {String} type
 */
function createInputPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return name === "input" && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for buttons
 * @param {String} type
 */
function createButtonPseudo( type ) {
	return function( elem ) {
		var name = elem.nodeName.toLowerCase();
		return (name === "input" || name === "button") && elem.type === type;
	};
}

/**
 * Returns a function to use in pseudos for positionals
 * @param {Function} fn
 */
function createPositionalPseudo( fn ) {
	return markFunction(function( argument ) {
		argument = +argument;
		return markFunction(function( seed, matches ) {
			var j,
				matchIndexes = fn( [], seed.length, argument ),
				i = matchIndexes.length;

			// Match elements found at the specified indexes
			while ( i-- ) {
				if ( seed[ (j = matchIndexes[i]) ] ) {
					seed[j] = !(matches[j] = seed[j]);
				}
			}
		});
	});
}

/**
 * Checks a node for validity as a Sizzle context
 * @param {Element|Object=} context
 * @returns {Element|Object|Boolean} The input node if acceptable, otherwise a falsy value
 */
function testContext( context ) {
	return context && typeof context.getElementsByTagName !== "undefined" && context;
}

// Expose support vars for convenience
support = Sizzle.support = {};

/**
 * Detects XML nodes
 * @param {Element|Object} elem An element or a document
 * @returns {Boolean} True iff elem is a non-HTML XML node
 */
isXML = Sizzle.isXML = function( elem ) {
	// documentElement is verified for cases where it doesn't yet exist
	// (such as loading iframes in IE - #4833)
	var documentElement = elem && (elem.ownerDocument || elem).documentElement;
	return documentElement ? documentElement.nodeName !== "HTML" : false;
};

/**
 * Sets document-related variables once based on the current document
 * @param {Element|Object} [doc] An element or document object to use to set the document
 * @returns {Object} Returns the current document
 */
setDocument = Sizzle.setDocument = function( node ) {
	var hasCompare, parent,
		doc = node ? node.ownerDocument || node : preferredDoc;

	// Return early if doc is invalid or already selected
	if ( doc === document || doc.nodeType !== 9 || !doc.documentElement ) {
		return document;
	}

	// Update global variables
	document = doc;
	docElem = document.documentElement;
	documentIsHTML = !isXML( document );

	// Support: IE 9 - 11
	// Accessing iframe documents after unload throws "permission denied" errors (jQuery #13936)
	// Limit the fix to IE with document.documentMode and IE >=9 with document.defaultView
	if ( document.documentMode && (parent = document.defaultView) && parent.top !== parent ) {
		// Support: IE 11
		if ( parent.addEventListener ) {
			parent.addEventListener( "unload", unloadHandler, false );

		// Support: IE 9 - 10 only
		} else if ( parent.attachEvent ) {
			parent.attachEvent( "onunload", unloadHandler );
		}
	}

	/* Attributes
	---------------------------------------------------------------------- */

	// Support: IE<8
	// Verify that getAttribute really returns attributes and not properties
	// (excepting IE8 booleans)
	support.attributes = assert(function( div ) {
		div.className = "i";
		return !div.getAttribute("className");
	});

	/* getElement(s)By*
	---------------------------------------------------------------------- */

	// Check if getElementsByTagName("*") returns only elements
	support.getElementsByTagName = assert(function( div ) {
		div.appendChild( document.createComment("") );
		return !div.getElementsByTagName("*").length;
	});

	// Support: IE<9
	support.getElementsByClassName = rnative.test( document.getElementsByClassName );

	// Support: IE<10
	// Check if getElementById returns elements by name
	// The broken getElementById methods don't pick up programatically-set names,
	// so use a roundabout getElementsByName test
	support.getById = assert(function( div ) {
		docElem.appendChild( div ).id = expando;
		return !document.getElementsByName || !document.getElementsByName( expando ).length;
	});

	// ID find and filter
	if ( support.getById ) {
		Expr.find["ID"] = function( id, context ) {
			if ( typeof context.getElementById !== "undefined" && documentIsHTML ) {
				var m = context.getElementById( id );
				return m ? [ m ] : [];
			}
		};
		Expr.filter["ID"] = function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				return elem.getAttribute("id") === attrId;
			};
		};
	} else {
		// Support: IE6/7
		// getElementById is not reliable as a find shortcut
		delete Expr.find["ID"];

		Expr.filter["ID"] =  function( id ) {
			var attrId = id.replace( runescape, funescape );
			return function( elem ) {
				var node = typeof elem.getAttributeNode !== "undefined" &&
					elem.getAttributeNode("id");
				return node && node.value === attrId;
			};
		};
	}

	// Tag
	Expr.find["TAG"] = support.getElementsByTagName ?
		function( tag, context ) {
			if ( typeof context.getElementsByTagName !== "undefined" ) {
				return context.getElementsByTagName( tag );

			// DocumentFragment nodes don't have gEBTN
			} else if ( support.qsa ) {
				return context.querySelectorAll( tag );
			}
		} :

		function( tag, context ) {
			var elem,
				tmp = [],
				i = 0,
				// By happy coincidence, a (broken) gEBTN appears on DocumentFragment nodes too
				results = context.getElementsByTagName( tag );

			// Filter out possible comments
			if ( tag === "*" ) {
				while ( (elem = results[i++]) ) {
					if ( elem.nodeType === 1 ) {
						tmp.push( elem );
					}
				}

				return tmp;
			}
			return results;
		};

	// Class
	Expr.find["CLASS"] = support.getElementsByClassName && function( className, context ) {
		if ( typeof context.getElementsByClassName !== "undefined" && documentIsHTML ) {
			return context.getElementsByClassName( className );
		}
	};

	/* QSA/matchesSelector
	---------------------------------------------------------------------- */

	// QSA and matchesSelector support

	// matchesSelector(:active) reports false when true (IE9/Opera 11.5)
	rbuggyMatches = [];

	// qSa(:focus) reports false when true (Chrome 21)
	// We allow this because of a bug in IE8/9 that throws an error
	// whenever `document.activeElement` is accessed on an iframe
	// So, we allow :focus to pass through QSA all the time to avoid the IE error
	// See http://bugs.jquery.com/ticket/13378
	rbuggyQSA = [];

	if ( (support.qsa = rnative.test( document.querySelectorAll )) ) {
		// Build QSA regex
		// Regex strategy adopted from Diego Perini
		assert(function( div ) {
			// Select is set to empty string on purpose
			// This is to test IE's treatment of not explicitly
			// setting a boolean content attribute,
			// since its presence should be enough
			// http://bugs.jquery.com/ticket/12359
			docElem.appendChild( div ).innerHTML = "<a id='" + expando + "'></a>" +
				"<select id='" + expando + "-\r\\' msallowcapture=''>" +
				"<option selected=''></option></select>";

			// Support: IE8, Opera 11-12.16
			// Nothing should be selected when empty strings follow ^= or $= or *=
			// The test attribute must be unknown in Opera but "safe" for WinRT
			// http://msdn.microsoft.com/en-us/library/ie/hh465388.aspx#attribute_section
			if ( div.querySelectorAll("[msallowcapture^='']").length ) {
				rbuggyQSA.push( "[*^$]=" + whitespace + "*(?:''|\"\")" );
			}

			// Support: IE8
			// Boolean attributes and "value" are not treated correctly
			if ( !div.querySelectorAll("[selected]").length ) {
				rbuggyQSA.push( "\\[" + whitespace + "*(?:value|" + booleans + ")" );
			}

			// Support: Chrome<29, Android<4.4, Safari<7.0+, iOS<7.0+, PhantomJS<1.9.8+
			if ( !div.querySelectorAll( "[id~=" + expando + "-]" ).length ) {
				rbuggyQSA.push("~=");
			}

			// Webkit/Opera - :checked should return selected option elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":checked").length ) {
				rbuggyQSA.push(":checked");
			}

			// Support: Safari 8+, iOS 8+
			// https://bugs.webkit.org/show_bug.cgi?id=136851
			// In-page `selector#id sibing-combinator selector` fails
			if ( !div.querySelectorAll( "a#" + expando + "+*" ).length ) {
				rbuggyQSA.push(".#.+[+~]");
			}
		});

		assert(function( div ) {
			// Support: Windows 8 Native Apps
			// The type and name attributes are restricted during .innerHTML assignment
			var input = document.createElement("input");
			input.setAttribute( "type", "hidden" );
			div.appendChild( input ).setAttribute( "name", "D" );

			// Support: IE8
			// Enforce case-sensitivity of name attribute
			if ( div.querySelectorAll("[name=d]").length ) {
				rbuggyQSA.push( "name" + whitespace + "*[*^$|!~]?=" );
			}

			// FF 3.5 - :enabled/:disabled and hidden elements (hidden elements are still enabled)
			// IE8 throws error here and will not see later tests
			if ( !div.querySelectorAll(":enabled").length ) {
				rbuggyQSA.push( ":enabled", ":disabled" );
			}

			// Opera 10-11 does not throw on post-comma invalid pseudos
			div.querySelectorAll("*,:x");
			rbuggyQSA.push(",.*:");
		});
	}

	if ( (support.matchesSelector = rnative.test( (matches = docElem.matches ||
		docElem.webkitMatchesSelector ||
		docElem.mozMatchesSelector ||
		docElem.oMatchesSelector ||
		docElem.msMatchesSelector) )) ) {

		assert(function( div ) {
			// Check to see if it's possible to do matchesSelector
			// on a disconnected node (IE 9)
			support.disconnectedMatch = matches.call( div, "div" );

			// This should fail with an exception
			// Gecko does not error, returns false instead
			matches.call( div, "[s!='']:x" );
			rbuggyMatches.push( "!=", pseudos );
		});
	}

	rbuggyQSA = rbuggyQSA.length && new RegExp( rbuggyQSA.join("|") );
	rbuggyMatches = rbuggyMatches.length && new RegExp( rbuggyMatches.join("|") );

	/* Contains
	---------------------------------------------------------------------- */
	hasCompare = rnative.test( docElem.compareDocumentPosition );

	// Element contains another
	// Purposefully self-exclusive
	// As in, an element does not contain itself
	contains = hasCompare || rnative.test( docElem.contains ) ?
		function( a, b ) {
			var adown = a.nodeType === 9 ? a.documentElement : a,
				bup = b && b.parentNode;
			return a === bup || !!( bup && bup.nodeType === 1 && (
				adown.contains ?
					adown.contains( bup ) :
					a.compareDocumentPosition && a.compareDocumentPosition( bup ) & 16
			));
		} :
		function( a, b ) {
			if ( b ) {
				while ( (b = b.parentNode) ) {
					if ( b === a ) {
						return true;
					}
				}
			}
			return false;
		};

	/* Sorting
	---------------------------------------------------------------------- */

	// Document order sorting
	sortOrder = hasCompare ?
	function( a, b ) {

		// Flag for duplicate removal
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		// Sort on method existence if only one input has compareDocumentPosition
		var compare = !a.compareDocumentPosition - !b.compareDocumentPosition;
		if ( compare ) {
			return compare;
		}

		// Calculate position if both inputs belong to the same document
		compare = ( a.ownerDocument || a ) === ( b.ownerDocument || b ) ?
			a.compareDocumentPosition( b ) :

			// Otherwise we know they are disconnected
			1;

		// Disconnected nodes
		if ( compare & 1 ||
			(!support.sortDetached && b.compareDocumentPosition( a ) === compare) ) {

			// Choose the first element that is related to our preferred document
			if ( a === document || a.ownerDocument === preferredDoc && contains(preferredDoc, a) ) {
				return -1;
			}
			if ( b === document || b.ownerDocument === preferredDoc && contains(preferredDoc, b) ) {
				return 1;
			}

			// Maintain original order
			return sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;
		}

		return compare & 4 ? -1 : 1;
	} :
	function( a, b ) {
		// Exit early if the nodes are identical
		if ( a === b ) {
			hasDuplicate = true;
			return 0;
		}

		var cur,
			i = 0,
			aup = a.parentNode,
			bup = b.parentNode,
			ap = [ a ],
			bp = [ b ];

		// Parentless nodes are either documents or disconnected
		if ( !aup || !bup ) {
			return a === document ? -1 :
				b === document ? 1 :
				aup ? -1 :
				bup ? 1 :
				sortInput ?
				( indexOf( sortInput, a ) - indexOf( sortInput, b ) ) :
				0;

		// If the nodes are siblings, we can do a quick check
		} else if ( aup === bup ) {
			return siblingCheck( a, b );
		}

		// Otherwise we need full lists of their ancestors for comparison
		cur = a;
		while ( (cur = cur.parentNode) ) {
			ap.unshift( cur );
		}
		cur = b;
		while ( (cur = cur.parentNode) ) {
			bp.unshift( cur );
		}

		// Walk down the tree looking for a discrepancy
		while ( ap[i] === bp[i] ) {
			i++;
		}

		return i ?
			// Do a sibling check if the nodes have a common ancestor
			siblingCheck( ap[i], bp[i] ) :

			// Otherwise nodes in our document sort first
			ap[i] === preferredDoc ? -1 :
			bp[i] === preferredDoc ? 1 :
			0;
	};

	return document;
};

Sizzle.matches = function( expr, elements ) {
	return Sizzle( expr, null, null, elements );
};

Sizzle.matchesSelector = function( elem, expr ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	// Make sure that attribute selectors are quoted
	expr = expr.replace( rattributeQuotes, "='$1']" );

	if ( support.matchesSelector && documentIsHTML &&
		!compilerCache[ expr + " " ] &&
		( !rbuggyMatches || !rbuggyMatches.test( expr ) ) &&
		( !rbuggyQSA     || !rbuggyQSA.test( expr ) ) ) {

		try {
			var ret = matches.call( elem, expr );

			// IE 9's matchesSelector returns false on disconnected nodes
			if ( ret || support.disconnectedMatch ||
					// As well, disconnected nodes are said to be in a document
					// fragment in IE 9
					elem.document && elem.document.nodeType !== 11 ) {
				return ret;
			}
		} catch (e) {}
	}

	return Sizzle( expr, document, null, [ elem ] ).length > 0;
};

Sizzle.contains = function( context, elem ) {
	// Set document vars if needed
	if ( ( context.ownerDocument || context ) !== document ) {
		setDocument( context );
	}
	return contains( context, elem );
};

Sizzle.attr = function( elem, name ) {
	// Set document vars if needed
	if ( ( elem.ownerDocument || elem ) !== document ) {
		setDocument( elem );
	}

	var fn = Expr.attrHandle[ name.toLowerCase() ],
		// Don't get fooled by Object.prototype properties (jQuery #13807)
		val = fn && hasOwn.call( Expr.attrHandle, name.toLowerCase() ) ?
			fn( elem, name, !documentIsHTML ) :
			undefined;

	return val !== undefined ?
		val :
		support.attributes || !documentIsHTML ?
			elem.getAttribute( name ) :
			(val = elem.getAttributeNode(name)) && val.specified ?
				val.value :
				null;
};

Sizzle.error = function( msg ) {
	throw new Error( "Syntax error, unrecognized expression: " + msg );
};

/**
 * Document sorting and removing duplicates
 * @param {ArrayLike} results
 */
Sizzle.uniqueSort = function( results ) {
	var elem,
		duplicates = [],
		j = 0,
		i = 0;

	// Unless we *know* we can detect duplicates, assume their presence
	hasDuplicate = !support.detectDuplicates;
	sortInput = !support.sortStable && results.slice( 0 );
	results.sort( sortOrder );

	if ( hasDuplicate ) {
		while ( (elem = results[i++]) ) {
			if ( elem === results[ i ] ) {
				j = duplicates.push( i );
			}
		}
		while ( j-- ) {
			results.splice( duplicates[ j ], 1 );
		}
	}

	// Clear input after sorting to release objects
	// See https://github.com/jquery/sizzle/pull/225
	sortInput = null;

	return results;
};

/**
 * Utility function for retrieving the text value of an array of DOM nodes
 * @param {Array|Element} elem
 */
getText = Sizzle.getText = function( elem ) {
	var node,
		ret = "",
		i = 0,
		nodeType = elem.nodeType;

	if ( !nodeType ) {
		// If no nodeType, this is expected to be an array
		while ( (node = elem[i++]) ) {
			// Do not traverse comment nodes
			ret += getText( node );
		}
	} else if ( nodeType === 1 || nodeType === 9 || nodeType === 11 ) {
		// Use textContent for elements
		// innerText usage removed for consistency of new lines (jQuery #11153)
		if ( typeof elem.textContent === "string" ) {
			return elem.textContent;
		} else {
			// Traverse its children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				ret += getText( elem );
			}
		}
	} else if ( nodeType === 3 || nodeType === 4 ) {
		return elem.nodeValue;
	}
	// Do not include comment or processing instruction nodes

	return ret;
};

Expr = Sizzle.selectors = {

	// Can be adjusted by the user
	cacheLength: 50,

	createPseudo: markFunction,

	match: matchExpr,

	attrHandle: {},

	find: {},

	relative: {
		">": { dir: "parentNode", first: true },
		" ": { dir: "parentNode" },
		"+": { dir: "previousSibling", first: true },
		"~": { dir: "previousSibling" }
	},

	preFilter: {
		"ATTR": function( match ) {
			match[1] = match[1].replace( runescape, funescape );

			// Move the given value to match[3] whether quoted or unquoted
			match[3] = ( match[3] || match[4] || match[5] || "" ).replace( runescape, funescape );

			if ( match[2] === "~=" ) {
				match[3] = " " + match[3] + " ";
			}

			return match.slice( 0, 4 );
		},

		"CHILD": function( match ) {
			/* matches from matchExpr["CHILD"]
				1 type (only|nth|...)
				2 what (child|of-type)
				3 argument (even|odd|\d*|\d*n([+-]\d+)?|...)
				4 xn-component of xn+y argument ([+-]?\d*n|)
				5 sign of xn-component
				6 x of xn-component
				7 sign of y-component
				8 y of y-component
			*/
			match[1] = match[1].toLowerCase();

			if ( match[1].slice( 0, 3 ) === "nth" ) {
				// nth-* requires argument
				if ( !match[3] ) {
					Sizzle.error( match[0] );
				}

				// numeric x and y parameters for Expr.filter.CHILD
				// remember that false/true cast respectively to 0/1
				match[4] = +( match[4] ? match[5] + (match[6] || 1) : 2 * ( match[3] === "even" || match[3] === "odd" ) );
				match[5] = +( ( match[7] + match[8] ) || match[3] === "odd" );

			// other types prohibit arguments
			} else if ( match[3] ) {
				Sizzle.error( match[0] );
			}

			return match;
		},

		"PSEUDO": function( match ) {
			var excess,
				unquoted = !match[6] && match[2];

			if ( matchExpr["CHILD"].test( match[0] ) ) {
				return null;
			}

			// Accept quoted arguments as-is
			if ( match[3] ) {
				match[2] = match[4] || match[5] || "";

			// Strip excess characters from unquoted arguments
			} else if ( unquoted && rpseudo.test( unquoted ) &&
				// Get excess from tokenize (recursively)
				(excess = tokenize( unquoted, true )) &&
				// advance to the next closing parenthesis
				(excess = unquoted.indexOf( ")", unquoted.length - excess ) - unquoted.length) ) {

				// excess is a negative index
				match[0] = match[0].slice( 0, excess );
				match[2] = unquoted.slice( 0, excess );
			}

			// Return only captures needed by the pseudo filter method (type and argument)
			return match.slice( 0, 3 );
		}
	},

	filter: {

		"TAG": function( nodeNameSelector ) {
			var nodeName = nodeNameSelector.replace( runescape, funescape ).toLowerCase();
			return nodeNameSelector === "*" ?
				function() { return true; } :
				function( elem ) {
					return elem.nodeName && elem.nodeName.toLowerCase() === nodeName;
				};
		},

		"CLASS": function( className ) {
			var pattern = classCache[ className + " " ];

			return pattern ||
				(pattern = new RegExp( "(^|" + whitespace + ")" + className + "(" + whitespace + "|$)" )) &&
				classCache( className, function( elem ) {
					return pattern.test( typeof elem.className === "string" && elem.className || typeof elem.getAttribute !== "undefined" && elem.getAttribute("class") || "" );
				});
		},

		"ATTR": function( name, operator, check ) {
			return function( elem ) {
				var result = Sizzle.attr( elem, name );

				if ( result == null ) {
					return operator === "!=";
				}
				if ( !operator ) {
					return true;
				}

				result += "";

				return operator === "=" ? result === check :
					operator === "!=" ? result !== check :
					operator === "^=" ? check && result.indexOf( check ) === 0 :
					operator === "*=" ? check && result.indexOf( check ) > -1 :
					operator === "$=" ? check && result.slice( -check.length ) === check :
					operator === "~=" ? ( " " + result.replace( rwhitespace, " " ) + " " ).indexOf( check ) > -1 :
					operator === "|=" ? result === check || result.slice( 0, check.length + 1 ) === check + "-" :
					false;
			};
		},

		"CHILD": function( type, what, argument, first, last ) {
			var simple = type.slice( 0, 3 ) !== "nth",
				forward = type.slice( -4 ) !== "last",
				ofType = what === "of-type";

			return first === 1 && last === 0 ?

				// Shortcut for :nth-*(n)
				function( elem ) {
					return !!elem.parentNode;
				} :

				function( elem, context, xml ) {
					var cache, uniqueCache, outerCache, node, nodeIndex, start,
						dir = simple !== forward ? "nextSibling" : "previousSibling",
						parent = elem.parentNode,
						name = ofType && elem.nodeName.toLowerCase(),
						useCache = !xml && !ofType,
						diff = false;

					if ( parent ) {

						// :(first|last|only)-(child|of-type)
						if ( simple ) {
							while ( dir ) {
								node = elem;
								while ( (node = node[ dir ]) ) {
									if ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) {

										return false;
									}
								}
								// Reverse direction for :only-* (if we haven't yet done so)
								start = dir = type === "only" && !start && "nextSibling";
							}
							return true;
						}

						start = [ forward ? parent.firstChild : parent.lastChild ];

						// non-xml :nth-child(...) stores cache data on `parent`
						if ( forward && useCache ) {

							// Seek `elem` from a previously-cached index

							// ...in a gzip-friendly way
							node = parent;
							outerCache = node[ expando ] || (node[ expando ] = {});

							// Support: IE <9 only
							// Defend against cloned attroperties (jQuery gh-1709)
							uniqueCache = outerCache[ node.uniqueID ] ||
								(outerCache[ node.uniqueID ] = {});

							cache = uniqueCache[ type ] || [];
							nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
							diff = nodeIndex && cache[ 2 ];
							node = nodeIndex && parent.childNodes[ nodeIndex ];

							while ( (node = ++nodeIndex && node && node[ dir ] ||

								// Fallback to seeking `elem` from the start
								(diff = nodeIndex = 0) || start.pop()) ) {

								// When found, cache indexes on `parent` and break
								if ( node.nodeType === 1 && ++diff && node === elem ) {
									uniqueCache[ type ] = [ dirruns, nodeIndex, diff ];
									break;
								}
							}

						} else {
							// Use previously-cached element index if available
							if ( useCache ) {
								// ...in a gzip-friendly way
								node = elem;
								outerCache = node[ expando ] || (node[ expando ] = {});

								// Support: IE <9 only
								// Defend against cloned attroperties (jQuery gh-1709)
								uniqueCache = outerCache[ node.uniqueID ] ||
									(outerCache[ node.uniqueID ] = {});

								cache = uniqueCache[ type ] || [];
								nodeIndex = cache[ 0 ] === dirruns && cache[ 1 ];
								diff = nodeIndex;
							}

							// xml :nth-child(...)
							// or :nth-last-child(...) or :nth(-last)?-of-type(...)
							if ( diff === false ) {
								// Use the same loop as above to seek `elem` from the start
								while ( (node = ++nodeIndex && node && node[ dir ] ||
									(diff = nodeIndex = 0) || start.pop()) ) {

									if ( ( ofType ?
										node.nodeName.toLowerCase() === name :
										node.nodeType === 1 ) &&
										++diff ) {

										// Cache the index of each encountered element
										if ( useCache ) {
											outerCache = node[ expando ] || (node[ expando ] = {});

											// Support: IE <9 only
											// Defend against cloned attroperties (jQuery gh-1709)
											uniqueCache = outerCache[ node.uniqueID ] ||
												(outerCache[ node.uniqueID ] = {});

											uniqueCache[ type ] = [ dirruns, diff ];
										}

										if ( node === elem ) {
											break;
										}
									}
								}
							}
						}

						// Incorporate the offset, then check against cycle size
						diff -= last;
						return diff === first || ( diff % first === 0 && diff / first >= 0 );
					}
				};
		},

		"PSEUDO": function( pseudo, argument ) {
			// pseudo-class names are case-insensitive
			// http://www.w3.org/TR/selectors/#pseudo-classes
			// Prioritize by case sensitivity in case custom pseudos are added with uppercase letters
			// Remember that setFilters inherits from pseudos
			var args,
				fn = Expr.pseudos[ pseudo ] || Expr.setFilters[ pseudo.toLowerCase() ] ||
					Sizzle.error( "unsupported pseudo: " + pseudo );

			// The user may use createPseudo to indicate that
			// arguments are needed to create the filter function
			// just as Sizzle does
			if ( fn[ expando ] ) {
				return fn( argument );
			}

			// But maintain support for old signatures
			if ( fn.length > 1 ) {
				args = [ pseudo, pseudo, "", argument ];
				return Expr.setFilters.hasOwnProperty( pseudo.toLowerCase() ) ?
					markFunction(function( seed, matches ) {
						var idx,
							matched = fn( seed, argument ),
							i = matched.length;
						while ( i-- ) {
							idx = indexOf( seed, matched[i] );
							seed[ idx ] = !( matches[ idx ] = matched[i] );
						}
					}) :
					function( elem ) {
						return fn( elem, 0, args );
					};
			}

			return fn;
		}
	},

	pseudos: {
		// Potentially complex pseudos
		"not": markFunction(function( selector ) {
			// Trim the selector passed to compile
			// to avoid treating leading and trailing
			// spaces as combinators
			var input = [],
				results = [],
				matcher = compile( selector.replace( rtrim, "$1" ) );

			return matcher[ expando ] ?
				markFunction(function( seed, matches, context, xml ) {
					var elem,
						unmatched = matcher( seed, null, xml, [] ),
						i = seed.length;

					// Match elements unmatched by `matcher`
					while ( i-- ) {
						if ( (elem = unmatched[i]) ) {
							seed[i] = !(matches[i] = elem);
						}
					}
				}) :
				function( elem, context, xml ) {
					input[0] = elem;
					matcher( input, null, xml, results );
					// Don't keep the element (issue #299)
					input[0] = null;
					return !results.pop();
				};
		}),

		"has": markFunction(function( selector ) {
			return function( elem ) {
				return Sizzle( selector, elem ).length > 0;
			};
		}),

		"contains": markFunction(function( text ) {
			text = text.replace( runescape, funescape );
			return function( elem ) {
				return ( elem.textContent || elem.innerText || getText( elem ) ).indexOf( text ) > -1;
			};
		}),

		// "Whether an element is represented by a :lang() selector
		// is based solely on the element's language value
		// being equal to the identifier C,
		// or beginning with the identifier C immediately followed by "-".
		// The matching of C against the element's language value is performed case-insensitively.
		// The identifier C does not have to be a valid language name."
		// http://www.w3.org/TR/selectors/#lang-pseudo
		"lang": markFunction( function( lang ) {
			// lang value must be a valid identifier
			if ( !ridentifier.test(lang || "") ) {
				Sizzle.error( "unsupported lang: " + lang );
			}
			lang = lang.replace( runescape, funescape ).toLowerCase();
			return function( elem ) {
				var elemLang;
				do {
					if ( (elemLang = documentIsHTML ?
						elem.lang :
						elem.getAttribute("xml:lang") || elem.getAttribute("lang")) ) {

						elemLang = elemLang.toLowerCase();
						return elemLang === lang || elemLang.indexOf( lang + "-" ) === 0;
					}
				} while ( (elem = elem.parentNode) && elem.nodeType === 1 );
				return false;
			};
		}),

		// Miscellaneous
		"target": function( elem ) {
			var hash = window.location && window.location.hash;
			return hash && hash.slice( 1 ) === elem.id;
		},

		"root": function( elem ) {
			return elem === docElem;
		},

		"focus": function( elem ) {
			return elem === document.activeElement && (!document.hasFocus || document.hasFocus()) && !!(elem.type || elem.href || ~elem.tabIndex);
		},

		// Boolean properties
		"enabled": function( elem ) {
			return elem.disabled === false;
		},

		"disabled": function( elem ) {
			return elem.disabled === true;
		},

		"checked": function( elem ) {
			// In CSS3, :checked should return both checked and selected elements
			// http://www.w3.org/TR/2011/REC-css3-selectors-20110929/#checked
			var nodeName = elem.nodeName.toLowerCase();
			return (nodeName === "input" && !!elem.checked) || (nodeName === "option" && !!elem.selected);
		},

		"selected": function( elem ) {
			// Accessing this property makes selected-by-default
			// options in Safari work properly
			if ( elem.parentNode ) {
				elem.parentNode.selectedIndex;
			}

			return elem.selected === true;
		},

		// Contents
		"empty": function( elem ) {
			// http://www.w3.org/TR/selectors/#empty-pseudo
			// :empty is negated by element (1) or content nodes (text: 3; cdata: 4; entity ref: 5),
			//   but not by others (comment: 8; processing instruction: 7; etc.)
			// nodeType < 6 works because attributes (2) do not appear as children
			for ( elem = elem.firstChild; elem; elem = elem.nextSibling ) {
				if ( elem.nodeType < 6 ) {
					return false;
				}
			}
			return true;
		},

		"parent": function( elem ) {
			return !Expr.pseudos["empty"]( elem );
		},

		// Element/input types
		"header": function( elem ) {
			return rheader.test( elem.nodeName );
		},

		"input": function( elem ) {
			return rinputs.test( elem.nodeName );
		},

		"button": function( elem ) {
			var name = elem.nodeName.toLowerCase();
			return name === "input" && elem.type === "button" || name === "button";
		},

		"text": function( elem ) {
			var attr;
			return elem.nodeName.toLowerCase() === "input" &&
				elem.type === "text" &&

				// Support: IE<8
				// New HTML5 attribute values (e.g., "search") appear with elem.type === "text"
				( (attr = elem.getAttribute("type")) == null || attr.toLowerCase() === "text" );
		},

		// Position-in-collection
		"first": createPositionalPseudo(function() {
			return [ 0 ];
		}),

		"last": createPositionalPseudo(function( matchIndexes, length ) {
			return [ length - 1 ];
		}),

		"eq": createPositionalPseudo(function( matchIndexes, length, argument ) {
			return [ argument < 0 ? argument + length : argument ];
		}),

		"even": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 0;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"odd": createPositionalPseudo(function( matchIndexes, length ) {
			var i = 1;
			for ( ; i < length; i += 2 ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"lt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; --i >= 0; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		}),

		"gt": createPositionalPseudo(function( matchIndexes, length, argument ) {
			var i = argument < 0 ? argument + length : argument;
			for ( ; ++i < length; ) {
				matchIndexes.push( i );
			}
			return matchIndexes;
		})
	}
};

Expr.pseudos["nth"] = Expr.pseudos["eq"];

// Add button/input type pseudos
for ( i in { radio: true, checkbox: true, file: true, password: true, image: true } ) {
	Expr.pseudos[ i ] = createInputPseudo( i );
}
for ( i in { submit: true, reset: true } ) {
	Expr.pseudos[ i ] = createButtonPseudo( i );
}

// Easy API for creating new setFilters
function setFilters() {}
setFilters.prototype = Expr.filters = Expr.pseudos;
Expr.setFilters = new setFilters();

tokenize = Sizzle.tokenize = function( selector, parseOnly ) {
	var matched, match, tokens, type,
		soFar, groups, preFilters,
		cached = tokenCache[ selector + " " ];

	if ( cached ) {
		return parseOnly ? 0 : cached.slice( 0 );
	}

	soFar = selector;
	groups = [];
	preFilters = Expr.preFilter;

	while ( soFar ) {

		// Comma and first run
		if ( !matched || (match = rcomma.exec( soFar )) ) {
			if ( match ) {
				// Don't consume trailing commas as valid
				soFar = soFar.slice( match[0].length ) || soFar;
			}
			groups.push( (tokens = []) );
		}

		matched = false;

		// Combinators
		if ( (match = rcombinators.exec( soFar )) ) {
			matched = match.shift();
			tokens.push({
				value: matched,
				// Cast descendant combinators to space
				type: match[0].replace( rtrim, " " )
			});
			soFar = soFar.slice( matched.length );
		}

		// Filters
		for ( type in Expr.filter ) {
			if ( (match = matchExpr[ type ].exec( soFar )) && (!preFilters[ type ] ||
				(match = preFilters[ type ]( match ))) ) {
				matched = match.shift();
				tokens.push({
					value: matched,
					type: type,
					matches: match
				});
				soFar = soFar.slice( matched.length );
			}
		}

		if ( !matched ) {
			break;
		}
	}

	// Return the length of the invalid excess
	// if we're just parsing
	// Otherwise, throw an error or return tokens
	return parseOnly ?
		soFar.length :
		soFar ?
			Sizzle.error( selector ) :
			// Cache the tokens
			tokenCache( selector, groups ).slice( 0 );
};

function toSelector( tokens ) {
	var i = 0,
		len = tokens.length,
		selector = "";
	for ( ; i < len; i++ ) {
		selector += tokens[i].value;
	}
	return selector;
}

function addCombinator( matcher, combinator, base ) {
	var dir = combinator.dir,
		checkNonElements = base && dir === "parentNode",
		doneName = done++;

	return combinator.first ?
		// Check against closest ancestor/preceding element
		function( elem, context, xml ) {
			while ( (elem = elem[ dir ]) ) {
				if ( elem.nodeType === 1 || checkNonElements ) {
					return matcher( elem, context, xml );
				}
			}
		} :

		// Check against all ancestor/preceding elements
		function( elem, context, xml ) {
			var oldCache, uniqueCache, outerCache,
				newCache = [ dirruns, doneName ];

			// We can't set arbitrary data on XML nodes, so they don't benefit from combinator caching
			if ( xml ) {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						if ( matcher( elem, context, xml ) ) {
							return true;
						}
					}
				}
			} else {
				while ( (elem = elem[ dir ]) ) {
					if ( elem.nodeType === 1 || checkNonElements ) {
						outerCache = elem[ expando ] || (elem[ expando ] = {});

						// Support: IE <9 only
						// Defend against cloned attroperties (jQuery gh-1709)
						uniqueCache = outerCache[ elem.uniqueID ] || (outerCache[ elem.uniqueID ] = {});

						if ( (oldCache = uniqueCache[ dir ]) &&
							oldCache[ 0 ] === dirruns && oldCache[ 1 ] === doneName ) {

							// Assign to newCache so results back-propagate to previous elements
							return (newCache[ 2 ] = oldCache[ 2 ]);
						} else {
							// Reuse newcache so results back-propagate to previous elements
							uniqueCache[ dir ] = newCache;

							// A match means we're done; a fail means we have to keep checking
							if ( (newCache[ 2 ] = matcher( elem, context, xml )) ) {
								return true;
							}
						}
					}
				}
			}
		};
}

function elementMatcher( matchers ) {
	return matchers.length > 1 ?
		function( elem, context, xml ) {
			var i = matchers.length;
			while ( i-- ) {
				if ( !matchers[i]( elem, context, xml ) ) {
					return false;
				}
			}
			return true;
		} :
		matchers[0];
}

function multipleContexts( selector, contexts, results ) {
	var i = 0,
		len = contexts.length;
	for ( ; i < len; i++ ) {
		Sizzle( selector, contexts[i], results );
	}
	return results;
}

function condense( unmatched, map, filter, context, xml ) {
	var elem,
		newUnmatched = [],
		i = 0,
		len = unmatched.length,
		mapped = map != null;

	for ( ; i < len; i++ ) {
		if ( (elem = unmatched[i]) ) {
			if ( !filter || filter( elem, context, xml ) ) {
				newUnmatched.push( elem );
				if ( mapped ) {
					map.push( i );
				}
			}
		}
	}

	return newUnmatched;
}

function setMatcher( preFilter, selector, matcher, postFilter, postFinder, postSelector ) {
	if ( postFilter && !postFilter[ expando ] ) {
		postFilter = setMatcher( postFilter );
	}
	if ( postFinder && !postFinder[ expando ] ) {
		postFinder = setMatcher( postFinder, postSelector );
	}
	return markFunction(function( seed, results, context, xml ) {
		var temp, i, elem,
			preMap = [],
			postMap = [],
			preexisting = results.length,

			// Get initial elements from seed or context
			elems = seed || multipleContexts( selector || "*", context.nodeType ? [ context ] : context, [] ),

			// Prefilter to get matcher input, preserving a map for seed-results synchronization
			matcherIn = preFilter && ( seed || !selector ) ?
				condense( elems, preMap, preFilter, context, xml ) :
				elems,

			matcherOut = matcher ?
				// If we have a postFinder, or filtered seed, or non-seed postFilter or preexisting results,
				postFinder || ( seed ? preFilter : preexisting || postFilter ) ?

					// ...intermediate processing is necessary
					[] :

					// ...otherwise use results directly
					results :
				matcherIn;

		// Find primary matches
		if ( matcher ) {
			matcher( matcherIn, matcherOut, context, xml );
		}

		// Apply postFilter
		if ( postFilter ) {
			temp = condense( matcherOut, postMap );
			postFilter( temp, [], context, xml );

			// Un-match failing elements by moving them back to matcherIn
			i = temp.length;
			while ( i-- ) {
				if ( (elem = temp[i]) ) {
					matcherOut[ postMap[i] ] = !(matcherIn[ postMap[i] ] = elem);
				}
			}
		}

		if ( seed ) {
			if ( postFinder || preFilter ) {
				if ( postFinder ) {
					// Get the final matcherOut by condensing this intermediate into postFinder contexts
					temp = [];
					i = matcherOut.length;
					while ( i-- ) {
						if ( (elem = matcherOut[i]) ) {
							// Restore matcherIn since elem is not yet a final match
							temp.push( (matcherIn[i] = elem) );
						}
					}
					postFinder( null, (matcherOut = []), temp, xml );
				}

				// Move matched elements from seed to results to keep them synchronized
				i = matcherOut.length;
				while ( i-- ) {
					if ( (elem = matcherOut[i]) &&
						(temp = postFinder ? indexOf( seed, elem ) : preMap[i]) > -1 ) {

						seed[temp] = !(results[temp] = elem);
					}
				}
			}

		// Add elements to results, through postFinder if defined
		} else {
			matcherOut = condense(
				matcherOut === results ?
					matcherOut.splice( preexisting, matcherOut.length ) :
					matcherOut
			);
			if ( postFinder ) {
				postFinder( null, results, matcherOut, xml );
			} else {
				push.apply( results, matcherOut );
			}
		}
	});
}

function matcherFromTokens( tokens ) {
	var checkContext, matcher, j,
		len = tokens.length,
		leadingRelative = Expr.relative[ tokens[0].type ],
		implicitRelative = leadingRelative || Expr.relative[" "],
		i = leadingRelative ? 1 : 0,

		// The foundational matcher ensures that elements are reachable from top-level context(s)
		matchContext = addCombinator( function( elem ) {
			return elem === checkContext;
		}, implicitRelative, true ),
		matchAnyContext = addCombinator( function( elem ) {
			return indexOf( checkContext, elem ) > -1;
		}, implicitRelative, true ),
		matchers = [ function( elem, context, xml ) {
			var ret = ( !leadingRelative && ( xml || context !== outermostContext ) ) || (
				(checkContext = context).nodeType ?
					matchContext( elem, context, xml ) :
					matchAnyContext( elem, context, xml ) );
			// Avoid hanging onto element (issue #299)
			checkContext = null;
			return ret;
		} ];

	for ( ; i < len; i++ ) {
		if ( (matcher = Expr.relative[ tokens[i].type ]) ) {
			matchers = [ addCombinator(elementMatcher( matchers ), matcher) ];
		} else {
			matcher = Expr.filter[ tokens[i].type ].apply( null, tokens[i].matches );

			// Return special upon seeing a positional matcher
			if ( matcher[ expando ] ) {
				// Find the next relative operator (if any) for proper handling
				j = ++i;
				for ( ; j < len; j++ ) {
					if ( Expr.relative[ tokens[j].type ] ) {
						break;
					}
				}
				return setMatcher(
					i > 1 && elementMatcher( matchers ),
					i > 1 && toSelector(
						// If the preceding token was a descendant combinator, insert an implicit any-element `*`
						tokens.slice( 0, i - 1 ).concat({ value: tokens[ i - 2 ].type === " " ? "*" : "" })
					).replace( rtrim, "$1" ),
					matcher,
					i < j && matcherFromTokens( tokens.slice( i, j ) ),
					j < len && matcherFromTokens( (tokens = tokens.slice( j )) ),
					j < len && toSelector( tokens )
				);
			}
			matchers.push( matcher );
		}
	}

	return elementMatcher( matchers );
}

function matcherFromGroupMatchers( elementMatchers, setMatchers ) {
	var bySet = setMatchers.length > 0,
		byElement = elementMatchers.length > 0,
		superMatcher = function( seed, context, xml, results, outermost ) {
			var elem, j, matcher,
				matchedCount = 0,
				i = "0",
				unmatched = seed && [],
				setMatched = [],
				contextBackup = outermostContext,
				// We must always have either seed elements or outermost context
				elems = seed || byElement && Expr.find["TAG"]( "*", outermost ),
				// Use integer dirruns iff this is the outermost matcher
				dirrunsUnique = (dirruns += contextBackup == null ? 1 : Math.random() || 0.1),
				len = elems.length;

			if ( outermost ) {
				outermostContext = context === document || context || outermost;
			}

			// Add elements passing elementMatchers directly to results
			// Support: IE<9, Safari
			// Tolerate NodeList properties (IE: "length"; Safari: <number>) matching elements by id
			for ( ; i !== len && (elem = elems[i]) != null; i++ ) {
				if ( byElement && elem ) {
					j = 0;
					if ( !context && elem.ownerDocument !== document ) {
						setDocument( elem );
						xml = !documentIsHTML;
					}
					while ( (matcher = elementMatchers[j++]) ) {
						if ( matcher( elem, context || document, xml) ) {
							results.push( elem );
							break;
						}
					}
					if ( outermost ) {
						dirruns = dirrunsUnique;
					}
				}

				// Track unmatched elements for set filters
				if ( bySet ) {
					// They will have gone through all possible matchers
					if ( (elem = !matcher && elem) ) {
						matchedCount--;
					}

					// Lengthen the array for every element, matched or not
					if ( seed ) {
						unmatched.push( elem );
					}
				}
			}

			// `i` is now the count of elements visited above, and adding it to `matchedCount`
			// makes the latter nonnegative.
			matchedCount += i;

			// Apply set filters to unmatched elements
			// NOTE: This can be skipped if there are no unmatched elements (i.e., `matchedCount`
			// equals `i`), unless we didn't visit _any_ elements in the above loop because we have
			// no element matchers and no seed.
			// Incrementing an initially-string "0" `i` allows `i` to remain a string only in that
			// case, which will result in a "00" `matchedCount` that differs from `i` but is also
			// numerically zero.
			if ( bySet && i !== matchedCount ) {
				j = 0;
				while ( (matcher = setMatchers[j++]) ) {
					matcher( unmatched, setMatched, context, xml );
				}

				if ( seed ) {
					// Reintegrate element matches to eliminate the need for sorting
					if ( matchedCount > 0 ) {
						while ( i-- ) {
							if ( !(unmatched[i] || setMatched[i]) ) {
								setMatched[i] = pop.call( results );
							}
						}
					}

					// Discard index placeholder values to get only actual matches
					setMatched = condense( setMatched );
				}

				// Add matches to results
				push.apply( results, setMatched );

				// Seedless set matches succeeding multiple successful matchers stipulate sorting
				if ( outermost && !seed && setMatched.length > 0 &&
					( matchedCount + setMatchers.length ) > 1 ) {

					Sizzle.uniqueSort( results );
				}
			}

			// Override manipulation of globals by nested matchers
			if ( outermost ) {
				dirruns = dirrunsUnique;
				outermostContext = contextBackup;
			}

			return unmatched;
		};

	return bySet ?
		markFunction( superMatcher ) :
		superMatcher;
}

compile = Sizzle.compile = function( selector, match /* Internal Use Only */ ) {
	var i,
		setMatchers = [],
		elementMatchers = [],
		cached = compilerCache[ selector + " " ];

	if ( !cached ) {
		// Generate a function of recursive functions that can be used to check each element
		if ( !match ) {
			match = tokenize( selector );
		}
		i = match.length;
		while ( i-- ) {
			cached = matcherFromTokens( match[i] );
			if ( cached[ expando ] ) {
				setMatchers.push( cached );
			} else {
				elementMatchers.push( cached );
			}
		}

		// Cache the compiled function
		cached = compilerCache( selector, matcherFromGroupMatchers( elementMatchers, setMatchers ) );

		// Save selector and tokenization
		cached.selector = selector;
	}
	return cached;
};

/**
 * A low-level selection function that works with Sizzle's compiled
 *  selector functions
 * @param {String|Function} selector A selector or a pre-compiled
 *  selector function built with Sizzle.compile
 * @param {Element} context
 * @param {Array} [results]
 * @param {Array} [seed] A set of elements to match against
 */
select = Sizzle.select = function( selector, context, results, seed ) {
	var i, tokens, token, type, find,
		compiled = typeof selector === "function" && selector,
		match = !seed && tokenize( (selector = compiled.selector || selector) );

	results = results || [];

	// Try to minimize operations if there is only one selector in the list and no seed
	// (the latter of which guarantees us context)
	if ( match.length === 1 ) {

		// Reduce context if the leading compound selector is an ID
		tokens = match[0] = match[0].slice( 0 );
		if ( tokens.length > 2 && (token = tokens[0]).type === "ID" &&
				support.getById && context.nodeType === 9 && documentIsHTML &&
				Expr.relative[ tokens[1].type ] ) {

			context = ( Expr.find["ID"]( token.matches[0].replace(runescape, funescape), context ) || [] )[0];
			if ( !context ) {
				return results;

			// Precompiled matchers will still verify ancestry, so step up a level
			} else if ( compiled ) {
				context = context.parentNode;
			}

			selector = selector.slice( tokens.shift().value.length );
		}

		// Fetch a seed set for right-to-left matching
		i = matchExpr["needsContext"].test( selector ) ? 0 : tokens.length;
		while ( i-- ) {
			token = tokens[i];

			// Abort if we hit a combinator
			if ( Expr.relative[ (type = token.type) ] ) {
				break;
			}
			if ( (find = Expr.find[ type ]) ) {
				// Search, expanding context for leading sibling combinators
				if ( (seed = find(
					token.matches[0].replace( runescape, funescape ),
					rsibling.test( tokens[0].type ) && testContext( context.parentNode ) || context
				)) ) {

					// If seed is empty or no tokens remain, we can return early
					tokens.splice( i, 1 );
					selector = seed.length && toSelector( tokens );
					if ( !selector ) {
						push.apply( results, seed );
						return results;
					}

					break;
				}
			}
		}
	}

	// Compile and execute a filtering function if one is not provided
	// Provide `match` to avoid retokenization if we modified the selector above
	( compiled || compile( selector, match ) )(
		seed,
		context,
		!documentIsHTML,
		results,
		!context || rsibling.test( selector ) && testContext( context.parentNode ) || context
	);
	return results;
};

// One-time assignments

// Sort stability
support.sortStable = expando.split("").sort( sortOrder ).join("") === expando;

// Support: Chrome 14-35+
// Always assume duplicates if they aren't passed to the comparison function
support.detectDuplicates = !!hasDuplicate;

// Initialize against the default document
setDocument();

// Support: Webkit<537.32 - Safari 6.0.3/Chrome 25 (fixed in Chrome 27)
// Detached nodes confoundingly follow *each other*
support.sortDetached = assert(function( div1 ) {
	// Should return 1, but returns 4 (following)
	return div1.compareDocumentPosition( document.createElement("div") ) & 1;
});

// Support: IE<8
// Prevent attribute/property "interpolation"
// http://msdn.microsoft.com/en-us/library/ms536429%28VS.85%29.aspx
if ( !assert(function( div ) {
	div.innerHTML = "<a href='#'></a>";
	return div.firstChild.getAttribute("href") === "#" ;
}) ) {
	addHandle( "type|href|height|width", function( elem, name, isXML ) {
		if ( !isXML ) {
			return elem.getAttribute( name, name.toLowerCase() === "type" ? 1 : 2 );
		}
	});
}

// Support: IE<9
// Use defaultValue in place of getAttribute("value")
if ( !support.attributes || !assert(function( div ) {
	div.innerHTML = "<input/>";
	div.firstChild.setAttribute( "value", "" );
	return div.firstChild.getAttribute( "value" ) === "";
}) ) {
	addHandle( "value", function( elem, name, isXML ) {
		if ( !isXML && elem.nodeName.toLowerCase() === "input" ) {
			return elem.defaultValue;
		}
	});
}

// Support: IE<9
// Use getAttributeNode to fetch booleans when getAttribute lies
if ( !assert(function( div ) {
	return div.getAttribute("disabled") == null;
}) ) {
	addHandle( booleans, function( elem, name, isXML ) {
		var val;
		if ( !isXML ) {
			return elem[ name ] === true ? name.toLowerCase() :
					(val = elem.getAttributeNode( name )) && val.specified ?
					val.value :
				null;
		}
	});
}

// EXPOSE
if ( typeof define === "function" && define.amd ) {
	define(function() { return Sizzle; });
// Sizzle requires that there be a global window in Common-JS like environments
} else if ( typeof module !== "undefined" && module.exports ) {
	module.exports = Sizzle;
} else {
	window.Sizzle = Sizzle;
}
// EXPOSE

})( window );

},{}],85:[function(require,module,exports){
//     Underscore.js 1.8.3
//     http://underscorejs.org
//     (c) 2009-2015 Jeremy Ashkenas, DocumentCloud and Investigative Reporters & Editors
//     Underscore may be freely distributed under the MIT license.

(function() {

  // Baseline setup
  // --------------

  // Establish the root object, `window` in the browser, or `exports` on the server.
  var root = this;

  // Save the previous value of the `_` variable.
  var previousUnderscore = root._;

  // Save bytes in the minified (but not gzipped) version:
  var ArrayProto = Array.prototype, ObjProto = Object.prototype, FuncProto = Function.prototype;

  // Create quick reference variables for speed access to core prototypes.
  var
    push             = ArrayProto.push,
    slice            = ArrayProto.slice,
    toString         = ObjProto.toString,
    hasOwnProperty   = ObjProto.hasOwnProperty;

  // All **ECMAScript 5** native function implementations that we hope to use
  // are declared here.
  var
    nativeIsArray      = Array.isArray,
    nativeKeys         = Object.keys,
    nativeBind         = FuncProto.bind,
    nativeCreate       = Object.create;

  // Naked function reference for surrogate-prototype-swapping.
  var Ctor = function(){};

  // Create a safe reference to the Underscore object for use below.
  var _ = function(obj) {
    if (obj instanceof _) return obj;
    if (!(this instanceof _)) return new _(obj);
    this._wrapped = obj;
  };

  // Export the Underscore object for **Node.js**, with
  // backwards-compatibility for the old `require()` API. If we're in
  // the browser, add `_` as a global object.
  if (typeof exports !== 'undefined') {
    if (typeof module !== 'undefined' && module.exports) {
      exports = module.exports = _;
    }
    exports._ = _;
  } else {
    root._ = _;
  }

  // Current version.
  _.VERSION = '1.8.3';

  // Internal function that returns an efficient (for current engines) version
  // of the passed-in callback, to be repeatedly applied in other Underscore
  // functions.
  var optimizeCb = function(func, context, argCount) {
    if (context === void 0) return func;
    switch (argCount == null ? 3 : argCount) {
      case 1: return function(value) {
        return func.call(context, value);
      };
      case 2: return function(value, other) {
        return func.call(context, value, other);
      };
      case 3: return function(value, index, collection) {
        return func.call(context, value, index, collection);
      };
      case 4: return function(accumulator, value, index, collection) {
        return func.call(context, accumulator, value, index, collection);
      };
    }
    return function() {
      return func.apply(context, arguments);
    };
  };

  // A mostly-internal function to generate callbacks that can be applied
  // to each element in a collection, returning the desired result — either
  // identity, an arbitrary callback, a property matcher, or a property accessor.
  var cb = function(value, context, argCount) {
    if (value == null) return _.identity;
    if (_.isFunction(value)) return optimizeCb(value, context, argCount);
    if (_.isObject(value)) return _.matcher(value);
    return _.property(value);
  };
  _.iteratee = function(value, context) {
    return cb(value, context, Infinity);
  };

  // An internal function for creating assigner functions.
  var createAssigner = function(keysFunc, undefinedOnly) {
    return function(obj) {
      var length = arguments.length;
      if (length < 2 || obj == null) return obj;
      for (var index = 1; index < length; index++) {
        var source = arguments[index],
            keys = keysFunc(source),
            l = keys.length;
        for (var i = 0; i < l; i++) {
          var key = keys[i];
          if (!undefinedOnly || obj[key] === void 0) obj[key] = source[key];
        }
      }
      return obj;
    };
  };

  // An internal function for creating a new object that inherits from another.
  var baseCreate = function(prototype) {
    if (!_.isObject(prototype)) return {};
    if (nativeCreate) return nativeCreate(prototype);
    Ctor.prototype = prototype;
    var result = new Ctor;
    Ctor.prototype = null;
    return result;
  };

  var property = function(key) {
    return function(obj) {
      return obj == null ? void 0 : obj[key];
    };
  };

  // Helper for collection methods to determine whether a collection
  // should be iterated as an array or as an object
  // Related: http://people.mozilla.org/~jorendorff/es6-draft.html#sec-tolength
  // Avoids a very nasty iOS 8 JIT bug on ARM-64. #2094
  var MAX_ARRAY_INDEX = Math.pow(2, 53) - 1;
  var getLength = property('length');
  var isArrayLike = function(collection) {
    var length = getLength(collection);
    return typeof length == 'number' && length >= 0 && length <= MAX_ARRAY_INDEX;
  };

  // Collection Functions
  // --------------------

  // The cornerstone, an `each` implementation, aka `forEach`.
  // Handles raw objects in addition to array-likes. Treats all
  // sparse array-likes as if they were dense.
  _.each = _.forEach = function(obj, iteratee, context) {
    iteratee = optimizeCb(iteratee, context);
    var i, length;
    if (isArrayLike(obj)) {
      for (i = 0, length = obj.length; i < length; i++) {
        iteratee(obj[i], i, obj);
      }
    } else {
      var keys = _.keys(obj);
      for (i = 0, length = keys.length; i < length; i++) {
        iteratee(obj[keys[i]], keys[i], obj);
      }
    }
    return obj;
  };

  // Return the results of applying the iteratee to each element.
  _.map = _.collect = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length,
        results = Array(length);
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      results[index] = iteratee(obj[currentKey], currentKey, obj);
    }
    return results;
  };

  // Create a reducing function iterating left or right.
  function createReduce(dir) {
    // Optimized iterator function as using arguments.length
    // in the main function will deoptimize the, see #1991.
    function iterator(obj, iteratee, memo, keys, index, length) {
      for (; index >= 0 && index < length; index += dir) {
        var currentKey = keys ? keys[index] : index;
        memo = iteratee(memo, obj[currentKey], currentKey, obj);
      }
      return memo;
    }

    return function(obj, iteratee, memo, context) {
      iteratee = optimizeCb(iteratee, context, 4);
      var keys = !isArrayLike(obj) && _.keys(obj),
          length = (keys || obj).length,
          index = dir > 0 ? 0 : length - 1;
      // Determine the initial value if none is provided.
      if (arguments.length < 3) {
        memo = obj[keys ? keys[index] : index];
        index += dir;
      }
      return iterator(obj, iteratee, memo, keys, index, length);
    };
  }

  // **Reduce** builds up a single result from a list of values, aka `inject`,
  // or `foldl`.
  _.reduce = _.foldl = _.inject = createReduce(1);

  // The right-associative version of reduce, also known as `foldr`.
  _.reduceRight = _.foldr = createReduce(-1);

  // Return the first value which passes a truth test. Aliased as `detect`.
  _.find = _.detect = function(obj, predicate, context) {
    var key;
    if (isArrayLike(obj)) {
      key = _.findIndex(obj, predicate, context);
    } else {
      key = _.findKey(obj, predicate, context);
    }
    if (key !== void 0 && key !== -1) return obj[key];
  };

  // Return all the elements that pass a truth test.
  // Aliased as `select`.
  _.filter = _.select = function(obj, predicate, context) {
    var results = [];
    predicate = cb(predicate, context);
    _.each(obj, function(value, index, list) {
      if (predicate(value, index, list)) results.push(value);
    });
    return results;
  };

  // Return all the elements for which a truth test fails.
  _.reject = function(obj, predicate, context) {
    return _.filter(obj, _.negate(cb(predicate)), context);
  };

  // Determine whether all of the elements match a truth test.
  // Aliased as `all`.
  _.every = _.all = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (!predicate(obj[currentKey], currentKey, obj)) return false;
    }
    return true;
  };

  // Determine if at least one element in the object matches a truth test.
  // Aliased as `any`.
  _.some = _.any = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = !isArrayLike(obj) && _.keys(obj),
        length = (keys || obj).length;
    for (var index = 0; index < length; index++) {
      var currentKey = keys ? keys[index] : index;
      if (predicate(obj[currentKey], currentKey, obj)) return true;
    }
    return false;
  };

  // Determine if the array or object contains a given item (using `===`).
  // Aliased as `includes` and `include`.
  _.contains = _.includes = _.include = function(obj, item, fromIndex, guard) {
    if (!isArrayLike(obj)) obj = _.values(obj);
    if (typeof fromIndex != 'number' || guard) fromIndex = 0;
    return _.indexOf(obj, item, fromIndex) >= 0;
  };

  // Invoke a method (with arguments) on every item in a collection.
  _.invoke = function(obj, method) {
    var args = slice.call(arguments, 2);
    var isFunc = _.isFunction(method);
    return _.map(obj, function(value) {
      var func = isFunc ? method : value[method];
      return func == null ? func : func.apply(value, args);
    });
  };

  // Convenience version of a common use case of `map`: fetching a property.
  _.pluck = function(obj, key) {
    return _.map(obj, _.property(key));
  };

  // Convenience version of a common use case of `filter`: selecting only objects
  // containing specific `key:value` pairs.
  _.where = function(obj, attrs) {
    return _.filter(obj, _.matcher(attrs));
  };

  // Convenience version of a common use case of `find`: getting the first object
  // containing specific `key:value` pairs.
  _.findWhere = function(obj, attrs) {
    return _.find(obj, _.matcher(attrs));
  };

  // Return the maximum element (or element-based computation).
  _.max = function(obj, iteratee, context) {
    var result = -Infinity, lastComputed = -Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value > result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed > lastComputed || computed === -Infinity && result === -Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Return the minimum element (or element-based computation).
  _.min = function(obj, iteratee, context) {
    var result = Infinity, lastComputed = Infinity,
        value, computed;
    if (iteratee == null && obj != null) {
      obj = isArrayLike(obj) ? obj : _.values(obj);
      for (var i = 0, length = obj.length; i < length; i++) {
        value = obj[i];
        if (value < result) {
          result = value;
        }
      }
    } else {
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index, list) {
        computed = iteratee(value, index, list);
        if (computed < lastComputed || computed === Infinity && result === Infinity) {
          result = value;
          lastComputed = computed;
        }
      });
    }
    return result;
  };

  // Shuffle a collection, using the modern version of the
  // [Fisher-Yates shuffle](http://en.wikipedia.org/wiki/Fisher–Yates_shuffle).
  _.shuffle = function(obj) {
    var set = isArrayLike(obj) ? obj : _.values(obj);
    var length = set.length;
    var shuffled = Array(length);
    for (var index = 0, rand; index < length; index++) {
      rand = _.random(0, index);
      if (rand !== index) shuffled[index] = shuffled[rand];
      shuffled[rand] = set[index];
    }
    return shuffled;
  };

  // Sample **n** random values from a collection.
  // If **n** is not specified, returns a single random element.
  // The internal `guard` argument allows it to work with `map`.
  _.sample = function(obj, n, guard) {
    if (n == null || guard) {
      if (!isArrayLike(obj)) obj = _.values(obj);
      return obj[_.random(obj.length - 1)];
    }
    return _.shuffle(obj).slice(0, Math.max(0, n));
  };

  // Sort the object's values by a criterion produced by an iteratee.
  _.sortBy = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    return _.pluck(_.map(obj, function(value, index, list) {
      return {
        value: value,
        index: index,
        criteria: iteratee(value, index, list)
      };
    }).sort(function(left, right) {
      var a = left.criteria;
      var b = right.criteria;
      if (a !== b) {
        if (a > b || a === void 0) return 1;
        if (a < b || b === void 0) return -1;
      }
      return left.index - right.index;
    }), 'value');
  };

  // An internal function used for aggregate "group by" operations.
  var group = function(behavior) {
    return function(obj, iteratee, context) {
      var result = {};
      iteratee = cb(iteratee, context);
      _.each(obj, function(value, index) {
        var key = iteratee(value, index, obj);
        behavior(result, value, key);
      });
      return result;
    };
  };

  // Groups the object's values by a criterion. Pass either a string attribute
  // to group by, or a function that returns the criterion.
  _.groupBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key].push(value); else result[key] = [value];
  });

  // Indexes the object's values by a criterion, similar to `groupBy`, but for
  // when you know that your index values will be unique.
  _.indexBy = group(function(result, value, key) {
    result[key] = value;
  });

  // Counts instances of an object that group by a certain criterion. Pass
  // either a string attribute to count by, or a function that returns the
  // criterion.
  _.countBy = group(function(result, value, key) {
    if (_.has(result, key)) result[key]++; else result[key] = 1;
  });

  // Safely create a real, live array from anything iterable.
  _.toArray = function(obj) {
    if (!obj) return [];
    if (_.isArray(obj)) return slice.call(obj);
    if (isArrayLike(obj)) return _.map(obj, _.identity);
    return _.values(obj);
  };

  // Return the number of elements in an object.
  _.size = function(obj) {
    if (obj == null) return 0;
    return isArrayLike(obj) ? obj.length : _.keys(obj).length;
  };

  // Split a collection into two arrays: one whose elements all satisfy the given
  // predicate, and one whose elements all do not satisfy the predicate.
  _.partition = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var pass = [], fail = [];
    _.each(obj, function(value, key, obj) {
      (predicate(value, key, obj) ? pass : fail).push(value);
    });
    return [pass, fail];
  };

  // Array Functions
  // ---------------

  // Get the first element of an array. Passing **n** will return the first N
  // values in the array. Aliased as `head` and `take`. The **guard** check
  // allows it to work with `_.map`.
  _.first = _.head = _.take = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[0];
    return _.initial(array, array.length - n);
  };

  // Returns everything but the last entry of the array. Especially useful on
  // the arguments object. Passing **n** will return all the values in
  // the array, excluding the last N.
  _.initial = function(array, n, guard) {
    return slice.call(array, 0, Math.max(0, array.length - (n == null || guard ? 1 : n)));
  };

  // Get the last element of an array. Passing **n** will return the last N
  // values in the array.
  _.last = function(array, n, guard) {
    if (array == null) return void 0;
    if (n == null || guard) return array[array.length - 1];
    return _.rest(array, Math.max(0, array.length - n));
  };

  // Returns everything but the first entry of the array. Aliased as `tail` and `drop`.
  // Especially useful on the arguments object. Passing an **n** will return
  // the rest N values in the array.
  _.rest = _.tail = _.drop = function(array, n, guard) {
    return slice.call(array, n == null || guard ? 1 : n);
  };

  // Trim out all falsy values from an array.
  _.compact = function(array) {
    return _.filter(array, _.identity);
  };

  // Internal implementation of a recursive `flatten` function.
  var flatten = function(input, shallow, strict, startIndex) {
    var output = [], idx = 0;
    for (var i = startIndex || 0, length = getLength(input); i < length; i++) {
      var value = input[i];
      if (isArrayLike(value) && (_.isArray(value) || _.isArguments(value))) {
        //flatten current level of array or arguments object
        if (!shallow) value = flatten(value, shallow, strict);
        var j = 0, len = value.length;
        output.length += len;
        while (j < len) {
          output[idx++] = value[j++];
        }
      } else if (!strict) {
        output[idx++] = value;
      }
    }
    return output;
  };

  // Flatten out an array, either recursively (by default), or just one level.
  _.flatten = function(array, shallow) {
    return flatten(array, shallow, false);
  };

  // Return a version of the array that does not contain the specified value(s).
  _.without = function(array) {
    return _.difference(array, slice.call(arguments, 1));
  };

  // Produce a duplicate-free version of the array. If the array has already
  // been sorted, you have the option of using a faster algorithm.
  // Aliased as `unique`.
  _.uniq = _.unique = function(array, isSorted, iteratee, context) {
    if (!_.isBoolean(isSorted)) {
      context = iteratee;
      iteratee = isSorted;
      isSorted = false;
    }
    if (iteratee != null) iteratee = cb(iteratee, context);
    var result = [];
    var seen = [];
    for (var i = 0, length = getLength(array); i < length; i++) {
      var value = array[i],
          computed = iteratee ? iteratee(value, i, array) : value;
      if (isSorted) {
        if (!i || seen !== computed) result.push(value);
        seen = computed;
      } else if (iteratee) {
        if (!_.contains(seen, computed)) {
          seen.push(computed);
          result.push(value);
        }
      } else if (!_.contains(result, value)) {
        result.push(value);
      }
    }
    return result;
  };

  // Produce an array that contains the union: each distinct element from all of
  // the passed-in arrays.
  _.union = function() {
    return _.uniq(flatten(arguments, true, true));
  };

  // Produce an array that contains every item shared between all the
  // passed-in arrays.
  _.intersection = function(array) {
    var result = [];
    var argsLength = arguments.length;
    for (var i = 0, length = getLength(array); i < length; i++) {
      var item = array[i];
      if (_.contains(result, item)) continue;
      for (var j = 1; j < argsLength; j++) {
        if (!_.contains(arguments[j], item)) break;
      }
      if (j === argsLength) result.push(item);
    }
    return result;
  };

  // Take the difference between one array and a number of other arrays.
  // Only the elements present in just the first array will remain.
  _.difference = function(array) {
    var rest = flatten(arguments, true, true, 1);
    return _.filter(array, function(value){
      return !_.contains(rest, value);
    });
  };

  // Zip together multiple lists into a single array -- elements that share
  // an index go together.
  _.zip = function() {
    return _.unzip(arguments);
  };

  // Complement of _.zip. Unzip accepts an array of arrays and groups
  // each array's elements on shared indices
  _.unzip = function(array) {
    var length = array && _.max(array, getLength).length || 0;
    var result = Array(length);

    for (var index = 0; index < length; index++) {
      result[index] = _.pluck(array, index);
    }
    return result;
  };

  // Converts lists into objects. Pass either a single array of `[key, value]`
  // pairs, or two parallel arrays of the same length -- one of keys, and one of
  // the corresponding values.
  _.object = function(list, values) {
    var result = {};
    for (var i = 0, length = getLength(list); i < length; i++) {
      if (values) {
        result[list[i]] = values[i];
      } else {
        result[list[i][0]] = list[i][1];
      }
    }
    return result;
  };

  // Generator function to create the findIndex and findLastIndex functions
  function createPredicateIndexFinder(dir) {
    return function(array, predicate, context) {
      predicate = cb(predicate, context);
      var length = getLength(array);
      var index = dir > 0 ? 0 : length - 1;
      for (; index >= 0 && index < length; index += dir) {
        if (predicate(array[index], index, array)) return index;
      }
      return -1;
    };
  }

  // Returns the first index on an array-like that passes a predicate test
  _.findIndex = createPredicateIndexFinder(1);
  _.findLastIndex = createPredicateIndexFinder(-1);

  // Use a comparator function to figure out the smallest index at which
  // an object should be inserted so as to maintain order. Uses binary search.
  _.sortedIndex = function(array, obj, iteratee, context) {
    iteratee = cb(iteratee, context, 1);
    var value = iteratee(obj);
    var low = 0, high = getLength(array);
    while (low < high) {
      var mid = Math.floor((low + high) / 2);
      if (iteratee(array[mid]) < value) low = mid + 1; else high = mid;
    }
    return low;
  };

  // Generator function to create the indexOf and lastIndexOf functions
  function createIndexFinder(dir, predicateFind, sortedIndex) {
    return function(array, item, idx) {
      var i = 0, length = getLength(array);
      if (typeof idx == 'number') {
        if (dir > 0) {
            i = idx >= 0 ? idx : Math.max(idx + length, i);
        } else {
            length = idx >= 0 ? Math.min(idx + 1, length) : idx + length + 1;
        }
      } else if (sortedIndex && idx && length) {
        idx = sortedIndex(array, item);
        return array[idx] === item ? idx : -1;
      }
      if (item !== item) {
        idx = predicateFind(slice.call(array, i, length), _.isNaN);
        return idx >= 0 ? idx + i : -1;
      }
      for (idx = dir > 0 ? i : length - 1; idx >= 0 && idx < length; idx += dir) {
        if (array[idx] === item) return idx;
      }
      return -1;
    };
  }

  // Return the position of the first occurrence of an item in an array,
  // or -1 if the item is not included in the array.
  // If the array is large and already in sort order, pass `true`
  // for **isSorted** to use binary search.
  _.indexOf = createIndexFinder(1, _.findIndex, _.sortedIndex);
  _.lastIndexOf = createIndexFinder(-1, _.findLastIndex);

  // Generate an integer Array containing an arithmetic progression. A port of
  // the native Python `range()` function. See
  // [the Python documentation](http://docs.python.org/library/functions.html#range).
  _.range = function(start, stop, step) {
    if (stop == null) {
      stop = start || 0;
      start = 0;
    }
    step = step || 1;

    var length = Math.max(Math.ceil((stop - start) / step), 0);
    var range = Array(length);

    for (var idx = 0; idx < length; idx++, start += step) {
      range[idx] = start;
    }

    return range;
  };

  // Function (ahem) Functions
  // ------------------

  // Determines whether to execute a function as a constructor
  // or a normal function with the provided arguments
  var executeBound = function(sourceFunc, boundFunc, context, callingContext, args) {
    if (!(callingContext instanceof boundFunc)) return sourceFunc.apply(context, args);
    var self = baseCreate(sourceFunc.prototype);
    var result = sourceFunc.apply(self, args);
    if (_.isObject(result)) return result;
    return self;
  };

  // Create a function bound to a given object (assigning `this`, and arguments,
  // optionally). Delegates to **ECMAScript 5**'s native `Function.bind` if
  // available.
  _.bind = function(func, context) {
    if (nativeBind && func.bind === nativeBind) return nativeBind.apply(func, slice.call(arguments, 1));
    if (!_.isFunction(func)) throw new TypeError('Bind must be called on a function');
    var args = slice.call(arguments, 2);
    var bound = function() {
      return executeBound(func, bound, context, this, args.concat(slice.call(arguments)));
    };
    return bound;
  };

  // Partially apply a function by creating a version that has had some of its
  // arguments pre-filled, without changing its dynamic `this` context. _ acts
  // as a placeholder, allowing any combination of arguments to be pre-filled.
  _.partial = function(func) {
    var boundArgs = slice.call(arguments, 1);
    var bound = function() {
      var position = 0, length = boundArgs.length;
      var args = Array(length);
      for (var i = 0; i < length; i++) {
        args[i] = boundArgs[i] === _ ? arguments[position++] : boundArgs[i];
      }
      while (position < arguments.length) args.push(arguments[position++]);
      return executeBound(func, bound, this, this, args);
    };
    return bound;
  };

  // Bind a number of an object's methods to that object. Remaining arguments
  // are the method names to be bound. Useful for ensuring that all callbacks
  // defined on an object belong to it.
  _.bindAll = function(obj) {
    var i, length = arguments.length, key;
    if (length <= 1) throw new Error('bindAll must be passed function names');
    for (i = 1; i < length; i++) {
      key = arguments[i];
      obj[key] = _.bind(obj[key], obj);
    }
    return obj;
  };

  // Memoize an expensive function by storing its results.
  _.memoize = function(func, hasher) {
    var memoize = function(key) {
      var cache = memoize.cache;
      var address = '' + (hasher ? hasher.apply(this, arguments) : key);
      if (!_.has(cache, address)) cache[address] = func.apply(this, arguments);
      return cache[address];
    };
    memoize.cache = {};
    return memoize;
  };

  // Delays a function for the given number of milliseconds, and then calls
  // it with the arguments supplied.
  _.delay = function(func, wait) {
    var args = slice.call(arguments, 2);
    return setTimeout(function(){
      return func.apply(null, args);
    }, wait);
  };

  // Defers a function, scheduling it to run after the current call stack has
  // cleared.
  _.defer = _.partial(_.delay, _, 1);

  // Returns a function, that, when invoked, will only be triggered at most once
  // during a given window of time. Normally, the throttled function will run
  // as much as it can, without ever going more than once per `wait` duration;
  // but if you'd like to disable the execution on the leading edge, pass
  // `{leading: false}`. To disable execution on the trailing edge, ditto.
  _.throttle = function(func, wait, options) {
    var context, args, result;
    var timeout = null;
    var previous = 0;
    if (!options) options = {};
    var later = function() {
      previous = options.leading === false ? 0 : _.now();
      timeout = null;
      result = func.apply(context, args);
      if (!timeout) context = args = null;
    };
    return function() {
      var now = _.now();
      if (!previous && options.leading === false) previous = now;
      var remaining = wait - (now - previous);
      context = this;
      args = arguments;
      if (remaining <= 0 || remaining > wait) {
        if (timeout) {
          clearTimeout(timeout);
          timeout = null;
        }
        previous = now;
        result = func.apply(context, args);
        if (!timeout) context = args = null;
      } else if (!timeout && options.trailing !== false) {
        timeout = setTimeout(later, remaining);
      }
      return result;
    };
  };

  // Returns a function, that, as long as it continues to be invoked, will not
  // be triggered. The function will be called after it stops being called for
  // N milliseconds. If `immediate` is passed, trigger the function on the
  // leading edge, instead of the trailing.
  _.debounce = function(func, wait, immediate) {
    var timeout, args, context, timestamp, result;

    var later = function() {
      var last = _.now() - timestamp;

      if (last < wait && last >= 0) {
        timeout = setTimeout(later, wait - last);
      } else {
        timeout = null;
        if (!immediate) {
          result = func.apply(context, args);
          if (!timeout) context = args = null;
        }
      }
    };

    return function() {
      context = this;
      args = arguments;
      timestamp = _.now();
      var callNow = immediate && !timeout;
      if (!timeout) timeout = setTimeout(later, wait);
      if (callNow) {
        result = func.apply(context, args);
        context = args = null;
      }

      return result;
    };
  };

  // Returns the first function passed as an argument to the second,
  // allowing you to adjust arguments, run code before and after, and
  // conditionally execute the original function.
  _.wrap = function(func, wrapper) {
    return _.partial(wrapper, func);
  };

  // Returns a negated version of the passed-in predicate.
  _.negate = function(predicate) {
    return function() {
      return !predicate.apply(this, arguments);
    };
  };

  // Returns a function that is the composition of a list of functions, each
  // consuming the return value of the function that follows.
  _.compose = function() {
    var args = arguments;
    var start = args.length - 1;
    return function() {
      var i = start;
      var result = args[start].apply(this, arguments);
      while (i--) result = args[i].call(this, result);
      return result;
    };
  };

  // Returns a function that will only be executed on and after the Nth call.
  _.after = function(times, func) {
    return function() {
      if (--times < 1) {
        return func.apply(this, arguments);
      }
    };
  };

  // Returns a function that will only be executed up to (but not including) the Nth call.
  _.before = function(times, func) {
    var memo;
    return function() {
      if (--times > 0) {
        memo = func.apply(this, arguments);
      }
      if (times <= 1) func = null;
      return memo;
    };
  };

  // Returns a function that will be executed at most one time, no matter how
  // often you call it. Useful for lazy initialization.
  _.once = _.partial(_.before, 2);

  // Object Functions
  // ----------------

  // Keys in IE < 9 that won't be iterated by `for key in ...` and thus missed.
  var hasEnumBug = !{toString: null}.propertyIsEnumerable('toString');
  var nonEnumerableProps = ['valueOf', 'isPrototypeOf', 'toString',
                      'propertyIsEnumerable', 'hasOwnProperty', 'toLocaleString'];

  function collectNonEnumProps(obj, keys) {
    var nonEnumIdx = nonEnumerableProps.length;
    var constructor = obj.constructor;
    var proto = (_.isFunction(constructor) && constructor.prototype) || ObjProto;

    // Constructor is a special case.
    var prop = 'constructor';
    if (_.has(obj, prop) && !_.contains(keys, prop)) keys.push(prop);

    while (nonEnumIdx--) {
      prop = nonEnumerableProps[nonEnumIdx];
      if (prop in obj && obj[prop] !== proto[prop] && !_.contains(keys, prop)) {
        keys.push(prop);
      }
    }
  }

  // Retrieve the names of an object's own properties.
  // Delegates to **ECMAScript 5**'s native `Object.keys`
  _.keys = function(obj) {
    if (!_.isObject(obj)) return [];
    if (nativeKeys) return nativeKeys(obj);
    var keys = [];
    for (var key in obj) if (_.has(obj, key)) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve all the property names of an object.
  _.allKeys = function(obj) {
    if (!_.isObject(obj)) return [];
    var keys = [];
    for (var key in obj) keys.push(key);
    // Ahem, IE < 9.
    if (hasEnumBug) collectNonEnumProps(obj, keys);
    return keys;
  };

  // Retrieve the values of an object's properties.
  _.values = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var values = Array(length);
    for (var i = 0; i < length; i++) {
      values[i] = obj[keys[i]];
    }
    return values;
  };

  // Returns the results of applying the iteratee to each element of the object
  // In contrast to _.map it returns an object
  _.mapObject = function(obj, iteratee, context) {
    iteratee = cb(iteratee, context);
    var keys =  _.keys(obj),
          length = keys.length,
          results = {},
          currentKey;
      for (var index = 0; index < length; index++) {
        currentKey = keys[index];
        results[currentKey] = iteratee(obj[currentKey], currentKey, obj);
      }
      return results;
  };

  // Convert an object into a list of `[key, value]` pairs.
  _.pairs = function(obj) {
    var keys = _.keys(obj);
    var length = keys.length;
    var pairs = Array(length);
    for (var i = 0; i < length; i++) {
      pairs[i] = [keys[i], obj[keys[i]]];
    }
    return pairs;
  };

  // Invert the keys and values of an object. The values must be serializable.
  _.invert = function(obj) {
    var result = {};
    var keys = _.keys(obj);
    for (var i = 0, length = keys.length; i < length; i++) {
      result[obj[keys[i]]] = keys[i];
    }
    return result;
  };

  // Return a sorted list of the function names available on the object.
  // Aliased as `methods`
  _.functions = _.methods = function(obj) {
    var names = [];
    for (var key in obj) {
      if (_.isFunction(obj[key])) names.push(key);
    }
    return names.sort();
  };

  // Extend a given object with all the properties in passed-in object(s).
  _.extend = createAssigner(_.allKeys);

  // Assigns a given object with all the own properties in the passed-in object(s)
  // (https://developer.mozilla.org/docs/Web/JavaScript/Reference/Global_Objects/Object/assign)
  _.extendOwn = _.assign = createAssigner(_.keys);

  // Returns the first key on an object that passes a predicate test
  _.findKey = function(obj, predicate, context) {
    predicate = cb(predicate, context);
    var keys = _.keys(obj), key;
    for (var i = 0, length = keys.length; i < length; i++) {
      key = keys[i];
      if (predicate(obj[key], key, obj)) return key;
    }
  };

  // Return a copy of the object only containing the whitelisted properties.
  _.pick = function(object, oiteratee, context) {
    var result = {}, obj = object, iteratee, keys;
    if (obj == null) return result;
    if (_.isFunction(oiteratee)) {
      keys = _.allKeys(obj);
      iteratee = optimizeCb(oiteratee, context);
    } else {
      keys = flatten(arguments, false, false, 1);
      iteratee = function(value, key, obj) { return key in obj; };
      obj = Object(obj);
    }
    for (var i = 0, length = keys.length; i < length; i++) {
      var key = keys[i];
      var value = obj[key];
      if (iteratee(value, key, obj)) result[key] = value;
    }
    return result;
  };

   // Return a copy of the object without the blacklisted properties.
  _.omit = function(obj, iteratee, context) {
    if (_.isFunction(iteratee)) {
      iteratee = _.negate(iteratee);
    } else {
      var keys = _.map(flatten(arguments, false, false, 1), String);
      iteratee = function(value, key) {
        return !_.contains(keys, key);
      };
    }
    return _.pick(obj, iteratee, context);
  };

  // Fill in a given object with default properties.
  _.defaults = createAssigner(_.allKeys, true);

  // Creates an object that inherits from the given prototype object.
  // If additional properties are provided then they will be added to the
  // created object.
  _.create = function(prototype, props) {
    var result = baseCreate(prototype);
    if (props) _.extendOwn(result, props);
    return result;
  };

  // Create a (shallow-cloned) duplicate of an object.
  _.clone = function(obj) {
    if (!_.isObject(obj)) return obj;
    return _.isArray(obj) ? obj.slice() : _.extend({}, obj);
  };

  // Invokes interceptor with the obj, and then returns obj.
  // The primary purpose of this method is to "tap into" a method chain, in
  // order to perform operations on intermediate results within the chain.
  _.tap = function(obj, interceptor) {
    interceptor(obj);
    return obj;
  };

  // Returns whether an object has a given set of `key:value` pairs.
  _.isMatch = function(object, attrs) {
    var keys = _.keys(attrs), length = keys.length;
    if (object == null) return !length;
    var obj = Object(object);
    for (var i = 0; i < length; i++) {
      var key = keys[i];
      if (attrs[key] !== obj[key] || !(key in obj)) return false;
    }
    return true;
  };


  // Internal recursive comparison function for `isEqual`.
  var eq = function(a, b, aStack, bStack) {
    // Identical objects are equal. `0 === -0`, but they aren't identical.
    // See the [Harmony `egal` proposal](http://wiki.ecmascript.org/doku.php?id=harmony:egal).
    if (a === b) return a !== 0 || 1 / a === 1 / b;
    // A strict comparison is necessary because `null == undefined`.
    if (a == null || b == null) return a === b;
    // Unwrap any wrapped objects.
    if (a instanceof _) a = a._wrapped;
    if (b instanceof _) b = b._wrapped;
    // Compare `[[Class]]` names.
    var className = toString.call(a);
    if (className !== toString.call(b)) return false;
    switch (className) {
      // Strings, numbers, regular expressions, dates, and booleans are compared by value.
      case '[object RegExp]':
      // RegExps are coerced to strings for comparison (Note: '' + /a/i === '/a/i')
      case '[object String]':
        // Primitives and their corresponding object wrappers are equivalent; thus, `"5"` is
        // equivalent to `new String("5")`.
        return '' + a === '' + b;
      case '[object Number]':
        // `NaN`s are equivalent, but non-reflexive.
        // Object(NaN) is equivalent to NaN
        if (+a !== +a) return +b !== +b;
        // An `egal` comparison is performed for other numeric values.
        return +a === 0 ? 1 / +a === 1 / b : +a === +b;
      case '[object Date]':
      case '[object Boolean]':
        // Coerce dates and booleans to numeric primitive values. Dates are compared by their
        // millisecond representations. Note that invalid dates with millisecond representations
        // of `NaN` are not equivalent.
        return +a === +b;
    }

    var areArrays = className === '[object Array]';
    if (!areArrays) {
      if (typeof a != 'object' || typeof b != 'object') return false;

      // Objects with different constructors are not equivalent, but `Object`s or `Array`s
      // from different frames are.
      var aCtor = a.constructor, bCtor = b.constructor;
      if (aCtor !== bCtor && !(_.isFunction(aCtor) && aCtor instanceof aCtor &&
                               _.isFunction(bCtor) && bCtor instanceof bCtor)
                          && ('constructor' in a && 'constructor' in b)) {
        return false;
      }
    }
    // Assume equality for cyclic structures. The algorithm for detecting cyclic
    // structures is adapted from ES 5.1 section 15.12.3, abstract operation `JO`.

    // Initializing stack of traversed objects.
    // It's done here since we only need them for objects and arrays comparison.
    aStack = aStack || [];
    bStack = bStack || [];
    var length = aStack.length;
    while (length--) {
      // Linear search. Performance is inversely proportional to the number of
      // unique nested structures.
      if (aStack[length] === a) return bStack[length] === b;
    }

    // Add the first object to the stack of traversed objects.
    aStack.push(a);
    bStack.push(b);

    // Recursively compare objects and arrays.
    if (areArrays) {
      // Compare array lengths to determine if a deep comparison is necessary.
      length = a.length;
      if (length !== b.length) return false;
      // Deep compare the contents, ignoring non-numeric properties.
      while (length--) {
        if (!eq(a[length], b[length], aStack, bStack)) return false;
      }
    } else {
      // Deep compare objects.
      var keys = _.keys(a), key;
      length = keys.length;
      // Ensure that both objects contain the same number of properties before comparing deep equality.
      if (_.keys(b).length !== length) return false;
      while (length--) {
        // Deep compare each member
        key = keys[length];
        if (!(_.has(b, key) && eq(a[key], b[key], aStack, bStack))) return false;
      }
    }
    // Remove the first object from the stack of traversed objects.
    aStack.pop();
    bStack.pop();
    return true;
  };

  // Perform a deep comparison to check if two objects are equal.
  _.isEqual = function(a, b) {
    return eq(a, b);
  };

  // Is a given array, string, or object empty?
  // An "empty" object has no enumerable own-properties.
  _.isEmpty = function(obj) {
    if (obj == null) return true;
    if (isArrayLike(obj) && (_.isArray(obj) || _.isString(obj) || _.isArguments(obj))) return obj.length === 0;
    return _.keys(obj).length === 0;
  };

  // Is a given value a DOM element?
  _.isElement = function(obj) {
    return !!(obj && obj.nodeType === 1);
  };

  // Is a given value an array?
  // Delegates to ECMA5's native Array.isArray
  _.isArray = nativeIsArray || function(obj) {
    return toString.call(obj) === '[object Array]';
  };

  // Is a given variable an object?
  _.isObject = function(obj) {
    var type = typeof obj;
    return type === 'function' || type === 'object' && !!obj;
  };

  // Add some isType methods: isArguments, isFunction, isString, isNumber, isDate, isRegExp, isError.
  _.each(['Arguments', 'Function', 'String', 'Number', 'Date', 'RegExp', 'Error'], function(name) {
    _['is' + name] = function(obj) {
      return toString.call(obj) === '[object ' + name + ']';
    };
  });

  // Define a fallback version of the method in browsers (ahem, IE < 9), where
  // there isn't any inspectable "Arguments" type.
  if (!_.isArguments(arguments)) {
    _.isArguments = function(obj) {
      return _.has(obj, 'callee');
    };
  }

  // Optimize `isFunction` if appropriate. Work around some typeof bugs in old v8,
  // IE 11 (#1621), and in Safari 8 (#1929).
  if (typeof /./ != 'function' && typeof Int8Array != 'object') {
    _.isFunction = function(obj) {
      return typeof obj == 'function' || false;
    };
  }

  // Is a given object a finite number?
  _.isFinite = function(obj) {
    return isFinite(obj) && !isNaN(parseFloat(obj));
  };

  // Is the given value `NaN`? (NaN is the only number which does not equal itself).
  _.isNaN = function(obj) {
    return _.isNumber(obj) && obj !== +obj;
  };

  // Is a given value a boolean?
  _.isBoolean = function(obj) {
    return obj === true || obj === false || toString.call(obj) === '[object Boolean]';
  };

  // Is a given value equal to null?
  _.isNull = function(obj) {
    return obj === null;
  };

  // Is a given variable undefined?
  _.isUndefined = function(obj) {
    return obj === void 0;
  };

  // Shortcut function for checking if an object has a given property directly
  // on itself (in other words, not on a prototype).
  _.has = function(obj, key) {
    return obj != null && hasOwnProperty.call(obj, key);
  };

  // Utility Functions
  // -----------------

  // Run Underscore.js in *noConflict* mode, returning the `_` variable to its
  // previous owner. Returns a reference to the Underscore object.
  _.noConflict = function() {
    root._ = previousUnderscore;
    return this;
  };

  // Keep the identity function around for default iteratees.
  _.identity = function(value) {
    return value;
  };

  // Predicate-generating functions. Often useful outside of Underscore.
  _.constant = function(value) {
    return function() {
      return value;
    };
  };

  _.noop = function(){};

  _.property = property;

  // Generates a function for a given object that returns a given property.
  _.propertyOf = function(obj) {
    return obj == null ? function(){} : function(key) {
      return obj[key];
    };
  };

  // Returns a predicate for checking whether an object has a given set of
  // `key:value` pairs.
  _.matcher = _.matches = function(attrs) {
    attrs = _.extendOwn({}, attrs);
    return function(obj) {
      return _.isMatch(obj, attrs);
    };
  };

  // Run a function **n** times.
  _.times = function(n, iteratee, context) {
    var accum = Array(Math.max(0, n));
    iteratee = optimizeCb(iteratee, context, 1);
    for (var i = 0; i < n; i++) accum[i] = iteratee(i);
    return accum;
  };

  // Return a random integer between min and max (inclusive).
  _.random = function(min, max) {
    if (max == null) {
      max = min;
      min = 0;
    }
    return min + Math.floor(Math.random() * (max - min + 1));
  };

  // A (possibly faster) way to get the current timestamp as an integer.
  _.now = Date.now || function() {
    return new Date().getTime();
  };

   // List of HTML entities for escaping.
  var escapeMap = {
    '&': '&amp;',
    '<': '&lt;',
    '>': '&gt;',
    '"': '&quot;',
    "'": '&#x27;',
    '`': '&#x60;'
  };
  var unescapeMap = _.invert(escapeMap);

  // Functions for escaping and unescaping strings to/from HTML interpolation.
  var createEscaper = function(map) {
    var escaper = function(match) {
      return map[match];
    };
    // Regexes for identifying a key that needs to be escaped
    var source = '(?:' + _.keys(map).join('|') + ')';
    var testRegexp = RegExp(source);
    var replaceRegexp = RegExp(source, 'g');
    return function(string) {
      string = string == null ? '' : '' + string;
      return testRegexp.test(string) ? string.replace(replaceRegexp, escaper) : string;
    };
  };
  _.escape = createEscaper(escapeMap);
  _.unescape = createEscaper(unescapeMap);

  // If the value of the named `property` is a function then invoke it with the
  // `object` as context; otherwise, return it.
  _.result = function(object, property, fallback) {
    var value = object == null ? void 0 : object[property];
    if (value === void 0) {
      value = fallback;
    }
    return _.isFunction(value) ? value.call(object) : value;
  };

  // Generate a unique integer id (unique within the entire client session).
  // Useful for temporary DOM ids.
  var idCounter = 0;
  _.uniqueId = function(prefix) {
    var id = ++idCounter + '';
    return prefix ? prefix + id : id;
  };

  // By default, Underscore uses ERB-style template delimiters, change the
  // following template settings to use alternative delimiters.
  _.templateSettings = {
    evaluate    : /<%([\s\S]+?)%>/g,
    interpolate : /<%=([\s\S]+?)%>/g,
    escape      : /<%-([\s\S]+?)%>/g
  };

  // When customizing `templateSettings`, if you don't want to define an
  // interpolation, evaluation or escaping regex, we need one that is
  // guaranteed not to match.
  var noMatch = /(.)^/;

  // Certain characters need to be escaped so that they can be put into a
  // string literal.
  var escapes = {
    "'":      "'",
    '\\':     '\\',
    '\r':     'r',
    '\n':     'n',
    '\u2028': 'u2028',
    '\u2029': 'u2029'
  };

  var escaper = /\\|'|\r|\n|\u2028|\u2029/g;

  var escapeChar = function(match) {
    return '\\' + escapes[match];
  };

  // JavaScript micro-templating, similar to John Resig's implementation.
  // Underscore templating handles arbitrary delimiters, preserves whitespace,
  // and correctly escapes quotes within interpolated code.
  // NB: `oldSettings` only exists for backwards compatibility.
  _.template = function(text, settings, oldSettings) {
    if (!settings && oldSettings) settings = oldSettings;
    settings = _.defaults({}, settings, _.templateSettings);

    // Combine delimiters into one regular expression via alternation.
    var matcher = RegExp([
      (settings.escape || noMatch).source,
      (settings.interpolate || noMatch).source,
      (settings.evaluate || noMatch).source
    ].join('|') + '|$', 'g');

    // Compile the template source, escaping string literals appropriately.
    var index = 0;
    var source = "__p+='";
    text.replace(matcher, function(match, escape, interpolate, evaluate, offset) {
      source += text.slice(index, offset).replace(escaper, escapeChar);
      index = offset + match.length;

      if (escape) {
        source += "'+\n((__t=(" + escape + "))==null?'':_.escape(__t))+\n'";
      } else if (interpolate) {
        source += "'+\n((__t=(" + interpolate + "))==null?'':__t)+\n'";
      } else if (evaluate) {
        source += "';\n" + evaluate + "\n__p+='";
      }

      // Adobe VMs need the match returned to produce the correct offest.
      return match;
    });
    source += "';\n";

    // If a variable is not specified, place data values in local scope.
    if (!settings.variable) source = 'with(obj||{}){\n' + source + '}\n';

    source = "var __t,__p='',__j=Array.prototype.join," +
      "print=function(){__p+=__j.call(arguments,'');};\n" +
      source + 'return __p;\n';

    try {
      var render = new Function(settings.variable || 'obj', '_', source);
    } catch (e) {
      e.source = source;
      throw e;
    }

    var template = function(data) {
      return render.call(this, data, _);
    };

    // Provide the compiled source as a convenience for precompilation.
    var argument = settings.variable || 'obj';
    template.source = 'function(' + argument + '){\n' + source + '}';

    return template;
  };

  // Add a "chain" function. Start chaining a wrapped Underscore object.
  _.chain = function(obj) {
    var instance = _(obj);
    instance._chain = true;
    return instance;
  };

  // OOP
  // ---------------
  // If Underscore is called as a function, it returns a wrapped object that
  // can be used OO-style. This wrapper holds altered versions of all the
  // underscore functions. Wrapped objects may be chained.

  // Helper function to continue chaining intermediate results.
  var result = function(instance, obj) {
    return instance._chain ? _(obj).chain() : obj;
  };

  // Add your own custom functions to the Underscore object.
  _.mixin = function(obj) {
    _.each(_.functions(obj), function(name) {
      var func = _[name] = obj[name];
      _.prototype[name] = function() {
        var args = [this._wrapped];
        push.apply(args, arguments);
        return result(this, func.apply(_, args));
      };
    });
  };

  // Add all of the Underscore functions to the wrapper object.
  _.mixin(_);

  // Add all mutator Array functions to the wrapper.
  _.each(['pop', 'push', 'reverse', 'shift', 'sort', 'splice', 'unshift'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      var obj = this._wrapped;
      method.apply(obj, arguments);
      if ((name === 'shift' || name === 'splice') && obj.length === 0) delete obj[0];
      return result(this, obj);
    };
  });

  // Add all accessor Array functions to the wrapper.
  _.each(['concat', 'join', 'slice'], function(name) {
    var method = ArrayProto[name];
    _.prototype[name] = function() {
      return result(this, method.apply(this._wrapped, arguments));
    };
  });

  // Extracts the result from a wrapped and chained object.
  _.prototype.value = function() {
    return this._wrapped;
  };

  // Provide unwrapping proxy for some methods used in engine operations
  // such as arithmetic and JSON stringification.
  _.prototype.valueOf = _.prototype.toJSON = _.prototype.value;

  _.prototype.toString = function() {
    return '' + this._wrapped;
  };

  // AMD registration happens at the end for compatibility with AMD loaders
  // that may not enforce next-turn semantics on modules. Even though general
  // practice for AMD registration is to be anonymous, underscore registers
  // as a named module because, like jQuery, it is a base library that is
  // popular enough to be bundled in a third party lib, but not be part of
  // an AMD load request. Those cases could generate an error when an
  // anonymous define() is called outside of a loader request.
  if (typeof define === 'function' && define.amd) {
    define('underscore', [], function() {
      return _;
    });
  }
}.call(this));

},{}],86:[function(require,module,exports){
module.exports = require('./src/voom');


},{"./src/voom":89}],87:[function(require,module,exports){
module.exports={
  "_args": [
    [
      {
        "raw": "voom@^1.0.8",
        "scope": null,
        "escapedName": "voom",
        "name": "voom",
        "rawSpec": "^1.0.8",
        "spec": ">=1.0.8 <2.0.0",
        "type": "range"
      },
      "/Users/Russ/Sites/nitro-xmpp-client-connection"
    ]
  ],
  "_from": "voom@>=1.0.8 <2.0.0",
  "_id": "voom@1.0.8",
  "_inCache": true,
  "_installable": true,
  "_location": "/voom",
  "_nodeVersion": "5.2.0",
  "_npmOperationalInternal": {
    "host": "packages-12-west.internal.npmjs.com",
    "tmp": "tmp/voom-1.0.8.tgz_1475696929192_0.2945524323731661"
  },
  "_npmUser": {
    "name": "tragle",
    "email": "tragle@gmail.com"
  },
  "_npmVersion": "3.3.12",
  "_phantomChildren": {},
  "_requested": {
    "raw": "voom@^1.0.8",
    "scope": null,
    "escapedName": "voom",
    "name": "voom",
    "rawSpec": "^1.0.8",
    "spec": ">=1.0.8 <2.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/"
  ],
  "_resolved": "https://registry.npmjs.org/voom/-/voom-1.0.8.tgz",
  "_shasum": "e2cf8cab65cdbfce511a9ca9bcd63ed543cf04e6",
  "_shrinkwrap": null,
  "_spec": "voom@^1.0.8",
  "_where": "/Users/Russ/Sites/nitro-xmpp-client-connection",
  "author": {
    "name": "Tom Ragle"
  },
  "bugs": {
    "url": "https://github.com/tragle/voom/issues"
  },
  "dependencies": {
    "pkginfo": "^0.4.0"
  },
  "description": "value oriented object map",
  "devDependencies": {
    "chai": "^3.5.0",
    "mocha": "^3.0.2"
  },
  "directories": {},
  "dist": {
    "shasum": "e2cf8cab65cdbfce511a9ca9bcd63ed543cf04e6",
    "tarball": "https://registry.npmjs.org/voom/-/voom-1.0.8.tgz"
  },
  "gitHead": "3be69b6c860b884eac3d3903917ea9bf91e0555f",
  "homepage": "https://github.com/tragle/voom#readme",
  "license": "MIT",
  "main": "index.js",
  "maintainers": [
    {
      "name": "tragle",
      "email": "tragle@gmail.com"
    }
  ],
  "name": "voom",
  "optionalDependencies": {},
  "readme": "ERROR: No README data found!",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/tragle/voom.git"
  },
  "scripts": {
    "test": "mocha --reporter spec"
  },
  "version": "1.0.8"
}

},{}],88:[function(require,module,exports){
"use strict";

// [array], [array] -> Bool
var arraysAreEqual = exports.arraysAreEqual = function (arrayA, arrayB) {
  if (arrayA.length !== arrayB.length) return false;
  for (var i = 0; i < arrayA.length; i++) {
    if (arrayA[i] !== arrayB[i]) return false;
  }
  return true;
};

// {obj} -> {obj}
var clone = exports.clone = function (obj) {
  function visit(obj, copy) {
    for (var n in obj) {
      if (isObject(obj[n])) {
        copy[n] = {};
        visit(obj[n], copy[n]);
      } else if (isArray(obj[n])) {
        copy[n] = obj[n].map(function(item) {
          if (isObject(item)) return clone(item);
          return item;
        });
      } else {
        copy[n] = obj[n];
      }
    }
    return copy;
  }
  return visit(obj, {});
};

// fn -> fn([array])
var collector = exports.collector = function (fn) {
  return function (array) {
    var results = [], res;
    if (!isArray(array)) return results;
    for (var i = 0; i < array.length; i++) {
      res = fn(array[i]);
      if (!isNull(res) && !isUndefined(res)) results.push(res);
    }
    return results;
  };
};

// fn -> delayed() -> fn
var delay = exports.delay = function (fn) {
  return function delayed () {
    return fn;
  }
};

// [source], [target], fn -> [results]
var distribute = exports.distribute = function (source, target, fn) {
  var factor = source.length / target.length,
    results = [];
  fn = fn || function (a, b) {return [a, b];};
  for (var i = 0; i < target.length; i++) {
    results = results.concat(fn(source[Math.floor(i * factor)], target[i]));
  }
  return results;
};

// [list], pred -> bool
var every = exports.every = function (list, pred) {
  for (var i = 0; i < list.length; i++) {
    if (!pred(list[i])) return false;
  }
  return true;
}

// {}, val -> [path]
var findPath = exports.findPath = function (obj, val, includeArrays) {
  var path = [];
  val = isFunction(val) ? val.name : val;
  function visit(source) {
    for (var n in source) {
      var sourceName = isFunction(source[n]) ? source[n].name : source[n];
      path.push(n);
      if (sourceName === val) return true; 
      if (isObject(sourceName)) 
        if (visit(sourceName)) return true;
      if (includeArrays && isArray(sourceName))
        if (visit(sourceName)) return true;
      path.pop();
    }
  }
  visit(obj);
  return path;
};

// val -> input -> val | void
var gate = exports.gate = function (val) {
  return function (input) {
    if (input === val) return val;
  }
};

// [[arrays]] -> [[groups]]
var groupArrays = exports.groupArrays = function (arrays) {
  var groups = [];
  arrays = arrays.slice(0);

  while (arrays.length) {
    var array = arrays.pop();
    if (!groups.length) {
      groups.push([array]);
      continue
    }
    for (var i in groups) {
      if (arraysAreEqual(array, groups[i][0])) {
        groups[i].push(array);
      } else {
        groups.push([array]);
      }
    }
  }
  return groups;
};

// val -> val 
var identity = exports.identity = function (val) {
  return val;
};

// val -> Bool
var isArray = exports.isArray = function (val) {
  return Array.isArray(val);
};

// val -> Bool
var isEmpty = exports.isEmpty = function (val) {
  return !isValue(val) || !!(val.length === 0);
};

// val -> Bool
var isFunction = exports.isFunction = function (val) {
  return typeof val === 'function';
};

// val -> Bool
var isNull = exports.isNull = function (val) {
  return val === null;
};

// val -> Bool
var isObject = exports.isObject = function (val) {
  return !!val && val.constructor && val.constructor === Object;
};

// val -> Bool
var isPrimitive = exports.isPrimitive = function (val) {
  return isValue(val) && !isObject(val) && !isArray(val) && !isFunction(val);
};

// val -> Bool
var isUndefined = exports.isUndefined = function (val) {
  return val === void 0;
};

// val -> Bool
var isValue = exports.isValue = function (val) {
  return !isNull(val) && !isUndefined(val);
};

// [array], n -> [array]
var last = exports.last = function (array, n) {
  if (!array.length) return;
  var len = n ? array.length - n : array.length - 1;
  return Array.prototype.slice.call(array, len, array.length)
};

// {obj} -> {obj}
var nullify = exports.nullify = function (obj) {
  traverse(obj, function(_obj, n) {
    _obj[n] = isArray(_obj[n]) ? [] : null;
  });
  return obj
};

// fns -> fn
var pipe = exports.pipe = function () {
  if (!arguments.length) return identity;
  if (arguments.length === 1) return arguments[0];
  var fns = arguments;
  return function (x) {
    for (var i = 0; i < fns.length; i++) {
      x = fns[i](x);
    }
    return x;
  }
};

// {obj}, [path]  -> value
var readPath = exports.readPath = function (obj, path) {
  if (!path.length) return;
  if (path.length > 1) return readPath(obj[path[0]], path.slice(1));
  return obj[path[0]];
};

// val -> [val]
var toArray = exports.toArray = function (val) {
  if (isUndefined(val) || isNull(val)) return [];
  if (isArray(val)) return val;
  return [val];
};

// {source}, fn({source}, {target}, n, [path]), {target} -> void 
var traverse = exports.traverse = function (source, fn, target) {
  var path = [];
  function visit (source, target, fn) {
    for (var n in source) {
      path.push(n);
      if (isObject(source[n])) {
        visit(source[n], target, fn);
      } else {
        fn(source, n, target, path.slice(0));
      }
      path.pop();
    }
  }
  visit(source, target, fn);
  return target;
};

// val -> input -> val
var value = exports.value = function (val) {
  return function (input) {
    if (isValue(val) && isValue(input)) return val;
  }
};





},{}],89:[function(require,module,exports){
var version = require('../package.json').version;
var lib = require('./lib.js');

module.exports = function () {

  function getTransformIndex (obj) {
    var index = {};
    lib.traverse (obj, function (_obj, n) {
      var path = lib.findPath(reader, _obj[n]),
        fn = lib.isFunction(_obj[n]) ? _obj[n] : lib.identity;
      index[pathToKey(path)] = fn; 
    });
    return index;
  }

  function getTransform (sources, key) {
    if (!sources || !sources.length) return lib.identity;
    if (!lib.isArray(sources)) return;
    var fns = sources.map(function(source) {
      if (lib.isFunction(source)) return source;
      if (lib.isObject(source)) return lib.isFunction(source[key]) ? source[key] : lib.identity;
      return f(source);
    });
    return lib.pipe.apply(null, fns);
  }

  function getAssigner (obj, key, transforms) {
    transforms = transforms || [];
    if (lib.isFunction(obj[key])) transforms.push(obj[key]);
    var fn = getTransform(transforms, key);
    fn = lib.isFunction(fn) ? fn : lib.identity;
    return function (val) {
      obj[key] = fn(val, obj, key);
    };
  }

  function pathToKey (path) {
    return path.join('::||');
  }

  function keyToPath (key) {
    return key.split('::||');
  }

  function getPathsForObj (reader, obj) {
    var paths = {};
    for (var k in obj) {
      var val = obj[k] ;
      if (lib.isObject(val)) 
        return getPathsForObj(reader, val);
      if (lib.isFunction(val)) val = val.name;
      paths[val] = lib.findPath(reader, val, true);
    }
    return paths;
  }

  function getPaths (reader, obj) {
    var targetPaths = getPathsForObj(reader, obj),
      result = {arrays: [], nonArrays: []};
    for (var tn in targetPaths) {
      var depth = targetPaths[tn].filter(function(key) {
        return key === "0";
      }).length;
      if (depth === 0) result.nonArrays.push(targetPaths[tn]);
      if (depth === 1) result.arrays.push(targetPaths[tn].slice(0, targetPaths[tn].indexOf("0")));
      if (depth > 1) throw new Error ("Unable to map nested arrays", "voom.js");
    }
    return result;
  }

  function indexArrayMap (index, indexKey, writer, writerKey, readerNode, writerArray) {
    index[indexKey] = getAssigner(writer, writerKey, [f(readerNode, writerArray)]);
  }

  function indexArrayMerges (index, paths, source, n, reader, writer, transforms) {
    for (var i in paths) {
      if (paths[i].length) {
        var readerVal = lib.readPath(reader, paths[i])[0];
        var mapFn = f(readerVal, source[n][0]);
        var mergeFn = function (left, right) {
          var newObj = mapFn(left);
          return lib.traverse(newObj, function(_newObj, n, target) {
            if (!lib.isNull(_newObj[n])) target[n] = _newObj[n];
          }, right);
        };
        index[pathToKey(paths[i][0])] = lib.delay(getAssigner(source, n, 
          [function(readerColl) {
            return lib.distribute(readerColl, source[n], mergeFn);
          }]));
      }
    }
  }

  function indexNonArrayMaps (index, paths, _writer, n, reader, writer, transforms) {
    for (var na in paths) {
      var nonArrayPath = paths[na];
      var readerVal = lib.readPath(reader, nonArrayPath);
      var keyToWrite = function() {
        for (var sn in _writer[n][0]) {
          if (_writer[n][0][sn] === readerVal) return sn;
        }
      }();
      var mapFn = function (val, obj, key) {
        return obj[key].map(function(item) {
          if (lib.isObject(item)) {
            item[keyToWrite] = val;
            return item;
          }
        });
      };
      var assigner = lib.delay(getAssigner(_writer, n, [mapFn]));
      index[pathToKey(nonArrayPath)] = assigner;
    } 
  }

  function indexCollection (index, _writer, n, reader, writer, transforms) {
    var paths = getPaths(reader, _writer[n]),
      arrayPaths = paths.arrays,
      nonArrayPaths = paths.nonArrays,
      pathGroups = lib.groupArrays(arrayPaths).sort(function (a,b){
        return b.length - a.length;
      });
    if (pathGroups.length) {
      var topPath = pathGroups[0], 
        otherPaths = pathGroups.slice(1);
      if (topPath.length) 
        indexArrayMap(index, pathToKey(topPath[0]), _writer, n, lib.readPath(reader, topPath[0]), _writer[n]);
      if (otherPaths.length)
        indexArrayMerges(index, otherPaths, _writer, n, reader, writer, transforms);
    }
    if (nonArrayPaths.length) {
      indexNonArrayMaps (index, nonArrayPaths, _writer, n, reader, writer, transforms);
    }
  }

  function getMapIndex (reader, writer, transforms) {
    transforms = transforms || [];
    return lib.traverse (writer, function (_writer, n, index) {
      if (lib.isArray(_writer[n])) {
        if (lib.isObject(_writer[n][0])) {
          indexCollection(index, _writer, n, reader, writer, transforms);
        }
      } else {
        var path = lib.findPath(reader, _writer[n]);
        var readerVal = lib.readPath(reader, path);
        if (path && readerVal) {
          var transform = lib.isFunction(readerVal) ? readerVal : [];
          index[pathToKey(path)] = getAssigner(_writer, n, transforms.concat(transform));
        } 
      }
    }, {});
  }

  function mapper (reader, writer, transforms) {
    var index = getMapIndex (reader, writer, transforms) || {};
    return function (obj) {
      var queue = [];
      writer = lib.nullify(writer);
      lib.traverse(index, function(_index, n) {
        var writeFn = _index[n];
        var val = lib.readPath(obj, keyToPath(n));
        if (lib.isFunction(writeFn) && writeFn.name === 'delayed')
          queue.push(writeFn, val);
        if (lib.isFunction(writeFn)) writeFn(val);
      }, writer);
      for (var i = 0; i < queue.length; i+=2)
        queue[i]().call(null, queue[i+1]);
      return lib.clone(writer);
    }
  }

  function f () {
    var args = Array.prototype.slice.call(arguments);
    if (!args.length) return lib.identity;
    var reader = args[0], 
      writer = args.length > 1 ? lib.last(args, 1)[0] : null,
      transforms = args.length > 2 ? args.slice(1, args.length - 1) : [];
    if (lib.isObject(writer)) writer = lib.clone(writer)

    if (lib.isFunction(reader) && args.length === 1) 
      return reader;

    if (lib.every(args, lib.isFunction.bind(lib)))
      return lib.pipe(reader, getTransform(transforms), writer);

    if (lib.isFunction(writer))
      return lib.pipe(f.apply(null, args.slice(0, args.length - 1)), writer);

    if (lib.isFunction(reader))
      return lib.pipe(reader, f.apply(null, args.slice(1)));

    if (lib.isObject(reader) && args.length === 1) 
      return mapper(reader, reader);

    if (lib.isObject(reader) && lib.isObject(writer)) 
      return mapper(reader, writer, transforms);

    if (lib.isObject(reader) && lib.isArray(writer)) 
      return lib.pipe(lib.toArray, f([reader], writer));

    if (lib.isArray(reader) && args.length === 1) 
      return lib.collector(f(reader[0], reader[0]));

    if (lib.isArray(reader) && lib.isArray(writer)) 
      return lib.collector(f(reader[0], writer[0]));

    if (lib.isPrimitive(reader) && args.length === 1) 
      return lib.gate(reader);

    if (lib.isPrimitive(reader) && lib.isPrimitive(writer)) 
      return lib.pipe(lib.gate(reader), getTransform(transforms), lib.value(writer));

    throw new Error ("Invalid arguments", "voom.js");

  }

  return {
    f: f,
    version: version
  };

}();


},{"../package.json":87,"./lib.js":88}],90:[function(require,module,exports){
/*
 Copyright 2011-2013 Abdulla Abdurakhmanov
 Original sources are available at https://code.google.com/p/x2js/

 Licensed under the Apache License, Version 2.0 (the "License");
 you may not use this file except in compliance with the License.
 You may obtain a copy of the License at

 http://www.apache.org/licenses/LICENSE-2.0

 Unless required by applicable law or agreed to in writing, software
 distributed under the License is distributed on an "AS IS" BASIS,
 WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 See the License for the specific language governing permissions and
 limitations under the License.
 */
/**
 * Modified by JekaMoroz for npm usage
 */

module.exports = function X2JS(config) {
    'use strict';

    var VERSION = "1.1.8";

    config = config || {};
    initConfigDefaults();
    initRequiredPolyfills();

    function initConfigDefaults() {
        if(config.escapeMode === undefined) {
            config.escapeMode = true;
        }
        config.attributePrefix = config.attributePrefix || "_";
        config.arrayAccessForm = config.arrayAccessForm || "none";
        config.emptyNodeForm = config.emptyNodeForm || "text";
        if(config.enableToStringFunc === undefined) {
            config.enableToStringFunc = true;
        }
        config.arrayAccessFormPaths = config.arrayAccessFormPaths || [];
        if(config.skipEmptyTextNodesForObj === undefined) {
            config.skipEmptyTextNodesForObj = true;
        }
        if(config.stripWhitespaces === undefined) {
            config.stripWhitespaces = true;
        }
        config.datetimeAccessFormPaths = config.datetimeAccessFormPaths || [];
    }

    var DOMNodeTypes = {
        ELEMENT_NODE 	   : 1,
        TEXT_NODE    	   : 3,
        CDATA_SECTION_NODE : 4,
        COMMENT_NODE	   : 8,
        DOCUMENT_NODE 	   : 9
    };

    function initRequiredPolyfills() {
        function pad(number) {
            var r = String(number);
            if ( r.length === 1 ) {
                r = '0' + r;
            }
            return r;
        }
        // Hello IE8-
        if(typeof String.prototype.trim !== 'function') {
            String.prototype.trim = function() {
                return this.replace(/^\s+|^\n+|(\s|\n)+$/g, '');
            }
        }
        if(typeof Date.prototype.toISOString !== 'function') {
            // Implementation from http://stackoverflow.com/questions/2573521/how-do-i-output-an-iso-8601-formatted-string-in-javascript
            Date.prototype.toISOString = function() {
                return this.getUTCFullYear()
                    + '-' + pad( this.getUTCMonth() + 1 )
                    + '-' + pad( this.getUTCDate() )
                    + 'T' + pad( this.getUTCHours() )
                    + ':' + pad( this.getUTCMinutes() )
                    + ':' + pad( this.getUTCSeconds() )
                    + '.' + String( (this.getUTCMilliseconds()/1000).toFixed(3) ).slice( 2, 5 )
                    + 'Z';
            };
        }
    }

    function getNodeLocalName( node ) {
        var nodeLocalName = node.localName;
        if(nodeLocalName == null) // Yeah, this is IE!!
            nodeLocalName = node.baseName;
        if(nodeLocalName == null || nodeLocalName=="") // =="" is IE too
            nodeLocalName = node.nodeName;
        return nodeLocalName;
    }

    function getNodePrefix(node) {
        return node.prefix;
    }

    function escapeXmlChars(str) {
        if(typeof(str) == "string")
            return str.replace(/&/g, '&amp;').replace(/</g, '&lt;').replace(/>/g, '&gt;').replace(/"/g, '&quot;').replace(/'/g, '&#x27;').replace(/\//g, '&#x2F;');
        else
            return str;
    }

    function unescapeXmlChars(str) {
        return str.replace(/&amp;/g, '&').replace(/&lt;/g, '<').replace(/&gt;/g, '>').replace(/&quot;/g, '"').replace(/&#x27;/g, "'").replace(/&#x2F;/g, '\/');
    }

    function toArrayAccessForm(obj, childName, path) {
        switch(config.arrayAccessForm) {
            case "property":
                if(!(obj[childName] instanceof Array))
                    obj[childName+"_asArray"] = [obj[childName]];
                else
                    obj[childName+"_asArray"] = obj[childName];
                break;
            /*case "none":
             break;*/
        }

        if(!(obj[childName] instanceof Array) && config.arrayAccessFormPaths.length > 0) {
            var idx = 0;
            for(; idx < config.arrayAccessFormPaths.length; idx++) {
                var arrayPath = config.arrayAccessFormPaths[idx];
                if( typeof arrayPath === "string" ) {
                    if(arrayPath == path)
                        break;
                }
                else
                if( arrayPath instanceof RegExp) {
                    if(arrayPath.test(path))
                        break;
                }
                else
                if( typeof arrayPath === "function") {
                    if(arrayPath(obj, childName, path))
                        break;
                }
            }
            if(idx!=config.arrayAccessFormPaths.length) {
                obj[childName] = [obj[childName]];
            }
        }
    }

    function fromXmlDateTime(prop) {
        // Implementation based up on http://stackoverflow.com/questions/8178598/xml-datetime-to-javascript-date-object
        // Improved to support full spec and optional parts
        var bits = prop.split(/[-T:+Z]/g);

        var d = new Date(bits[0], bits[1]-1, bits[2]);
        var secondBits = bits[5].split("\.");
        d.setHours(bits[3], bits[4], secondBits[0]);
        if(secondBits.length>1)
            d.setMilliseconds(secondBits[1]);

        // Get supplied time zone offset in minutes
        if(bits[6] && bits[7]) {
            var offsetMinutes = bits[6] * 60 + Number(bits[7]);
            var sign = /\d\d-\d\d:\d\d$/.test(prop)? '-' : '+';

            // Apply the sign
            offsetMinutes = 0 + (sign == '-'? -1 * offsetMinutes : offsetMinutes);

            // Apply offset and local timezone
            d.setMinutes(d.getMinutes() - offsetMinutes - d.getTimezoneOffset())
        }
        else
        if(prop.indexOf("Z", prop.length - 1) !== -1) {
            d = new Date(Date.UTC(d.getFullYear(), d.getMonth(), d.getDate(), d.getHours(), d.getMinutes(), d.getSeconds(), d.getMilliseconds()));
        }

        // d is now a local time equivalent to the supplied time
        return d;
    }

    function checkFromXmlDateTimePaths(value, childName, fullPath) {
        if(config.datetimeAccessFormPaths.length > 0) {
            var path = fullPath.split("\.#")[0];
            var idx = 0;
            for(; idx < config.datetimeAccessFormPaths.length; idx++) {
                var dtPath = config.datetimeAccessFormPaths[idx];
                if( typeof dtPath === "string" ) {
                    if(dtPath == path)
                        break;
                }
                else
                if( dtPath instanceof RegExp) {
                    if(dtPath.test(path))
                        break;
                }
                else
                if( typeof dtPath === "function") {
                    if(dtPath(obj, childName, path))
                        break;
                }
            }
            if(idx!=config.datetimeAccessFormPaths.length) {
                return fromXmlDateTime(value);
            }
            else
                return value;
        }
        else
            return value;
    }

    function parseDOMChildren( node, path ) {
        if(node.nodeType == DOMNodeTypes.DOCUMENT_NODE) {
            var result = new Object;
            var nodeChildren = node.childNodes;
            // Alternative for firstElementChild which is not supported in some environments
            for(var cidx=0; cidx <nodeChildren.length; cidx++) {
                var child = nodeChildren.item(cidx);
                if(child.nodeType == DOMNodeTypes.ELEMENT_NODE) {
                    var childName = getNodeLocalName(child);
                    result[childName] = parseDOMChildren(child, childName);
                }
            }
            return result;
        }
        else
        if(node.nodeType == DOMNodeTypes.ELEMENT_NODE) {
            var result = new Object;
            result.__cnt=0;

            var nodeChildren = node.childNodes;

            // Children nodes
            for(var cidx=0; cidx <nodeChildren.length; cidx++) {
                var child = nodeChildren.item(cidx); // nodeChildren[cidx];
                var childName = getNodeLocalName(child);

                if(child.nodeType!= DOMNodeTypes.COMMENT_NODE) {
                    result.__cnt++;
                    if(result[childName] == null) {
                        result[childName] = parseDOMChildren(child, path+"."+childName);
                        toArrayAccessForm(result, childName, path+"."+childName);
                    }
                    else {
                        if(result[childName] != null) {
                            if( !(result[childName] instanceof Array)) {
                                result[childName] = [result[childName]];
                                toArrayAccessForm(result, childName, path+"."+childName);
                            }
                        }
                        (result[childName])[result[childName].length] = parseDOMChildren(child, path+"."+childName);
                    }
                }
            }

            // Attributes
            for(var aidx=0; aidx <node.attributes.length; aidx++) {
                var attr = node.attributes.item(aidx); // [aidx];
                result.__cnt++;
                result[config.attributePrefix+attr.name]=attr.value;
            }

            // Node namespace prefix
            var nodePrefix = getNodePrefix(node);
            if(nodePrefix!=null && nodePrefix!="") {
                result.__cnt++;
                result.__prefix=nodePrefix;
            }

            if(result["#text"]!=null) {
                result.__text = result["#text"];
                if(result.__text instanceof Array) {
                    result.__text = result.__text.join("\n");
                }
                if(config.escapeMode)
                    result.__text = unescapeXmlChars(result.__text);
                if(config.stripWhitespaces)
                    result.__text = result.__text.trim();
                delete result["#text"];
                if(config.arrayAccessForm=="property")
                    delete result["#text_asArray"];
                result.__text = checkFromXmlDateTimePaths(result.__text, childName, path+"."+childName);
            }
            if(result["#cdata-section"]!=null) {
                result.__cdata = result["#cdata-section"];
                delete result["#cdata-section"];
                if(config.arrayAccessForm=="property")
                    delete result["#cdata-section_asArray"];
            }

            if( result.__cnt == 1 && result.__text!=null  ) {
                result = result.__text;
            }
            else
            if( result.__cnt == 0 && config.emptyNodeForm=="text" ) {
                result = '';
            }
            else
            if ( result.__cnt > 1 && result.__text!=null && config.skipEmptyTextNodesForObj) {
                if( (config.stripWhitespaces && result.__text=="") || (result.__text.trim()=="")) {
                    delete result.__text;
                }
            }
            delete result.__cnt;

            if( config.enableToStringFunc && (result.__text!=null || result.__cdata!=null )) {
                result.toString = function() {
                    return (this.__text!=null? this.__text:'')+( this.__cdata!=null ? this.__cdata:'');
                };
            }

            return result;
        }
        else
        if(node.nodeType == DOMNodeTypes.TEXT_NODE || node.nodeType == DOMNodeTypes.CDATA_SECTION_NODE) {
            return node.nodeValue;
        }
    }

    function startTag(jsonObj, element, attrList, closed) {
        var resultStr = "<"+ ( (jsonObj!=null && jsonObj.__prefix!=null)? (jsonObj.__prefix+":"):"") + element;
        if(attrList!=null) {
            for(var aidx = 0; aidx < attrList.length; aidx++) {
                var attrName = attrList[aidx];
                var attrVal = jsonObj[attrName];
                if(config.escapeMode)
                    attrVal=escapeXmlChars(attrVal);
                resultStr+=" "+attrName.substr(config.attributePrefix.length)+"='"+attrVal+"'";
            }
        }
        if(!closed)
            resultStr+=">";
        else
            resultStr+="/>";
        return resultStr;
    }

    function endTag(jsonObj,elementName) {
        return "</"+ (jsonObj.__prefix!=null? (jsonObj.__prefix+":"):"")+elementName+">";
    }

    function endsWith(str, suffix) {
        return str.indexOf(suffix, str.length - suffix.length) !== -1;
    }

    function jsonXmlSpecialElem ( jsonObj, jsonObjField ) {
        if((config.arrayAccessForm=="property" && endsWith(jsonObjField.toString(),("_asArray")))
            || jsonObjField.toString().indexOf(config.attributePrefix)==0
            || jsonObjField.toString().indexOf("__")==0
            || (jsonObj[jsonObjField] instanceof Function) )
            return true;
        else
            return false;
    }

    function jsonXmlElemCount ( jsonObj ) {
        var elementsCnt = 0;
        if(jsonObj instanceof Object ) {
            for( var it in jsonObj  ) {
                if(jsonXmlSpecialElem ( jsonObj, it) )
                    continue;
                elementsCnt++;
            }
        }
        return elementsCnt;
    }

    function parseJSONAttributes ( jsonObj ) {
        var attrList = [];
        if(jsonObj instanceof Object ) {
            for( var ait in jsonObj  ) {
                if(ait.toString().indexOf("__")== -1 && ait.toString().indexOf(config.attributePrefix)==0) {
                    attrList.push(ait);
                }
            }
        }
        return attrList;
    }

    function parseJSONTextAttrs ( jsonTxtObj ) {
        var result ="";

        if(jsonTxtObj.__cdata!=null) {
            result+="<![CDATA["+jsonTxtObj.__cdata+"]]>";
        }

        if(jsonTxtObj.__text!=null) {
            if(config.escapeMode)
                result+=escapeXmlChars(jsonTxtObj.__text);
            else
                result+=jsonTxtObj.__text;
        }
        return result;
    }

    function parseJSONTextObject ( jsonTxtObj ) {
        var result ="";

        if( jsonTxtObj instanceof Object ) {
            result+=parseJSONTextAttrs ( jsonTxtObj );
        }
        else
        if(jsonTxtObj!=null) {
            if(config.escapeMode)
                result+=escapeXmlChars(jsonTxtObj);
            else
                result+=jsonTxtObj;
        }

        return result;
    }

    function parseJSONArray ( jsonArrRoot, jsonArrObj, attrList ) {
        var result = "";
        if(jsonArrRoot.length == 0) {
            result+=startTag(jsonArrRoot, jsonArrObj, attrList, true);
        }
        else {
            for(var arIdx = 0; arIdx < jsonArrRoot.length; arIdx++) {
                result+=startTag(jsonArrRoot[arIdx], jsonArrObj, parseJSONAttributes(jsonArrRoot[arIdx]), false);
                result+=parseJSONObject(jsonArrRoot[arIdx]);
                result+=endTag(jsonArrRoot[arIdx],jsonArrObj);
            }
        }
        return result;
    }

    function parseJSONObject ( jsonObj ) {
        var result = "";

        var elementsCnt = jsonXmlElemCount ( jsonObj );

        if(elementsCnt > 0) {
            for( var it in jsonObj ) {

                if(jsonXmlSpecialElem ( jsonObj, it) )
                    continue;

                var subObj = jsonObj[it];

                var attrList = parseJSONAttributes( subObj )

                if(subObj == null || subObj == undefined) {
                    result+=startTag(subObj, it, attrList, true);
                }
                else
                if(subObj instanceof Object) {

                    if(subObj instanceof Array) {
                        result+=parseJSONArray( subObj, it, attrList );
                    }
                    else if(subObj instanceof Date) {
                        result+=startTag(subObj, it, attrList, false);
                        result+=subObj.toISOString();
                        result+=endTag(subObj,it);
                    }
                    else {
                        var subObjElementsCnt = jsonXmlElemCount ( subObj );
                        if(subObjElementsCnt > 0 || subObj.__text!=null || subObj.__cdata!=null) {
                            result+=startTag(subObj, it, attrList, false);
                            result+=parseJSONObject(subObj);
                            result+=endTag(subObj,it);
                        }
                        else {
                            result+=startTag(subObj, it, attrList, true);
                        }
                    }
                }
                else {
                    result+=startTag(subObj, it, attrList, false);
                    result+=parseJSONTextObject(subObj);
                    result+=endTag(subObj,it);
                }
            }
        }
        result+=parseJSONTextObject(jsonObj);

        return result;
    }

    this.parseXmlString = function(xmlDocStr) {
        var isIEParser = window.ActiveXObject || "ActiveXObject" in window;
        if (xmlDocStr === undefined) {
            return null;
        }
        var xmlDoc;
        if (window.DOMParser) {
            var parser=new window.DOMParser();
            var parsererrorNS = null;
            // IE9+ now is here
            if(!isIEParser) {
                try {
                    parsererrorNS = parser.parseFromString("INVALID", "text/xml").childNodes[0].namespaceURI;
                }
                catch(err) {
                    parsererrorNS = null;
                }
            }
            try {
                xmlDoc = parser.parseFromString( xmlDocStr, "text/xml" );
                if( parsererrorNS!= null && xmlDoc.getElementsByTagNameNS(parsererrorNS, "parsererror").length > 0) {
                    //throw new Error('Error parsing XML: '+xmlDocStr);
                    xmlDoc = null;
                }
            }
            catch(err) {
                xmlDoc = null;
            }
        }
        else {
            // IE :(
            if(xmlDocStr.indexOf("<?")==0) {
                xmlDocStr = xmlDocStr.substr( xmlDocStr.indexOf("?>") + 2 );
            }
            xmlDoc=new ActiveXObject("Microsoft.XMLDOM");
            xmlDoc.async="false";
            xmlDoc.loadXML(xmlDocStr);
        }
        return xmlDoc;
    };

    this.asArray = function(prop) {
        if(prop instanceof Array)
            return prop;
        else
            return [prop];
    };

    this.toXmlDateTime = function(dt) {
        if(dt instanceof Date)
            return dt.toISOString();
        else
        if(typeof(dt) === 'number' )
            return new Date(dt).toISOString();
        else
            return null;
    };

    this.asDateTime = function(prop) {
        if(typeof(prop) == "string") {
            return fromXmlDateTime(prop);
        }
        else
            return prop;
    };

    this.xml2json = function (xmlDoc) {
        return parseDOMChildren ( xmlDoc );
    };

    this.xml_str2json = function (xmlDocStr) {
        var xmlDoc = this.parseXmlString(xmlDocStr);
        if(xmlDoc!=null)
            return this.xml2json(xmlDoc);
        else
            return null;
    };

    this.json2xml_str = function (jsonObj) {
        return parseJSONObject ( jsonObj );
    };

    this.json2xml = function (jsonObj) {
        var xmlDocStr = this.json2xml_str (jsonObj);
        return this.parseXmlString(xmlDocStr);
    };

    this.getVersion = function () {
        return VERSION;
    };

}

},{}],"adapters/adapters":[function(require,module,exports){
var PresenceShow, PresenceType, X2JS, XMPPPresence, _, hasProps, presenceShowToStatus, presenceToStatus, x2js,
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

X2JS = require('xml-json-parser');

PresenceType = require('enum/presence_type');

PresenceShow = require('enum/presence_show');

XMPPPresence = require('enum/xmpp_presence');

x2js = new X2JS();

exports.convertToJSON = _.bind(function(data) {
  return this.jsonAttrs(this.xmlToJSON(data));
}, this);

exports.xmlToJSON = function(data) {
  return x2js.xml2json(data);
};

exports.jsonAttrs = function(data, options) {
  var attrObjectName, nameTransform, processAttrs, ref, regexp, textPropertyName, textRegexp;
  if (options == null) {
    options = {};
  }
  ref = _.defaults(options, {
    attrObjectName: 'attributes',
    textPropertyName: 'text',
    regexp: /^_/,
    textRegexp: /^__text/,
    nameTransform: function(name) {
      return name.slice(1);
    }
  }), attrObjectName = ref.attrObjectName, textPropertyName = ref.textPropertyName, regexp = ref.regexp, textRegexp = ref.textRegexp, nameTransform = ref.nameTransform;
  processAttrs = function(obj) {
    var attrs, el, i, key, len, text, value;
    if (!hasProps(obj)) {
      return obj;
    }
    if (_.isArray(obj)) {
      for (i = 0, len = obj.length; i < len; i++) {
        el = obj[i];
        processAttrs(el);
      }
    } else {
      attrs = {};
      text = '';
      for (key in obj) {
        if (!hasProp.call(obj, key)) continue;
        value = obj[key];
        if (key.match(textRegexp)) {
          text = value;
          delete obj[key];
        } else if (key.match(regexp)) {
          attrs[nameTransform(key)] = value;
          delete obj[key];
        } else {
          processAttrs(value);
        }
      }
      if (!_.isEmpty(attrs)) {
        obj[attrObjectName] = attrs;
      }
      if (text) {
        obj[textPropertyName] = text;
      }
    }
    return obj;
  };
  return processAttrs(data);
};

exports.convertToJSON = _.bind(function(data) {
  return this.jsonAttrs(this.xmlToJSON(data) || data);
}, this);

exports.parseXMPPPresence = _.bind(function(data) {
  var attributes, ref, show, type;
  data = this.convertToJSON(data);
  ref = this.convertToJSON(data), attributes = ref.attributes, show = ref.show;
  type = attributes != null ? attributes.type : void 0;
  return {
    jid: Strophe.getBareJidFromJid(data.attributes.from),
    email: data.attributes.email || "",
    presence: presenceToStatus(type, show),
    status: ""
  };
}, this);

presenceToStatus = function(type, show) {
  if (type === PresenceType.UNAVAILABLE) {
    return XMPPPresence.UNAVAILABLE;
  } else if (show) {
    return presenceShowToStatus(show);
  } else {
    return XMPPPresence.AVAILABLE;
  }
};

presenceShowToStatus = function(show) {
  switch (show) {
    case PresenceShow.AWAY:
    case PresenceShow.EXTENDED_AWAY:
    case PresenceShow.DND:
      return show;
    default:
      return XMPPPresence.AVAILABLE;
  }
};

hasProps = function(obj) {
  if (obj == null) {
    obj = {};
  }
  return _.isObject(obj) && !_.isEmpty(obj);
};

module.exports = exports;


},{"enum/presence_show":"enum/presence_show","enum/presence_type":"enum/presence_type","enum/xmpp_presence":"enum/xmpp_presence","underscore":85,"xml-json-parser":90}],"adapters/data_payload":[function(require,module,exports){
var _, adapters, getStropheAdapters;

_ = require('underscore');

adapters = require('adapters/adapters');

module.exports.getData = function(stanza) {
  var adapterFunctions, convertToJSON;
  convertToJSON = adapters.convertToJSON;
  adapterFunctions = _.extend({}, adapters, getStropheAdapters());
  if (!stanza) {
    return {};
  }
  return {
    xml: stanza,
    json: convertToJSON(stanza),
    adapters: adapterFunctions
  };
};

getStropheAdapters = function() {
  return {
    getBareJID: Strophe.getBareJidFromJid,
    getResource: function(jid) {
      return Strophe.getResourceFromJid(jid) || "";
    }
  };
};


},{"adapters/adapters":"adapters/adapters","underscore":85}],"adapters/preferences":[function(require,module,exports){
var ActiveConversationId, ActiveConversationName, ActiveConversationType, ActivityMonitorWInt, AllowUnreadBool, ChatConvoXInt, CloseParticipantsBool, CloseSidebarBool, ContactIds, ContainerWInt, ConvPrevInt, DefaultBgColor, DefaultColorThemeStr, DefaultTextColor, EnableIntnlKbBool, FocusedConversationId, FontSizeStr, FontStyleStr, GroupCollapsedBool, GroupId, GroupName, HideOfflineContactsBool, IdleTimeInt, MainContentRtInt, MainContentWInt, MessageThemeStr, ParticipantViewSortStr, ParticipantsWInt, ShowCompanyBool, SidebarWInt, UIParticipantsWInt, WindowWInt, X2JS, YahooEnabledBool, YahooUserStr, _, alertsSchema, blastsSchema, conversationsSchema, emSchema, f, globalSchema, hardTrim, toJSON, toXML, validBool, validLimit, validNumber, validPrimitive, validString, validValue, voom, x2js,
  slice = [].slice;

voom = require('voom');

X2JS = require('xml-json-parser');

_ = require('underscore');

f = voom.f;

x2js = new X2JS();

validBool = function(data) {
  var ref;
  if (_.isBoolean(data)) {
    return data;
  }
  if (_.isString(data)) {
    if (data === 'true') {
      return true;
    }
    if (data === 'false') {
      return false;
    }
  }
  return console.warn('[Preferences] Invalid boolean at', validBool != null ? (ref = validBool.caller) != null ? ref.name : void 0 : void 0, ':', data);
};

validNumber = function(data) {
  var ref;
  if (_.isNumber(data)) {
    return data;
  }
  if (_.isString(data)) {
    return +data;
  }
  return console.warn('[Preferences] Invalid number at', validNumber != null ? (ref = validNumber.caller) != null ? ref.name : void 0 : void 0, ':', data);
};

validString = function(data) {
  var ref;
  if (_.isString(data)) {
    return data;
  }
  return console.warn('[Preferences] Invalid string at', validString != null ? (ref = validString.caller) != null ? ref.name : void 0 : void 0, ':', data);
};

validPrimitive = function(data) {
  var ref;
  if (!_.isObject(data)) {
    return data;
  }
  return console.warn('[Preferences] Invalid primitive at', validPrimitive != null ? (ref = validPrimitive.caller) != null ? ref.name : void 0 : void 0, ':', data);
};

validValue = function() {
  var location, ref, vals;
  location = validValue != null ? (ref = validValue.caller) != null ? ref.name : void 0 : void 0;
  vals = Array.prototype.slice.call(arguments);
  return function(data) {
    if (!_.contains(vals, data)) {
      console.warn('[Preferences] Invalid value at', location, ':', data, 'not in', vals.toString());
    }
    return data;
  };
};

validLimit = function(num, options) {
  var location, ref, ref1, trim;
  if (options == null) {
    options = {};
  }
  ref1 = _.defaults(options, {
    trim: true,
    location: validLimit != null ? (ref = validLimit.caller) != null ? ref.name : void 0 : void 0
  }), trim = ref1.trim, location = ref1.location;
  return function(data) {
    if (_.isArray(data) && (data.length > num)) {
      console.warn('[Preferences] Data exceeds limit at', location, ':', data.length, '>', num);
      if (trim) {
        data = data.slice(0, num);
      }
    }
    return data;
  };
};

ActiveConversationId = function(data) {
  return validString(data);
};

ActiveConversationName = function(data) {
  return validString(data);
};

ActiveConversationType = function(data) {
  return validValue('chat', 'managedchat', 'bilateral', 'multiparty', 'blast', 'mergedchat')(data);
};

ActivityMonitorWInt = function(data) {
  return validNumber(data);
};

AllowUnreadBool = function(data) {
  return validBool(data);
};

ChatConvoXInt = function(data) {
  return validNumber(data);
};

CloseParticipantsBool = function(data) {
  return validBool(data);
};

CloseSidebarBool = function(data) {
  return validBool(data);
};

ContactIds = function(data) {
  return validLimit(100)(data);
};

ContainerWInt = function(data) {
  return validNumber(data);
};

ConvPrevInt = function(data) {
  return validNumber(data);
};

DefaultColorThemeStr = function(data) {
  return validString(data);
};

DefaultBgColor = function(data) {
  return validString(data);
};

DefaultTextColor = function(data) {
  return validString(data);
};

EnableIntnlKbBool = function(data) {
  return validBool(data);
};

FocusedConversationId = function(data) {
  return validString(data);
};

FontSizeStr = function(data) {
  return validValue('sm', 'med', 'lg', 'xl')(data);
};

FontStyleStr = function(data) {
  return validValue('arial', 'times', 'courier', 'verdana', 'georgia')(data);
};

GroupCollapsedBool = function(data) {
  return validBool(data);
};

GroupId = function(data) {
  return validPrimitive(data);
};

GroupName = function(data) {
  return validString(data);
};

HideOfflineContactsBool = function(data) {
  return validBool(data);
};

IdleTimeInt = function(data) {
  return validNumber(data);
};

MainContentRtInt = function(data) {
  return validNumber(data);
};

MainContentWInt = function(data) {
  return validNumber(data);
};

MessageThemeStr = function(data) {
  return validValue('compact', 'expanded')(data);
};

ParticipantsWInt = function(data) {
  return validNumber(data);
};

ParticipantViewSortStr = function(data) {
  return validValue('first_name', 'last_name', 'company')(data);
};

ShowCompanyBool = function(data) {
  return validBool(data);
};

SidebarWInt = function(data) {
  return validNumber(data);
};

UIParticipantsWInt = function(data) {
  return validNumber(data);
};

WindowWInt = function(data) {
  return validNumber(data);
};

YahooEnabledBool = function(data) {
  return validBool(data);
};

YahooUserStr = function(data) {
  return validString(data);
};

globalSchema = {
  'Preferences': {
    'FocusedConversation': FocusedConversationId
  }
};

emSchema = {
  'Preferences': {
    'AllowUnreadChatroomIndicator': {
      '_enabled': AllowUnreadBool
    },
    'CloseParticipants': {
      '_enabled': CloseParticipantsBool
    },
    'CloseSidebar': {
      '_enabled': CloseSidebarBool
    },
    'ConversationDefaultColors': {
      '_theme': DefaultColorThemeStr,
      '_backgroundColor': DefaultBgColor,
      '_textColor': DefaultTextColor
    },
    'ConversationPreviewLines': ConvPrevInt,
    'EnableInternationalKeyboard': {
      '_enabled': EnableIntnlKbBool
    },
    'FontSize': FontSizeStr,
    'FontStyle': FontStyleStr,
    'Groups': {
      'Group': [
        {
          '_id': GroupId,
          '_name': GroupName,
          '_collapsed': GroupCollapsedBool
        }
      ]
    },
    'HideOfflineContacts': {
      '_enabled': HideOfflineContactsBool
    },
    'HighlightWords': 'HighlightWordsParser',
    'MessageTheme': {
      '_showCompany': ShowCompanyBool,
      '__text': MessageThemeStr
    },
    'ParticipantsWidth': ParticipantsWInt,
    'ParticipantViewSort': ParticipantViewSortStr,
    'StoredIdleTimeInMinutes': IdleTimeInt,
    'UISizes': {
      'ActivityMonitorWidth': ActivityMonitorWInt,
      'ChatConvoX': ChatConvoXInt,
      'MainContentContainerWidth': ContainerWInt,
      'MainContentRight': MainContentRtInt,
      'MainContentWidth': MainContentWInt,
      'ParticipantsWidth': UIParticipantsWInt,
      'SidebarWidth': SidebarWInt,
      'WindowWidth': WindowWInt
    },
    'YahooAutoLogin': {
      '_enabled': YahooEnabledBool
    },
    'YahooUserName': YahooUserStr
  }
};

alertsSchema = {
  'Preferences': {
    'PersonalAlerts': 'PersonalAlertsParser',
    'GlobalAlerts': 'GlobalAlertsParser'
  }
};

conversationsSchema = {
  'Preferences': {
    'ActiveConversations': {
      'Conversation': [
        {
          '_id': ActiveConversationId,
          '_name': ActiveConversationName,
          '_type': ActiveConversationType,
          '_contactIds': ContactIds
        }
      ]
    }
  }
};

blastsSchema = {
  'Preferences': {
    'AggregateConversations': {
      'AggregateConversation': [
        {
          '_id': 'ActiveConversationId',
          '_name': 'ActiveConversationName',
          '_type': 'ActiveConversationType',
          'RecipientId': 'ContactIds'
        }
      ]
    }
  }
};

hardTrim = function(data) {
  var alerts, convs, groups, ref, ref1, ref2, ref3, ref4, ref5;
  if (_.isArray((groups = data != null ? (ref = data.Preferences) != null ? (ref1 = ref.Groups) != null ? ref1.Group : void 0 : void 0 : void 0))) {
    data.Preferences.Groups.Group = validLimit(64, {
      location: 'Groups'
    })(groups);
  }
  if (_.isArray((convs = data != null ? (ref2 = data.Preferences) != null ? (ref3 = ref2.ActiveConversations) != null ? ref3.Conversation : void 0 : void 0 : void 0))) {
    data.Preferences.ActiveConversations.Conversation = validLimit(50, {
      location: 'ActiveConversations'
    })(convs);
  }
  if (_.isArray((alerts = data != null ? (ref4 = data.Preferences) != null ? (ref5 = ref4.PersonalAlerts) != null ? ref5.Alert : void 0 : void 0 : void 0))) {
    data.Preferences.PersonalAlerts.Alert = validLimit(700, {
      location: 'PersonalAlerts'
    })(alerts);
  }
  return data;
};

toXML = x2js.json2xml.bind(x2js);

toJSON = x2js.xml_str2json.bind(x2js);

exports.toNitro = function() {
  var convertAlerts, convertBlasts, convertConvs, convertEM, convertGlobal, identity, onlyBlasts, post, schema, transforms;
  schema = arguments[0], transforms = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  identity = function(x) {
    return x;
  };
  onlyBlasts = function(data) {
    var blasts, convs, ref, ref1;
    convs = _.array(data != null ? (ref = data.Preferences) != null ? (ref1 = ref.AggregateConversations) != null ? ref1.AggregateConversation : void 0 : void 0 : void 0);
    blasts = convs.filter(function(conv) {
      return conv._type === 'blast';
    });
    return {
      'Preferences': {
        'AggregateConversations': {
          'AggregateConversation': blasts
        }
      }
    };
  };
  if (transforms.length) {
    post = voom.f.apply(null, transforms);
  } else {
    post = identity;
  }
  convertGlobal = f(schema, globalSchema, post, hardTrim);
  convertConvs = f(schema, conversationsSchema, post, hardTrim);
  convertEM = f(schema, emSchema, post, hardTrim);
  convertAlerts = f(schema, alertsSchema, post, hardTrim);
  convertBlasts = f(conversationsSchema, blastsSchema, onlyBlasts, post, hardTrim);
  return function(data) {
    var convertedConvs;
    convertedConvs = convertConvs(data);
    return {
      'global': toXML(convertGlobal(data)),
      'conversations': toXML(convertedConvs),
      'em': toXML(convertEM(data)),
      'alerts': toXML(convertAlerts(data)),
      'blasts': toXML(convertBlasts(convertedConvs))
    };
  };
};

exports.fromNitro = function() {
  var convertAlerts, convertConvs, convertEM, convertGlobal, identity, pre, ref, ref1, ref2, ref3, schemas, transforms;
  schemas = arguments[0], transforms = 2 <= arguments.length ? slice.call(arguments, 1) : [];
  identity = function(x) {
    return x;
  };
  if (transforms.length) {
    pre = voom.f.apply(null, transforms);
  } else {
    pre = identity;
  }
  convertGlobal = f(toJSON, pre, globalSchema, (ref = schemas.global) != null ? ref : schemas);
  convertConvs = f(toJSON, pre, conversationsSchema, (ref1 = schemas.conversations) != null ? ref1 : schemas);
  convertEM = f(toJSON, pre, emSchema, (ref2 = schemas.em) != null ? ref2 : schemas);
  convertAlerts = f(toJSON, pre, alertsSchema, (ref3 = schemas.alerts) != null ? ref3 : schemas);
  return function(data) {
    var alerts, blasts, conversations, em, global;
    if (data == null) {
      data = {};
    }
    global = data.global ? convertGlobal(data.global) : '';
    conversations = data.conversations ? convertConvs(data.conversations) : '';
    em = data.em ? convertEM(data.em) : '';
    alerts = data.alerts ? convertAlerts(data.alerts) : '';
    blasts = '';
    return {
      'global': global,
      'conversations': conversations,
      'em': em,
      'alerts': alerts,
      'blasts': blasts
    };
  };
};

exports.toXML = toXML;

exports.toJSON = toJSON;

exports.f = voom.f;


},{"underscore":85,"voom":86,"xml-json-parser":90}],"components/blocklist":[function(require,module,exports){
var Blocklist, NitroPromise, Q, Utils, _, adapters, stropheBlocklist;

_ = require('underscore');

_.mixin(require('util/retryer'));

Utils = require('util/utils');

Q = require('q');

NitroPromise = require('util/promise');

stropheBlocklist = require('strophe/strophe_blocklist');

adapters = require('adapters/adapters');

module.exports = Blocklist = (function() {
  var PrivateBlocklist, instance;

  function Blocklist() {}

  Blocklist.NAME = 'component.blocklist';

  instance = null;

  Blocklist.get = function(options) {
    var createInstance;
    if (options == null) {
      options = {};
    }
    createInstance = function() {
      return new PrivateBlocklist(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  Blocklist.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  PrivateBlocklist = (function() {
    var sendBlocklistIQ, sendIQ;

    PrivateBlocklist.prototype.helper = null;

    sendIQ = null;

    function PrivateBlocklist(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        helper: stropheBlocklist
      }), this.helper = ref.helper, sendIQ = ref.sendIQ;
    }

    PrivateBlocklist.prototype.getBlocklist = function() {
      var stanza;
      stanza = this.helper.getBlocklistStanza();
      return sendBlocklistIQ(stanza);
    };

    PrivateBlocklist.prototype.block = function(jids) {
      var stanza;
      if (jids == null) {
        jids = [];
      }
      jids = Utils.array(jids);
      stanza = this.helper.getBlockStanza(jids);
      return sendBlocklistIQ(stanza);
    };

    PrivateBlocklist.prototype.unblock = function(jids) {
      var stanza;
      if (jids == null) {
        jids = [];
      }
      jids = Utils.array(jids);
      stanza = this.helper.getUnblockStanza(jids);
      return sendBlocklistIQ(stanza);
    };

    sendBlocklistIQ = function(stanza, options) {
      if (options == null) {
        options = {};
      }
      return NitroPromise(function(resolve, reject) {
        return sendIQ({
          element: stanza,
          resolve: resolve,
          reject: reject
        });
      });
    };

    return PrivateBlocklist;

  })();

  return Blocklist;

})();


},{"adapters/adapters":"adapters/adapters","q":47,"strophe/strophe_blocklist":"strophe/strophe_blocklist","underscore":85,"util/promise":"util/promise","util/retryer":"util/retryer","util/utils":"util/utils"}],"components/gateway":[function(require,module,exports){
var Gateway, GatewayError, GatewayState, NitroPromise, PresenceType, Q, XMPPPresence, XMPPUtils, _;

_ = require('underscore');

Q = require('q');

PresenceType = require('enum/presence_type');

XMPPPresence = require('enum/xmpp_presence');

GatewayState = require('enum/gateway_state');

GatewayError = require('enum/gateway_error');

XMPPUtils = require('util/xmpp_utils');

NitroPromise = require('util/promise');

module.exports = Gateway = (function() {
  var attemptRegistration, attemptUnregistration, getPendingMessage, limitedRegistrationSendIQ, send, sendIQ;

  Gateway.prototype.jid = null;

  Gateway.prototype.helper = null;

  Gateway.prototype._registerDfd = null;

  Gateway.prototype._unregisterDfd = null;

  send = null;

  sendIQ = null;

  limitedRegistrationSendIQ = null;

  function Gateway(options) {
    this.helper = options.helper, send = options.send, sendIQ = options.sendIQ;
    limitedRegistrationSendIQ = _.limit(sendIQ, {
      max: 5,
      time: 60 * 1000,
      context: this
    });
  }

  Gateway.prototype.register = function(options) {
    var pendingMsg, promise;
    if (options == null) {
      options = {};
    }
    if (this._registerDfd) {
      promise = this._registerDfd.promise;
      if (promise.isPending()) {
        pendingMsg = getPendingMessage(this.status);
        this._registerDfd.notify(status, pendingMsg);
        return promise;
      }
    }
    return attemptRegistration.call(this, options);
  };

  Gateway.prototype.unregister = function(reason) {
    var pendingMsg, promise;
    if (this._unregisterDfd) {
      promise = this._unregisterDfd.promise;
      if (promise.isPending()) {
        pendingMsg = getPendingMessage(this.status);
        this._unregisterDfd.notify(status, pendingMsg);
        return promise;
      }
    }
    return attemptUnregistration.call(this, reason);
  };

  Gateway.prototype.setPresence = function(options) {
    var jid, presence, ref, type;
    if (options == null) {
      options = {};
    }
    ref = _.defaults(options, {
      jid: this.jid,
      type: XMPPUtils.xmppPresenceToType(presence)
    }), jid = ref.jid, type = ref.type, presence = ref.presence;
    return NitroPromise((function(_this) {
      return function(resolve, reject, progress) {
        var show, stanza;
        show = XMPPUtils.xmppPresenceToShow(presence);
        stanza = _this.helper.getSubscriptionStanza(jid, type, show);
        return send({
          element: stanza,
          resolve: resolve
        });
      };
    })(this));
  };

  Gateway.prototype.toggleConnection = function(nitroConnected, selfJID) {
    var bareJID, domain;
    this.nitroConnected = nitroConnected;
    if (selfJID == null) {
      selfJID = '';
    }
    if (this.nitroConnected) {
      bareJID = Strophe.getBareJidFromJid(selfJID);
      domain = XMPPUtils.getXMPPDomain(bareJID);
      this.jid = "yahoo." + domain;
    } else {
      this.status = GatewayState.UNREGISTERED;
      this.jid = null;
    }
    return this;
  };

  Gateway.prototype.addContact = function(contact) {
    var groups, jid, name, promise, ref;
    if (typeof contact === 'string') {
      contact = {
        jid: contact
      };
    }
    ref = _.defaults(contact, {
      jid: '',
      name: "",
      groups: []
    }), jid = ref.jid, name = ref.name, groups = ref.groups;
    return promise = NitroPromise((function(_this) {
      return function(resolve, reject) {
        if (!jid) {
          return reject("Attempting to add an invalid contact to the Roster");
        }
        return send({
          element: _this.helper.getAddContactStanza(jid),
          resolve: resolve,
          reject: reject
        });
      };
    })(this));
  };

  Gateway.prototype.acceptInvite = function(contact) {
    var groups, jid, name, promise, ref;
    if (typeof contact === 'string') {
      contact = {
        jid: contact
      };
    }
    ref = _.defaults(contact, {
      jid: '',
      name: "",
      groups: []
    }), jid = ref.jid, name = ref.name, groups = ref.groups;
    return promise = NitroPromise((function(_this) {
      return function(resolve, reject) {
        if (!jid) {
          return reject("Attempting to add an invalid contact to the Roster");
        }
        return send({
          element: _this.helper.getAllowContactStanza(jid),
          resolve: resolve,
          reject: reject
        });
      };
    })(this));
  };

  Gateway.prototype.removeContact = function(jid) {
    return NitroPromise((function(_this) {
      return function(resolve, reject) {
        return send({
          element: _this.helper.getRemoveContactStanza(jid),
          resolve: resolve,
          reject: reject
        });
      };
    })(this));
  };

  attemptRegistration = function(options) {
    var autoLogin, element, limitError, password, username;
    if (options == null) {
      options = {};
    }
    this._registerDfd = Q.defer();
    username = options.username, password = options.password, autoLogin = options.autoLogin;
    if (!(username && (password || autoLogin))) {
      this._registerDfd.reject(GatewayError.INVALID_CREDENTIALS);
      return this._registerDfd.promise;
    }
    if (!this.nitroConnected) {
      this._registerDfd.reject(GatewayError.NO_NITRO_CONNECTION);
      return this._registerDfd.promise;
    }
    element = this.helper.getRegisterStanza(this.jid, username, password, autoLogin);
    limitError = limitedRegistrationSendIQ({
      element: element,
      resolve: this._registerDfd.resolve,
      reject: this._registerDfd.reject
    });
    if (limitError instanceof Error) {
      console.error("[Gateway]", limitError.message);
      this._registerDfd.reject({
        json: {
          error: limitError.message
        }
      });
    }
    return this._registerDfd.promise;
  };

  attemptUnregistration = function(reason) {
    var stanza;
    this._registerDfd = Q.defer();
    stanza = this.helper.getUnregisterStanza(this.jid);
    sendIQ({
      element: stanza,
      resolve: this._registerDfd.resolve,
      reject: this._registerDfd.reject
    });
    return this._registerDfd.promise;
  };

  getPendingMessage = function(status) {
    switch (status) {
      case GatewayState.REGISTERING:
        return GatewayError.ALREADY_REGISTERING;
      case Connection.SUBSCRIBING:
        return GatewayError.ALREADY_SUBSCRIBING;
      case GatewayState.UNREGISTERING:
        return GatewayError.ALREADY_UNREGISTERING;
      case Connection.UNSUBSCRIBING:
        return GatewayError.ALREADY_UNSUBSCRIBING;
      default:
        return "";
    }
  };

  return Gateway;

})();


},{"enum/gateway_error":"enum/gateway_error","enum/gateway_state":"enum/gateway_state","enum/presence_type":"enum/presence_type","enum/xmpp_presence":"enum/xmpp_presence","q":47,"underscore":85,"util/promise":"util/promise","util/xmpp_utils":"util/xmpp_utils"}],"components/messaging":[function(require,module,exports){
var Matchers, Messaging, NitroPromise, Q, Utils, _, stropheMessaging;

Q = require('Q');

NitroPromise = require('util/promise');

_ = require('underscore');

Utils = require('util/utils');

Matchers = require('util/matchers');

stropheMessaging = require('strophe/strophe_messaging');

Messaging = (function() {
  var PrivateMessaging, instance;

  function Messaging() {}

  Messaging.NAME = 'component.messaging';

  instance = null;

  Messaging.get = function(options) {
    var createInstance;
    createInstance = function() {
      return new PrivateMessaging(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  Messaging.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  PrivateMessaging = (function() {
    var send, sendIQ;

    send = null;

    sendIQ = null;

    function PrivateMessaging(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        helper: stropheMessaging
      }), this.helper = ref.helper, send = ref.send, sendIQ = ref.sendIQ;
    }

    PrivateMessaging.prototype.send = function(message) {
      var body, id, jid, type;
      if (message == null) {
        message = {};
      }
      jid = message.jid, body = message.body, type = message.type, id = message.id;
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          if (!(jid && body)) {
            return reject("Invalid message");
          }
          return send({
            element: _this.helper.getSendStanza(jid, body, type, id),
            resolve: resolve
          });
        };
      })(this));
    };

    PrivateMessaging.prototype.sendTyping = function(jid) {
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          if (!jid) {
            return reject("Invalid message");
          }
          send({
            element: _this.helper.getTypingStanza(jid)
          });
          return {
            resolve: resolve
          };
        };
      })(this));
    };

    PrivateMessaging.prototype.getHistory = function(options) {
      var before, jid, max;
      if (options == null) {
        options = {};
      }
      jid = options.jid, before = options.before, max = options.max;
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          var getHistoryStanza;
          if (!jid) {
            return reject("Invalid conversation jid passed to history query");
          }
          getHistoryStanza = Matchers.isManagedGroupchat(jid) ? _this.helper.getManagedHistoryStanza : Matchers.isGroupchat(jid) ? _this.helper.getGroupchatHistoryStanza : _this.helper.getChatHistoryStanza;
          return sendIQ({
            element: getHistoryStanza(jid, before, max),
            resolve: resolve,
            reject: reject
          });
        };
      })(this));
    };

    return PrivateMessaging;

  })();

  return Messaging;

})();

module.exports = Messaging;


},{"Q":1,"strophe/strophe_messaging":"strophe/strophe_messaging","underscore":85,"util/matchers":"util/matchers","util/promise":"util/promise","util/utils":"util/utils"}],"components/muc":[function(require,module,exports){
var Config, MUC, MUCField, MUCRole, Matchers, NitroPromise, Q, Sizzle, Utils, _, stropheMUC;

Q = require('Q');

NitroPromise = require('util/promise');

_ = require('underscore');

Sizzle = require('sizzle');

Config = require('config');

stropheMUC = require('strophe/strophe_muc');

MUCField = require('enum/muc_field');

MUCRole = require('enum/muc_role');

Utils = require('util/utils');

Matchers = require('util/matchers');

module.exports = MUC = (function() {
  var PrivateMUC, instance;

  function MUC() {}

  MUC.NAME = 'component.muc';

  MUC.INVALID_GROUPCHAT_JID = "Rejected due to an invalid groupchat jid";

  instance = null;

  MUC.get = function(options) {
    var createInstance;
    createInstance = function() {
      return new PrivateMUC(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  MUC.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  PrivateMUC = (function() {
    var eventManager, getInvalidJIDString, getJID, getJIDRejectedPromise, isValidMUCJID, regexMUCDomain, regexMUCLocal, regexUserDomain, regexUserLocal, send, sendIQ, sendMUCRequest;

    send = null;

    sendIQ = null;

    getJID = null;

    eventManager = null;

    PrivateMUC.prototype.helper = null;

    regexUserLocal = /^([\w\\'"]\.?)+/i;

    regexUserDomain = /^(collab\.(reutest|thomsonreuters|icp2\.mpp\.reutest)\.com)$/i;

    regexMUCLocal = /^([\w\\'"~\$`!\+-={}\[\]]\.?)+/i;

    regexMUCDomain = /^(conference|legacychat)\.((reuasmb|reuters)\.net|array12\.msgtst\.reuters\.com)$/i;

    isValidMUCJID = function(jid) {
      var parts;
      if (!_.isString(jid)) {
        return false;
      }
      if ((parts = jid.split('@')).length !== 2) {
        return false;
      }
      return regexMUCLocal.test(parts[0]) && regexMUCDomain.test(parts[1]);
    };

    function PrivateMUC(options) {
      var ref;
      ref = _.defaults(options, {
        helper: stropheMUC
      }), this.helper = ref.helper, send = ref.send, sendIQ = ref.sendIQ, getJID = ref.getJID, eventManager = ref.eventManager;
    }

    PrivateMUC.prototype.selfJIDAsMUCResource = function() {
      var jid;
      if (jid = Strophe.getBareJidFromJid(getJID())) {
        return jid.replace('@', '__');
      } else {
        return '';
      }
    };

    PrivateMUC.prototype.getBareSelfJID = function() {
      return Strophe.getBareJidFromJid(getJID());
    };

    PrivateMUC.prototype.create = function(options) {
      var acceptDefaultConfiguration, jid, name;
      if (options == null) {
        options = {};
      }
      jid = options.jid, name = options.name;
      acceptDefaultConfiguration = _.bind(this.acceptDefaultConfiguration, this);
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          if (!isValidMUCJID(jid)) {
            return reject(getInvalidJIDString(jid));
          }
          return _this.join(jid).then(function(stanza) {
            return acceptDefaultConfiguration({
              jid: jid,
              name: name
            }).then(resolve);
          }).fail(reject);
        };
      })(this));
    };

    PrivateMUC.prototype.destroy = function(jid) {
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      return sendMUCRequest(sendIQ, this.helper.getDestroyGroupchatStanza(jid));
    };

    PrivateMUC.prototype.acceptDefaultConfiguration = function(options) {
      var jid, name;
      jid = options.jid, name = options.name;
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      return sendMUCRequest(sendIQ, this.helper.getGroupchatConfigForm(jid, MUCField.ROOM_NAME, name));
    };

    PrivateMUC.prototype.join = function(jid) {
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      return sendMUCRequest(send, this.helper.getJoinStanza(jid, this.selfJIDAsMUCResource()));
    };

    PrivateMUC.prototype.leave = function(jid) {
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      return sendMUCRequest(send, this.helper.getLeaveStanza(jid));
    };

    PrivateMUC.prototype.roomDisco = function(jid) {
      var stanzaHelper;
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      stanzaHelper = Matchers.isManagedGroupchat(jid) ? this.helper.getManagedRoomDiscoStanza : this.helper.getRoomDiscoStanza;
      return sendMUCRequest(sendIQ, stanzaHelper(jid));
    };

    PrivateMUC.prototype.requestMemberList = function(jid, affiliations) {
      if (affiliations == null) {
        affiliations = MUCRole.OWNER;
      }
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      affiliations = Utils.array(affiliations);
      return sendMUCRequest(sendIQ, this.helper.getMemberListStanza(jid, affiliations));
    };

    PrivateMUC.prototype.sendMediatedInvite = function(jid, invitees, type) {
      var stanza;
      if (invitees == null) {
        invitees = [];
      }
      if (type == null) {
        type = '';
      }
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      stanza = this.helper.getMediatedInviteStanza(jid, this.getBareSelfJID(), invitees, type);
      return sendMUCRequest(send, stanza);
    };

    PrivateMUC.prototype.declineMediatedInvite = function(jid, inviter, reason) {
      var stanza;
      if (reason == null) {
        reason = '';
      }
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      stanza = this.helper.getDeclineMediatedInviteStanza(jid, inviter, reason);
      return sendMUCRequest(send, stanza);
    };

    PrivateMUC.prototype.search = function(match, arg) {
      var jid, max, ref;
      max = (arg != null ? arg : {}).max;
      if (!_.isString(match)) {
        return Q.reject(new Error("invalid search term"));
      }
      jid = "legacychat." + (Config.get('xmpp.domain'));
      if (!((1 < (ref = parseInt(max)) && ref <= 50))) {
        max = null;
      }
      return sendMUCRequest(sendIQ, this.helper.getSearchStanza(jid, match, max));
    };

    PrivateMUC.prototype.kick = function(jid, users, reason) {
      if (users == null) {
        users = [];
      }
      if (reason == null) {
        reason = '';
      }
      if (!isValidMUCJID(jid)) {
        return getJIDRejectedPromise(jid);
      }
      return sendMUCRequest(sendIQ, this.helper.getKickStanza(jid, users, reason));
    };

    sendMUCRequest = function(fn, stanza) {
      if (stanza == null) {
        stanza = null;
      }
      return NitroPromise(function(resolve, reject) {
        var data;
        if (!stanza) {
          return reject("A valid stanza was not formed for this request");
        }
        if (!_.isFunction(fn)) {
          return reject("No function was provided");
        }
        data = {
          element: stanza,
          resolve: resolve,
          reject: reject
        };
        return fn(data);
      });
    };

    getJIDRejectedPromise = function(jid) {
      return Q.reject(new Error(getInvalidJIDString(jid)));
    };

    getInvalidJIDString = function(jid) {
      return MUC.INVALID_GROUPCHAT_JID + ": " + jid;
    };

    return PrivateMUC;

  })();

  return MUC;

})();


},{"Q":1,"config":"config","enum/muc_field":"enum/muc_field","enum/muc_role":"enum/muc_role","sizzle":84,"strophe/strophe_muc":"strophe/strophe_muc","underscore":85,"util/matchers":"util/matchers","util/promise":"util/promise","util/utils":"util/utils"}],"components/roster":[function(require,module,exports){
var NitroPromise, PresenceType, Q, Roster, Utils, _, stropheRoster;

Q = require('q');

NitroPromise = require('util/promise');

_ = require('underscore');

Utils = require('util/utils');

PresenceType = require('enum/presence_type');

stropheRoster = require('strophe/strophe_roster');

PresenceType = require('enum/presence_type');

module.exports = Roster = (function() {
  var PrivateRoster, instance;

  function Roster() {}

  Roster.NAME = 'component.roster';

  instance = null;

  Roster.get = function(options) {
    var createInstance;
    if (options == null) {
      options = {};
    }
    createInstance = function() {
      return new PrivateRoster(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  Roster.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  Roster.hasEmailDomain = function(jid) {
    return /@email\./i.test(jid);
  };

  PrivateRoster = (function() {
    var send, sendIQ, sendPresenceType;

    PrivateRoster.prototype.helper = null;

    send = null;

    sendIQ = null;

    function PrivateRoster(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        helper: stropheRoster
      }), this.helper = ref.helper, send = ref.send, sendIQ = ref.sendIQ;
    }

    PrivateRoster.prototype.getRoster = function() {
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          return sendIQ({
            element: _this.helper.getRosterStanza(),
            resolve: resolve,
            reject: reject
          });
        };
      })(this));
    };

    PrivateRoster.prototype.addContact = function(contact) {
      var groups, jid, name, promise, ref;
      if (contact == null) {
        contact = {};
      }
      if (typeof contact === 'string') {
        contact = {
          jid: contact
        };
      }
      ref = _.defaults(contact, {
        jid: '',
        name: "",
        groups: []
      }), jid = ref.jid, name = ref.name, groups = ref.groups;
      promise = NitroPromise((function(_this) {
        return function(resolve, reject) {
          var error;
          if (!jid) {
            error = new Error("Attempting to add an invalid contact to the Roster");
            return reject(error);
          }
          return sendIQ({
            element: _this.helper.getAddStanza(jid, name, groups),
            resolve: resolve,
            reject: reject
          });
        };
      })(this));
      promise.fail(function(error) {
        var data, errorElem, ref1;
        data = error.data;
        if (errorElem = data != null ? (ref1 = data.json) != null ? ref1.error : void 0 : void 0) {
          error.message = errorElem.text.text;
          error.code = parseInt(errorElem.attributes.code, 10);
        }
        throw error;
      });
      return promise;
    };

    PrivateRoster.prototype.removeContact = function(contact) {
      var jid;
      if (contact == null) {
        contact = {};
      }
      if (typeof contact === 'string') {
        contact = {
          jid: contact
        };
      }
      jid = _.defaults(contact, {
        jid: ''
      }).jid;
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          if (!jid) {
            return reject("Attempting to remove an invalid contact from the Roster");
          }
          return sendIQ({
            element: _this.helper.getRemoveStanza(jid),
            resolve: resolve,
            reject: reject
          });
        };
      })(this));
    };

    PrivateRoster.prototype.updateContact = function(contact) {
      return this.addContact(contact);
    };

    PrivateRoster.prototype.invite = function(contact) {
      if (contact == null) {
        contact = {};
      }
      return this.subscribe(contact);
    };

    PrivateRoster.prototype.subscribe = function(contact) {
      return sendPresenceType.call(this, contact, PresenceType.SUBSCRIBE);
    };

    PrivateRoster.prototype.subscribed = function(contact) {
      return sendPresenceType.call(this, contact, PresenceType.SUBSCRIBED);
    };

    PrivateRoster.prototype.unsubscribe = function(contact) {
      if (contact == null) {
        contact = {};
      }
      return sendPresenceType.call(this, contact, PresenceType.UNSUBSCRIBE);
    };

    sendPresenceType = function(contact, presenceType) {
      var jid;
      if (contact == null) {
        contact = '';
      }
      if (presenceType == null) {
        presenceType = '';
      }
      if (typeof contact === 'string') {
        contact = {
          jid: contact
        };
      }
      jid = _.defaults(contact, {
        jid: ''
      }).jid;
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          var stanza;
          if (!jid || !_.isString(jid)) {
            return reject("Attempting to send " + presenceType + " to an invalid contact");
          }
          if (!presenceType || !_.isString(presenceType)) {
            return reject("Presence type is not specified");
          }
          stanza = _this.helper.getPresenceSubscriptionStanza(jid, presenceType);
          return send({
            resolve: resolve,
            element: stanza
          });
        };
      })(this));
    };

    return PrivateRoster;

  })();

  return Roster;

})();


},{"enum/presence_type":"enum/presence_type","q":47,"strophe/strophe_roster":"strophe/strophe_roster","underscore":85,"util/promise":"util/promise","util/utils":"util/utils"}],"components/storage":[function(require,module,exports){
var NitroPromise, Q, Storage, Utils, _, converter, stropheStorage,
  bind = function(fn, me){ return function(){ return fn.apply(me, arguments); }; };

_ = require('underscore');

_.mixin(require('util/retryer'));

Utils = require('util/utils');

Q = require('q');

NitroPromise = require('util/promise');

stropheStorage = require('strophe/strophe_storage');

converter = require('adapters/preferences');

module.exports = Storage = (function() {
  var PrivateStorage, instance;

  function Storage() {}

  Storage.NAME = 'component.storage';

  instance = null;

  Storage.get = function(options) {
    var createInstance;
    if (options == null) {
      options = {};
    }
    createInstance = function() {
      return new PrivateStorage(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  Storage.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  PrivateStorage = (function() {
    var sendIQ, sendMockRequest, sendRequest, sendStorageIQ;

    PrivateStorage.MAX_ATTEMPTS = 3;

    PrivateStorage.prototype.helper = null;

    sendIQ = null;

    function PrivateStorage(options) {
      var ref;
      if (options == null) {
        options = {};
      }
      this.getAllPreferences = bind(this.getAllPreferences, this);
      ref = _.defaults(options, {
        helper: stropheStorage
      }), this.helper = ref.helper, sendIQ = ref.sendIQ;
    }

    PrivateStorage.prototype.getPreferences = function() {
      return sendRequest(this.helper.getPreferencesStanza());
    };

    PrivateStorage.prototype.setPreferences = function(preferences) {
      if (preferences == null) {
        preferences = {};
      }
      return sendRequest(this.helper.setPreferencesStanza(preferences));
    };

    PrivateStorage.prototype.setAllPreferences = function(preferences) {
      var ref, ref1, ref2, ref3, ref4;
      return Q.all([this.setGlobalPreferences((preferences != null ? (ref = preferences.global) != null ? ref.firstChild : void 0 : void 0) || ''), this.setEMPreferences((preferences != null ? (ref1 = preferences.em) != null ? ref1.firstChild : void 0 : void 0) || ''), this.setBlastPreferences((preferences != null ? (ref2 = preferences.blasts) != null ? ref2.firstChild : void 0 : void 0) || ''), this.setConversationPreferences((preferences != null ? (ref3 = preferences.conversations) != null ? ref3.firstChild : void 0 : void 0) || ''), this.setAlertPreferences((preferences != null ? (ref4 = preferences.alerts) != null ? ref4.firstChild : void 0 : void 0) || '')]);
    };

    PrivateStorage.prototype.setGlobalPreferences = function(preferences) {
      var stanza;
      if (preferences == null) {
        preferences = {};
      }
      if (!preferences) {
        return;
      }
      stanza = this.helper.setGlobalPreferencesStanza(preferences);
      if (stanza) {
        return sendRequest(stanza);
      }
    };

    PrivateStorage.prototype.setEMPreferences = function(preferences) {
      var stanza;
      if (preferences == null) {
        preferences = {};
      }
      if (!preferences) {
        return;
      }
      stanza = this.helper.setEMPreferencesStanza(preferences);
      if (stanza) {
        return sendRequest(stanza);
      }
    };

    PrivateStorage.prototype.setBlastPreferences = function(preferences) {
      var stanza;
      if (preferences == null) {
        preferences = {};
      }
      if (!preferences) {
        return;
      }
      stanza = this.helper.setBlastPreferencesStanza(preferences);
      if (stanza) {
        return sendRequest(stanza);
      }
    };

    PrivateStorage.prototype.setConversationPreferences = function(preferences) {
      var stanza;
      if (preferences == null) {
        preferences = {};
      }
      if (!preferences) {
        return;
      }
      stanza = this.helper.setConversationPreferencesStanza(preferences);
      if (stanza) {
        return sendRequest(stanza);
      }
    };

    PrivateStorage.prototype.setAlertPreferences = function(preferences) {
      var stanza;
      if (preferences == null) {
        preferences = {};
      }
      if (!preferences) {
        return;
      }
      stanza = this.helper.setAlertPreferencesStanza(preferences);
      if (stanza) {
        return sendRequest(stanza);
      }
    };

    PrivateStorage.prototype.getAllPreferences = function() {
      return Q.all([this.getGlobalPreferences(), this.getEMPreferences(), this.getBlastPreferences(), this.getConversationPreferences(), this.getAlertPreferences()]);
    };

    PrivateStorage.prototype.getGlobalPreferences = function() {
      return sendRequest(this.helper.getGlobalPreferencesStanza());
    };

    PrivateStorage.prototype.getEMPreferences = function() {
      return sendRequest(this.helper.getEMPreferencesStanza());
    };

    PrivateStorage.prototype.getBlastPreferences = function() {
      return sendRequest(this.helper.getBlastsPreferencesStanza());
    };

    PrivateStorage.prototype.getConversationPreferences = function() {
      return sendRequest(this.helper.getConversationPreferencesStanza());
    };

    PrivateStorage.prototype.getAlertPreferences = function() {
      return sendRequest(this.helper.getAlertsPreferencesStanza());
    };

    PrivateStorage.prototype.clearPreferences = function() {
      return sendRequest(this.helper.clearPreferencesStanza());
    };

    PrivateStorage.prototype.clearAllPreferences = function() {
      return Q.all([sendRequest(this.helper.clearPreferencesStanza()), sendRequest(this.helper.clearGlobalPreferencesStanza()), sendRequest(this.helper.clearEMPreferencesStanza()), sendRequest(this.helper.clearBlastsPreferencesStanza()), sendRequest(this.helper.clearConversationsPreferencesStanza()), sendRequest(this.helper.clearAlertsPreferencesStanza())]);
    };

    PrivateStorage.prototype.toNitro = converter.toNitro;

    PrivateStorage.prototype.fromNitro = converter.fromNitro;

    PrivateStorage.prototype.getBookmarks = function() {
      return sendRequest(this.helper.getBookmarksStanza());
    };

    PrivateStorage.prototype.setBookmarks = function(chatrooms) {
      var stanza;
      stanza = this.helper.setBookmarksStanza(chatrooms);
      return sendRequest(stanza);
    };

    sendRequest = function() {
      var retryRequest;
      retryRequest = _.retry(sendStorageIQ, {
        max: PrivateStorage.MAX_ATTEMPTS
      });
      return retryRequest.apply(null, arguments);
    };

    sendMockRequest = function(stanza) {
      return console.log(stanza.toString());
    };

    sendStorageIQ = function(stanza, options) {
      var max;
      if (options == null) {
        options = {};
      }
      max = options.max;
      console.log("[Storage] sendPreferencesIQ via _.retry, attempt " + options.attempt + " of " + PrivateStorage.MAX_ATTEMPTS);
      return NitroPromise(function(resolve, reject) {
        return sendIQ({
          element: stanza,
          resolve: resolve,
          reject: reject
        });
      });
    };

    return PrivateStorage;

  })();

  return Storage;

})();


},{"adapters/preferences":"adapters/preferences","q":47,"strophe/strophe_storage":"strophe/strophe_storage","underscore":85,"util/promise":"util/promise","util/retryer":"util/retryer","util/utils":"util/utils"}],"components/yahoo":[function(require,module,exports){


},{}],"config":[function(require,module,exports){
var Config, _;

_ = require('underscore');

Config = (function() {
  var _cached, _custom, _defaults, _params;

  function Config() {}

  Config.ENV_PRODUCTION = 'prod';

  Config.ENV_BETA = 'beta';

  Config.ENV_ALPHA = 'alpha';

  Config.ENV_DEV = 'dev';

  Config.ENV_FILE = 'file';

  _params = {};

  (function() {
    var params;
    if ((params = window.location.search).length) {
      params = params.substr(1);
      return _.each(params.split('&'), function(param) {
        param = param.split('=');
        return _params[param[0]] = param[1];
      });
    }
  })();

  _defaults = {
    name: 'Nitro XMPP Client Connection',
    nitroPath: 'nhttp-bind'
  };

  _custom = {};

  _cached = {};

  Config.prototype.get = function(key) {
    var value, valueType;
    value = _params[key] || _cached[key] || _custom[key] || _defaults[key];
    if ((valueType = typeof value) === 'function') {
      return _cached[key] = value();
    } else if (valueType !== 'undefined') {
      return _cached[key] = value;
    } else {
      return null;
    }
  };

  Config.prototype.set = function(key, value) {
    return _custom[key] = value;
  };

  Config.prototype.read = function() {
    _.each(_defaults, (function(_this) {
      return function(value, key) {
        return _this.get(key);
      };
    })(this));
    _.each(_custom, (function(_this) {
      return function(value, key) {
        return _this.get(key);
      };
    })(this));
    return this;
  };

  Config.prototype.reset = function(key) {
    if (key) {
      return delete _cached[key];
    } else {
      return _cached = {};
    }
  };

  Config.prototype.all = function() {
    console.log('custom', _custom);
    return console.log('cached', _cached);
  };

  return Config;

})();

module.exports = new Config();


},{"underscore":85}],"connection":[function(require,module,exports){
var Blocklist, Config, Connection, EventHandler, EventManager, Events, Gateway, GatewayName, IOEvent, MUC, Messaging, NitroPromise, Q, RateLimiter, Roster, ShortID, Sizzle, Status, StatusLabels, Storage, Strophe, StropheIO, XMPPPresence, XMPPUtils, _, dataPayload, stropheDisco, strophePresence, stropheYahooGateway;

_ = require('underscore');

Sizzle = require('sizzle');

Q = require('q');

NitroPromise = require('util/promise');

Strophe = require('strophe');

ShortID = require('shortid');

RateLimiter = require('util/rate_limiter');

Config = require('config');

Roster = require('components/roster');

Storage = require('components/storage');

Blocklist = require('components/blocklist');

MUC = require('components/muc');

Messaging = require('components/messaging');

Gateway = require('components/gateway');

GatewayName = require('enum/gateways');

EventManager = require('events/event_manager');

EventHandler = require('events/event_handler');

Events = require('events/events');

IOEvent = require('events/io_event');

Status = require('enum/status');

XMPPPresence = require('enum/xmpp_presence');

StatusLabels = require('enum/status_labels');

strophePresence = require('strophe/strophe_presence');

stropheYahooGateway = require('strophe/strophe_yahoo_gateway');

stropheDisco = require('strophe/strophe_disco');

StropheIO = require('strophe/strophe_io');

dataPayload = require('adapters/data_payload');

XMPPUtils = require('util/xmpp_utils');

module.exports = window.Connection = Connection = (function() {
  var PrivateConnection, instance;

  function Connection() {}

  Connection.version = '0.0.1';

  Connection.TEST_KEY = "Connection.TEST_KEY";

  Connection.FATAL_FAILURE = Status.FATAL_FAILURE;

  Connection.XMPPPresence = XMPPPresence;

  Connection.Events = Events;

  instance = null;

  Connection.get = function(options) {
    var appName, appVersion, createInstance, service;
    if (options == null) {
      options = {};
    }
    appName = options.appName, appVersion = options.appVersion, service = options.service;
    createInstance = function() {
      if (!appName) {
        throw new Error("You must provide an application name.");
      }
      if (!appVersion) {
        throw new Error("You must provide an application version name.");
      }
      return new PrivateConnection(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  Connection.destroy = function() {
    if ((instance != null ? instance.getAppName() : void 0) === this.TEST_KEY) {
      instance = null;
      return true;
    } else {
      return false;
    }
  };

  PrivateConnection = (function() {
    var attemptConnection, attemptDisconnection, checkForError, createComponents, createConnector, doDisco, getConnectDfdMethod, getPendingMessage, normalizeService, onConnectionStatus, registerComponent, rejectWithData, resolveWithData, send, sendIQ, setCredentials, toggleConnection;

    PrivateConnection.prototype.eventManager = null;

    PrivateConnection.prototype._connection = null;

    PrivateConnection.prototype._appName = '';

    PrivateConnection.prototype._appVersion = '';

    PrivateConnection.prototype._service = '';

    PrivateConnection.prototype._password = null;

    PrivateConnection.prototype._connectionDfd = null;

    PrivateConnection.prototype._connectionStatus = Status.DISCONNECTED;

    PrivateConnection.prototype._messaging = null;

    PrivateConnection.prototype._roster = null;

    PrivateConnection.prototype._storage = null;

    PrivateConnection.prototype._blocklist = null;

    PrivateConnection.prototype._muc = null;

    PrivateConnection.prototype._yahoo = null;

    PrivateConnection.prototype._connectToServer = null;

    PrivateConnection.prototype._tempJID = null;

    PrivateConnection.prototype._statuses = [Status.CONNECTING, Status.CONNFAIL, Status.CONNTIMEOUT, Status.AUTHENTICATING, Status.AUTHFAIL, Status.CONNECTED, Status.DISCONNECTED, Status.DISCONNECTING, Status.FATAL_FAILURE];

    PrivateConnection.prototype._components = {};

    PrivateConnection.prototype._connectionToggleSubs = null;

    function PrivateConnection(options) {
      var appName, appVersion, boundAddHandler, boundDeleteHandler, boundSend, boundSendIQ, ref, service;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        service: Config.get('nitroPath')
      }), appName = ref.appName, appVersion = ref.appVersion, service = ref.service;
      this._appName = appName;
      this._appVersion = appVersion;
      this._service = normalizeService(service);
      this._connection = new Strophe.Connection(this._service, {
        customHeaders: {
          'Client-Revision': options.clientRevision
        }
      });
      StropheIO.connectIOListeners({
        connection: this._connection,
        getRawInputListeners: function() {
          return StropheIO.rawInputListeners;
        },
        getRawOutputListeners: function() {
          return StropheIO.rawOutputListeners;
        },
        getXMLInputListeners: function() {
          return StropheIO.xmlInputListeners;
        },
        getXMLOutputListeners: function() {
          return StropheIO.xmlOutputListeners;
        }
      });
      boundSend = _.bind(send, this);
      boundSendIQ = _.bind(sendIQ, this);
      boundAddHandler = _.bind(this._connection.addHandler, this._connection);
      boundDeleteHandler = _.bind(this._connection.deleteHandler, this._connection);
      this.eventManager = EventManager.get({
        addHandler: boundAddHandler,
        deleteHandler: boundDeleteHandler,
        config: Events.getConfig(),
        handlerClass: EventHandler
      });
      this._connectToServer = createConnector({
        func: this._connection.connect,
        context: this._connection
      });
      createComponents.call(this, {
        components: this._components,
        send: boundSend,
        sendIQ: boundSendIQ
      });
      this._connectionToggleSubs = [this.eventManager, this._yahoo];
    }

    normalizeService = function(service) {
      if (_.isString(service)) {
        if (!/^\//.test(service)) {
          service = "/" + service;
        }
        if (!/\/$/.test(service)) {
          service = service + "/";
        }
        return service;
      } else {
        return Config.get('nitroPath');
      }
    };

    createComponents = function(arg) {
      var components, send, sendIQ, yahooOpts;
      components = arg.components, send = arg.send, sendIQ = arg.sendIQ;
      this._roster = registerComponent(components, Roster.NAME, Roster.get({
        send: send,
        sendIQ: sendIQ
      }));
      this._muc = registerComponent(components, MUC.NAME, MUC.get({
        send: send,
        sendIQ: sendIQ,
        status: this.status.bind(this),
        getJID: this.getJID.bind(this),
        eventManager: this.eventManager
      }));
      this._storage = registerComponent(this._components, Storage.NAME, Storage.get({
        sendIQ: sendIQ
      }));
      this._blocklist = registerComponent(components, Blocklist.NAME, Blocklist.get({
        sendIQ: sendIQ
      }));
      this._messaging = registerComponent(components, Messaging.NAME, Messaging.get({
        send: send,
        sendIQ: sendIQ
      }));
      yahooOpts = {
        send: send,
        sendIQ: sendIQ,
        helper: stropheYahooGateway
      };
      return this._yahoo = registerComponent(components, GatewayName.YAHOO, new Gateway(yahooOpts));
    };

    PrivateConnection.prototype.getComponents = function() {
      return this._components;
    };

    PrivateConnection.prototype.getConfigValue = function(key) {
      return Config.get(key);
    };

    PrivateConnection.prototype.getAppName = function() {
      return this._appName;
    };

    PrivateConnection.prototype.getAppVersion = function() {
      return this._appVersion;
    };

    PrivateConnection.prototype.getService = function() {
      return this._service;
    };

    PrivateConnection.prototype.getJID = function() {
      return this._connection.jid;
    };

    PrivateConnection.prototype.getComponent = function(name) {
      var components;
      if (name == null) {
        name = '';
      }
      components = this.getComponents();
      return (components != null ? components[name] : void 0) || (function() {
        throw new Error("Component '" + name + "' does not exist.");
      })();
    };

    PrivateConnection.prototype.addStropheListener = function(options) {
      var inputListeners, ioType, listener, outputListeners, ref, type;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        listener: [],
        type: IOEvent.RAW,
        ioType: ''
      }), listener = ref.listener, type = ref.type, ioType = ref.ioType;
      if (type === IOEvent.XML) {
        inputListeners = StropheIO.xmlInputListeners;
        outputListeners = StropheIO.xmlOutputListeners;
      } else {
        inputListeners = StropheIO.rawInputListeners;
        outputListeners = StropheIO.rawOutputListeners;
      }
      switch (ioType) {
        case IOEvent.INPUT:
          return StropheIO.addIOListener(listener, inputListeners);
        case IOEvent.OUTPUT:
          return StropheIO.addIOListener(listener, outputListeners);
        default:
          StropheIO.addIOListener(listener, inputListeners);
          return StropheIO.addIOListener(listener, outputListeners);
      }
    };

    PrivateConnection.prototype.connect = function(options) {
      var pendingMsg, promise, status;
      if (options == null) {
        options = {};
      }
      status = this.status();
      if (this._connectionDfd) {
        promise = this._connectionDfd.promise;
        if (promise.isPending()) {
          pendingMsg = getPendingMessage(status);
          this._connectionDfd.notify(status, pendingMsg);
          return promise;
        }
      }
      if (status === Status.CONNECTED) {
        return Q(status);
      }
      return attemptConnection.call(this, options);
    };

    PrivateConnection.prototype.disconnect = function(options) {
      var pendingMsg, promise, status;
      if (options == null) {
        options = {};
      }
      status = this.status();
      if (status === Status.DISCONNECTED) {
        return Q(status);
      }
      if (this._disconnectionDfd) {
        promise = this._disconnectionDfd.promise;
        if (promise.isPending()) {
          pendingMsg = getPendingMessage(status);
          this._disconnectionDfd.notify(status, pendingMsg);
          return promise;
        }
      }
      return attemptDisconnection.call(this, options);
    };

    PrivateConnection.prototype.status = function() {
      return this._connectionStatus;
    };

    PrivateConnection.prototype.isConnected = function() {
      return this.status() === Status.CONNECTED;
    };

    PrivateConnection.prototype.setPresence = function(status, options) {
      var initial;
      if (status == null) {
        status = '';
      }
      if (options == null) {
        options = {};
      }
      initial = _.defaults(options, {
        initial: false
      }).initial;
      return NitroPromise((function(_this) {
        return function(resolve, reject) {
          var error, invisibleStanza, sendOpts, show, stanza, visibleStanza;
          if (!_.contains(XMPPPresence, status)) {
            error = new Error("Attempted to set an invalid presence");
            return reject(error);
          }
          sendOpts = {
            resolve: resolve,
            reject: reject
          };
          if (status === XMPPPresence.INVISIBLE) {
            invisibleStanza = strophePresence.getVisibleStanza(false);
            sendIQ.call(_this, _.extend({}, sendOpts, {
              element: invisibleStanza
            }));
            if (initial) {
              status = XMPPPresence.AVAILABLE;
              show = XMPPUtils.xmppPresenceToShow(status);
              stanza = strophePresence.getPresenceStanza('', '', show);
              send.call(_this, _.extend({}, {
                element: stanza
              }));
            }
            return;
          }
          if (!initial) {
            visibleStanza = strophePresence.getVisibleStanza();
            sendIQ.call(_this, _.extend({}, sendOpts, {
              element: visibleStanza
            }));
          }
          show = XMPPUtils.xmppPresenceToShow(status);
          stanza = strophePresence.getPresenceStanza('', '', show);
          return send.call(_this, _.extend({}, {
            element: stanza,
            resolve: resolve,
            reject: reject
          }));
        };
      })(this));
    };

    PrivateConnection.prototype.setInitialPresence = function(status) {
      if (status == null) {
        status = '';
      }
      return this.setPresence(status, {
        initial: true
      });
    };

    registerComponent = function(components, name, instance) {
      return components[name] = instance;
    };

    createConnector = function(options) {
      var connector, context, func, limitOptions;
      if (options == null) {
        options = {};
      }
      func = options.func, context = options.context;
      limitOptions = {
        max: 5,
        time: 60 * 1000,
        context: context,
        errorMessage: "Too many connection attempts have been made."
      };
      connector = new RateLimiter(func, limitOptions);
      connector.addAlias('afterServerFailure');
      connector.addAlias('afterLongPollFailure', {
        max: 3,
        time: 6 * 60 * 1000
      });
      return connector;
    };

    attemptConnection = function(options) {
      var callback, connectionHandler, credentials, jid, limitError, password, promise, ref;
      if (options == null) {
        options = {};
      }
      ref = _.defaults(options, {
        callback: function() {}
      }), jid = ref.jid, password = ref.password, callback = ref.callback;
      this._connectionDfd = Q.defer();
      promise = this._connectionDfd.promise;
      promise["finally"]((function(_this) {
        return function() {
          return _this._connectionDfd = null;
        };
      })(this));
      if (!(credentials = setCredentials.call(this, jid, password))) {
        this._connectionDfd.reject("Can not connect due to missing credentials");
        return promise;
      }
      connectionHandler = _.bind(onConnectionStatus, this, this._connectionDfd, callback);
      jid = credentials[0], password = credentials[1];
      limitError = this._connectToServer.invoke(jid, password, connectionHandler);
      if (limitError instanceof Error) {
        console.error("[Connection]", limitError.message);
        connectionHandler(Status.FATAL_FAILURE, {
          error: limitError
        });
      }
      Config.set('xmpp.domain', XMPPUtils.getXMPPDomain(jid));
      return promise;
    };

    attemptDisconnection = function(options) {
      var promise;
      if (options == null) {
        options = {};
      }
      this._disconnectionDfd = Q.defer();
      promise = this._disconnectionDfd.promise;
      promise["finally"]((function(_this) {
        return function() {
          return _this._disconnectionDfd = null;
        };
      })(this));
      this._connection.disconnect(options);
      return promise;
    };

    doDisco = function() {
      return Q.promise((function(_this) {
        return function(resolve, reject) {
          return send.call(_this, _.extend({}, {
            element: stropheDisco.getDiscoStanza(Config.get('xmpp.domain')),
            resolve: resolve,
            reject: reject
          }));
        };
      })(this));
    };

    setCredentials = function(newJID, newPassword) {
      if (newJID) {
        this._tempJID = newJID;
      }
      if (newPassword) {
        this._password = newPassword;
      }
      if (this._tempJID && this._password) {
        return [this._tempJID, this._password];
      } else {
        return false;
      }
    };

    onConnectionStatus = function(connectionDeferred, callback, status, options) {
      var dfdMethod, ref;
      if (options == null) {
        options = {};
      }
      console.log("[Connection][" + (new Date().toTimeString()) + "] Status:", StatusLabels[status]);
      if (_.contains(this._statuses, status)) {
        this._connectionStatus = status;
      }
      switch (this._connectionStatus) {
        case Status.CONNECTED:
          toggleConnection.call(this, true);
          doDisco.call(this);
          break;
        case Status.DISCONNECTED:
        case Status.CONNTIMEOUT:
        case Status.CONNFAIL:
          this._connection.reset();
          if ((ref = this._disconnectionDfd) != null) {
            ref.resolve();
          }
          toggleConnection.call(this, false);
      }
      dfdMethod = getConnectDfdMethod(this._connectionStatus);
      options = _.extend({}, options, {
        status: this._connectionStatus
      });
      if (connectionDeferred && dfdMethod) {
        connectionDeferred[dfdMethod](options);
      }
      if (_.isFunction(callback)) {
        callback(options);
      }
      return this;
    };

    getConnectDfdMethod = function(status) {
      switch (status) {
        case Status.CONNECTING:
        case Status.AUTHENTICATING:
          return 'notify';
        case Status.CONNECTED:
          return 'resolve';
        case Status.CONNFAIL:
        case Status.AUTHFAIL:
        case Status.DISCONNECTED:
        case Status.FATAL_FAILURE:
          return 'reject';
        case Status.CONNTIMEOUT:
        case Status.AUTHFAIL:
        case Status.DISCONNECTED:
        case Status.FATAL_FAILURE:
          return 'reject';
        default:
          return '';
      }
    };

    toggleConnection = function(connected) {
      var i, len, ref, subscriber;
      if (connected == null) {
        connected = true;
      }
      ref = this._connectionToggleSubs || [];
      for (i = 0, len = ref.length; i < len; i++) {
        subscriber = ref[i];
        subscriber.toggleConnection(connected, this.getJID());
      }
      return this;
    };

    getPendingMessage = function(status) {
      switch (status) {
        case Status.CONNECTING:
          return "Aleady connecting to the Nitro server";
        case Status.AUTHENTICATING:
          return "Already authenticating with the Nitro server";
        case Status.DISCONNECTED:
          return "Already disconnecting from the Nitro server";
        default:
          return "";
      }
    };

    send = function(options) {
      var element, error, errorMsg, reject, resolve;
      if (options == null) {
        options = {};
      }
      element = options.element, resolve = options.resolve, reject = options.reject;
      if (errorMsg = checkForError(element, this.isConnected())) {
        error = new Error(errorMsg);
        return typeof reject === "function" ? reject(error) : void 0;
      }
      this._connection.send(element);
      resolve = resolveWithData(resolve);
      return resolve(element.tree());
    };

    sendIQ = function(options) {
      var element, error, errorMsg, reject, resolve;
      if (options == null) {
        options = {};
      }
      element = options.element, resolve = options.resolve, reject = options.reject;
      if (errorMsg = checkForError(element, this.isConnected())) {
        error = new Error(errorMsg);
        return typeof reject === "function" ? reject(error) : void 0;
      }
      resolve = resolveWithData(resolve);
      reject = rejectWithData(reject);
      return this._connection.sendIQ(element, resolve, reject);
    };

    resolveWithData = function(resolve) {
      return function(stanza) {
        var data;
        data = dataPayload.getData(stanza);
        if (_.isFunction(resolve)) {
          return resolve.call(null, data);
        }
      };
    };

    rejectWithData = function(reject) {
      return resolveWithData(reject);
    };

    checkForError = function(element, isConnected) {
      switch (false) {
        case element instanceof Strophe.Builder:
          return "Data is not a Strophe.Builder instance";
        case isConnected:
          return "Can not call sendIQ unless user is CONNECTED";
        default:
          return "";
      }
    };

    return PrivateConnection;

  })();

  return Connection;

})();


},{"adapters/data_payload":"adapters/data_payload","components/blocklist":"components/blocklist","components/gateway":"components/gateway","components/messaging":"components/messaging","components/muc":"components/muc","components/roster":"components/roster","components/storage":"components/storage","config":"config","enum/gateways":"enum/gateways","enum/status":"enum/status","enum/status_labels":"enum/status_labels","enum/xmpp_presence":"enum/xmpp_presence","events/event_handler":"events/event_handler","events/event_manager":"events/event_manager","events/events":"events/events","events/io_event":"events/io_event","q":47,"shortid":51,"sizzle":84,"strophe":"lib/strophe","strophe/strophe_disco":"strophe/strophe_disco","strophe/strophe_io":"strophe/strophe_io","strophe/strophe_presence":"strophe/strophe_presence","strophe/strophe_yahoo_gateway":"strophe/strophe_yahoo_gateway","underscore":85,"util/promise":"util/promise","util/rate_limiter":"util/rate_limiter","util/xmpp_utils":"util/xmpp_utils"}],"enum/ack_ns":[function(require,module,exports){
module.exports = {
  NITRO_RECEIPTS: 'nitro:xmpp:receipts',
  STANDARD_RECEIPTS: 'urn:xmpp:receipts'
};


},{}],"enum/chat_states_ns":[function(require,module,exports){
module.exports = {
  CHAT_STATES: 'http://jabber.org/protocol/chatstates'
};


},{}],"enum/compliance_error":[function(require,module,exports){
module.exports = {
  MESSAGE_BLOCK: 'message.block',
  MESSAGE_SOFT_BLOCK: 'message.soft.block',
  MESSAGE_SOFT_BLOCK_FLAG: 8239,
  MESSAGE_BLOCK_CODE: '405',
  MESSAGE_HARD_BLOCK_CODE: '406'
};


},{}],"enum/gateway_error":[function(require,module,exports){
module.exports = {
  INVALID_CREDENTIALS: 'invalid_credentials',
  NO_NITRO_CONNECTION: 'no_nitro_connection',
  ALREADY_REGISTERING: 'already_registering',
  ALREADY_UNREGISTERING: 'already_unregistered',
  ALREADY_SUBSCRIBING: 'already_subscribing',
  ALREADY_UNSUBSCRIBING: 'already_unsubscribing'
};


},{}],"enum/gateway_state":[function(require,module,exports){
module.exports = {
  REGISTERING: 'registering',
  REGISTERED: 'registered',
  SUBSCRIBING: 'subscribing',
  SUBSCRIBED: 'subscribed',
  UNREGISTERING: 'unregistering',
  UNREGISTERED: 'unregistered'
};


},{}],"enum/gateways":[function(require,module,exports){
module.exports = {
  YAHOO: 'yahoo'
};


},{}],"enum/history_ns":[function(require,module,exports){
module.exports = {
  CHAT_HISTORY: 'urn:xmpp:mam:tmp',
  RSM: 'http://jabber.org/protocol/rsm',
  DELAY: 'urn:xmpp:delay',
  SEARCH: 'jabber:iq:search'
};


},{}],"enum/message_type":[function(require,module,exports){
module.exports = {
  CHAT: 'chat',
  GROUPCHAT: 'groupchat'
};


},{}],"enum/muc_error_type":[function(require,module,exports){
module.exports = {
  AUTH: 'auth',
  CANCEL: 'cancel',
  MODIFY: 'modify',
  WAIT: 'wait'
};


},{}],"enum/muc_error":[function(require,module,exports){
module.exports = {
  ITEM_NOT_FOUND: 'item-not-found'
};


},{}],"enum/muc_field":[function(require,module,exports){
module.exports = {
  ROOM_NAME: 'muc#roomconfig_roomname',
  FORM_TYPE: 'FORM_TYPE'
};


},{}],"enum/muc_node":[function(require,module,exports){
module.exports = {
  WCP: 'wcpchatroom',
  CONFERENCE: 'conference',
  DESK: 'desk'
};


},{}],"enum/muc_ns":[function(require,module,exports){
module.exports = {
  ROOT: 'http://jabber.org/protocol/muc',
  OWNER: 'http://jabber.org/protocol/muc#owner',
  ADMIN: 'http://jabber.org/protocol/muc#admin',
  USER: 'http://jabber.org/protocol/muc#user',
  DISCO_INFO: 'http://jabber.org/protocol/disco#info'
};


},{}],"enum/muc_role":[function(require,module,exports){
module.exports = {
  OWNER: 'owner',
  ADMIN: 'admin',
  PARTICIPANT: 'participant',
  MODERATOR: 'moderator',
  NONE: 'none',
  MEMBER: 'member'
};


},{}],"enum/muc_types":[function(require,module,exports){
module.exports = {
  MANAGED: "managed",
  BILATERAL: "bilateral",
  DESK: "desk"
};


},{}],"enum/presence_show":[function(require,module,exports){
module.exports = {
  AWAY: 'away',
  CHAT: 'invisible',
  DND: 'dnd',
  EXTENDED_AWAY: 'xa'
};


},{}],"enum/presence_type":[function(require,module,exports){
module.exports = {
  UNAVAILABLE: 'unavailable',
  SUBSCRIBE: 'subscribe',
  SUBSCRIBED: 'subscribed',
  UNSUBSCRIBE: 'unsubscribe',
  UNSUBSCRIBED: 'unsubscribed',
  PROBE: 'probe',
  ERROR: 'error'
};


},{}],"enum/status_labels":[function(require,module,exports){
module.exports = ['Error', 'Connecting', 'ConnFail', 'Authenticating', 'AuthFail', 'Connected', 'Disconnected', 'Disconnecting', 'Attached', 'Redirect', 'ConnTimeout'];


},{}],"enum/status":[function(require,module,exports){
var Strophe;

Strophe = require('strophe');

module.exports = {
  CONNECTING: Strophe.Status.CONNECTING,
  CONNFAIL: Strophe.Status.CONNFAIL,
  AUTHENTICATING: Strophe.Status.AUTHENTICATING,
  AUTHFAIL: Strophe.Status.AUTHFAIL,
  CONNECTED: Strophe.Status.CONNECTED,
  DISCONNECTED: Strophe.Status.DISCONNECTED,
  DISCONNECTING: Strophe.Status.DISCONNECTING,
  FATAL_FAILURE: 8,
  REDIRECT: 9,
  CONNTIMEOUT: 10
};


},{"strophe":"lib/strophe"}],"enum/subscription_status":[function(require,module,exports){
module.exports = {
  SUBSCRIBING: 'subscribing',
  SUBSCRIBED: 'subscribed',
  UNSUBSCRIBING: 'unsubscribing',
  UNSUBSCRIBED: 'unsubscribed'
};


},{}],"enum/xmpp_presence":[function(require,module,exports){
var PresenceShow, PresenceType;

PresenceType = require('enum/presence_type');

PresenceShow = require('enum/presence_show');

module.exports = {
  AVAILABLE: 'available',
  AWAY: PresenceShow.AWAY,
  EXTENDED_AWAY: PresenceShow.EXTENDED_AWAY,
  DND: PresenceShow.DND,
  UNAVAILABLE: PresenceType.UNAVAILABLE,
  INVISIBLE: 'invisible'
};


},{"enum/presence_show":"enum/presence_show","enum/presence_type":"enum/presence_type"}],"enum/yahoo_error":[function(require,module,exports){
module.exports = {
  NOT_REGISTERED: 'not-registered'
};


},{}],"events/event_filters":[function(require,module,exports){
var ChatStatesNS, Config, EventFilters, MUCErrorType, Matchers, Sizzle, Strophe, XMPPUtils, _;

_ = require('underscore');

_.mixin(require('util/not'));

Sizzle = require('sizzle');

Config = require('config');

Strophe = require('strophe');

XMPPUtils = require('util/xmpp_utils');

Matchers = require('util/matchers');

MUCErrorType = require('enum/muc_error_type');

ChatStatesNS = require('enum/chat_states_ns');

module.exports = EventFilters = (function() {
  var filterByJID, getMatcher;

  function EventFilters() {}

  EventFilters.SELF_JID = 'selfJID';

  EventFilters.isMUC = function(stanza) {
    return !!Sizzle('x[xmlns="http://jabber.org/protocol/muc#user"]', stanza).length || Matchers.isGroupchat(stanza.getAttribute('from'));
  };

  EventFilters.isntMUC = _.not(EventFilters.isMUC);

  EventFilters.isMUCInvite = function(stanza) {
    return EventFilters.isMUC(stanza) && !!Sizzle('invite', stanza).length;
  };

  EventFilters.isntMUCInvite = _.not(EventFilters.isMUCInvite);

  EventFilters.isMUCSubject = function(stanza) {
    return stanza.getAttribute('type') === 'groupchat' && !!Sizzle('subject', stanza).length;
  };

  EventFilters.isntMUCSubject = _.not(EventFilters.isMUCSubject);

  EventFilters.isHistoryFin = function(stanza) {
    return !!Sizzle('fin', stanza).length;
  };

  EventFilters.isntHistoryFin = _.not(EventFilters.isHistoryFin);

  EventFilters.hasType = function(stanza) {
    return !_.isEmpty(stanza.getAttribute('type'));
  };

  EventFilters.hasntType = _.not(EventFilters.hasType);

  EventFilters.isSelf = function(stanza, selfJID) {
    return stanza.getAttribute('from') === selfJID.replace("'", "\\27") || stanza.getAttribute('from') === selfJID;
  };

  EventFilters.isntSelf = _.not(EventFilters.isSelf);

  EventFilters.isSubscribed = function(stanza) {
    return stanza.getAttribute('type') === 'subscribed';
  };

  EventFilters.isntSubscribed = _.not(EventFilters.isSubscribed);

  EventFilters.isSubscribe = function(stanza) {
    return stanza.getAttribute('type') === 'subscribe';
  };

  EventFilters.isntSubscribe = _.not(EventFilters.isSubscribe);

  EventFilters.isUnsubscribe = function(stanza) {
    return stanza.getAttribute('type') === 'unsubscribe';
  };

  EventFilters.isntUnsubscribe = _.not(EventFilters.isUnsubscribe);

  EventFilters.isRecipientUnavailable = function(stanza, selfJID) {
    return !!Sizzle('recipient-unavailable', stanza).length;
  };

  EventFilters.isMUCSelf = function(stanza, selfJID) {
    var bareSelfJID, jid, resource;
    resource = Strophe.getResourceFromJid(stanza.getAttribute('from'));
    if (!resource) {
      return false;
    }
    bareSelfJID = Strophe.getBareJidFromJid(selfJID);
    jid = resource.replace('__', '@');
    jid = Strophe.unescapeNode(jid);
    return bareSelfJID === XMPPUtils.emailToJID(jid, Config.get('xmpp.domain')) || bareSelfJID === jid;
  };

  EventFilters.isntMUCSelf = _.not(EventFilters.isMUCSelf);

  EventFilters.isChatAck = function(stanza) {
    var amp;
    if (amp = Sizzle('amp', stanza)[0]) {
      return !!Sizzle('rule', stanza).length;
    } else {
      return false;
    }
  };

  EventFilters.isDelayed = function(stanza) {
    return !!Sizzle('delay', stanza).length;
  };

  EventFilters.isntDelayed = _.not(EventFilters.isDelayed);

  EventFilters.isGroupchatAck = function(stanza, selfJID) {
    return this.isMUCSelf(stanza, selfJID);
  };

  EventFilters.isClientAck = function(stanza) {
    return !!Sizzle('response', stanza).length;
  };

  EventFilters.isPreferences = function(stanza) {
    return !!Sizzle('[xmlns="storage:preferences"]', stanza).length;
  };

  EventFilters.isBookmarks = function(stanza) {
    return !!Sizzle('[xmlns="storage:bookmarks"]', stanza).length;
  };

  EventFilters.isRosterRemoved = function(stanza) {
    var ref;
    return ((ref = Sizzle('item', stanza)[0]) != null ? ref.getAttribute('subscription') : void 0) === "remove";
  };

  EventFilters.isRosterAdded = _.not(EventFilters.isRosterRemoved);

  EventFilters.isBlocklistBlocked = function(stanza) {
    return !!Sizzle('block', stanza).length;
  };

  EventFilters.isBlocklistUnblocked = function(stanza) {
    return !!Sizzle('unblock', stanza).length;
  };

  EventFilters.isYahooGateway = function(stanza) {
    return /^yahoo\./i.test(stanza.getAttribute('from'));
  };

  EventFilters.isntYahooGateway = _.not(EventFilters.isYahooGateway);

  EventFilters.isError = function(stanza) {
    return stanza.getAttribute('type') === 'error';
  };

  EventFilters.isntError = _.not(EventFilters.isError);

  EventFilters.hasDecline = function(stanza) {
    return !!Sizzle('decline', stanza).length;
  };

  EventFilters.hasntDecline = _.not(EventFilters.hasDecline);

  EventFilters.hasPolicyViolation = function(stanza) {
    return !!Sizzle('policy-violation', stanza).length;
  };

  EventFilters.hasntPolicyViolation = _.not(EventFilters.hasPolicyViolation);

  EventFilters.hasInvitee = function(stanza) {
    return !!Sizzle('invitee', stanza).length;
  };

  EventFilters.hasntInvitee = _.not(EventFilters.hasInvitee);

  EventFilters.isConflict = function(stanza) {
    return !!Sizzle('conflict', stanza).length;
  };

  EventFilters.hasErrorTypeCancel = function(stanza) {
    var ref;
    return ((ref = Sizzle('error', stanza)[0]) != null ? ref.getAttribute('type') : void 0) === MUCErrorType.CANCEL;
  };

  EventFilters.hasntErrorTypeCancel = _.not(EventFilters.hasErrorTypeCancel);

  EventFilters.hasErrorTypeAuth = function(stanza) {
    var ref;
    return ((ref = Sizzle('error', stanza)[0]) != null ? ref.getAttribute('type') : void 0) === MUCErrorType.AUTH;
  };

  EventFilters.hasntErrorTypeAuth = _.not(EventFilters.hasErrorTypeAuth);

  EventFilters.hasErrorTypeModify = function(stanza) {
    var ref;
    return ((ref = Sizzle('error', stanza)[0]) != null ? ref.getAttribute('type') : void 0) === MUCErrorType.MODIFY;
  };

  EventFilters.hasntErrorTypeModify = _.not(EventFilters.hasErrorTypeModify);

  EventFilters.isTypingNotice = function(stanza) {
    return !!Sizzle('composing[xmlns="' + ChatStatesNS.CHAT_STATES + '"]', stanza).length;
  };

  EventFilters.isntTypingNotice = _.not(EventFilters.isTypingNotice);

  EventFilters.isHistoryBlocked = function(stanza) {
    return !!Sizzle('error[type="modify"] policy-violation', stanza).length && !!Sizzle('compliance[code="606"]', stanza).length;
  };

  EventFilters.isntHistoryBlocked = _.not(EventFilters.isHistoryBlocked);

  EventFilters.run = function(stanza, filters, selfJID) {
    var filter, i, len, pass;
    pass = true;
    for (i = 0, len = filters.length; i < len; i++) {
      filter = filters[i];
      if (_.isFunction(filter)) {
        if (!filter.call(this, stanza, selfJID)) {
          pass = false;
          break;
        }
      } else {
        throw new Error("Attempted to invoke an invalid filter function " + filter);
      }
    }
    return pass;
  };

  EventFilters.filterByRecipient = function(func, expectedJID, bare) {
    return filterByJID('to', func, expectedJID, getMatcher(bare));
  };

  EventFilters.filterBySender = function(func, expectedJID, bare) {
    return filterByJID('from', func, expectedJID, getMatcher(bare));
  };

  EventFilters.matchBareJID = function(expectedJID, testJID) {
    return expectedJID === Strophe.getBareJidFromJid(testJID);
  };

  EventFilters.matchJID = function(expectedJID, testJID) {
    return _.isEqual(expectedJID, testJID) || this.matchBareJID(testJID);
  };

  EventFilters.hasBodyTag = function(stanza) {
    return !!Sizzle('body', stanza).length;
  };

  EventFilters.hasntBodyTag = _.not(EventFilters.hasBodyTag);

  EventFilters.hasStatusTag = function(stanza) {
    return !!Sizzle('status', stanza).length;
  };

  EventFilters.hasntStatusTag = _.not(EventFilters.hasStatusTag);

  filterByJID = function(attrName, func, expectedJID, matcherFn) {
    return function(stanza) {
      var stanzaJID;
      stanzaJID = stanza.getAttribute(attrName);
      if (matcherFn(expectedJID, stanzaJID)) {
        return func(stanza);
      }
    };
  };

  getMatcher = function(bare) {
    if (bare == null) {
      bare = false;
    }
    return (function(bare) {
      return function(expected, test) {
        if (bare) {
          return EventFilters.matchBareJID(expected, test);
        } else {
          return _.isEqual(expected, test);
        }
      };
    })(bare);
  };

  return EventFilters;

})();


},{"config":"config","enum/chat_states_ns":"enum/chat_states_ns","enum/muc_error_type":"enum/muc_error_type","sizzle":84,"strophe":"lib/strophe","underscore":85,"util/matchers":"util/matchers","util/not":"util/not","util/xmpp_utils":"util/xmpp_utils"}],"events/event_handler":[function(require,module,exports){
var EventFilters, EventHandler, ShortID, Strophe, _, dataPayload,
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

ShortID = require('shortid');

Strophe = require('strophe');

EventFilters = require('events/event_filters');

dataPayload = require('adapters/data_payload');

module.exports = EventHandler = (function() {
  var onceAndRemove;

  EventHandler.prototype.path = null;

  EventHandler.prototype.selfJID = null;

  EventHandler.prototype.config = null;

  EventHandler.prototype._callbacks = null;

  EventHandler.prototype._stropheHandler = null;

  function EventHandler(config) {
    var base, base1, base2, base3, base4, base5, base6, matchBare;
    this.config = config != null ? config : {};
    if ((base = this.config).ns == null) {
      base.ns = null;
    }
    if ((base1 = this.config).name == null) {
      base1.name = null;
    }
    if ((base2 = this.config).type == null) {
      base2.type = null;
    }
    if ((base3 = this.config).id == null) {
      base3.id = null;
    }
    if ((base4 = this.config).from == null) {
      base4.from = null;
    }
    if ((base5 = this.config).filters == null) {
      base5.filters = [];
    }
    if (matchBare = this.config.matchBare) {
      this.config.options = {
        matchBare: matchBare
      };
    } else {
      if ((base6 = this.config).options == null) {
        base6.options = {
          matchBare: false
        };
      }
    }
    this._callbacks = {};
  }

  EventHandler.prototype.addCallback = function(callback, once) {
    var id;
    if (once == null) {
      once = false;
    }
    if (!_.isFunction(callback)) {
      return null;
    }
    id = ShortID.generate();
    if (once) {
      callback = onceAndRemove(callback, _.bind(this.removeCallback, this, id));
    }
    this._callbacks[id] = callback;
    return id;
  };

  EventHandler.prototype.removeCallback = function(id) {
    if (_.has(this._callbacks, id)) {
      delete this._callbacks[id];
      return id;
    } else {
      return null;
    }
  };

  EventHandler.prototype.hasCallbacks = function() {
    return !_.isEmpty(this._callbacks);
  };

  EventHandler.prototype.getStropheHandler = function() {
    return this._stropheHandler;
  };

  EventHandler.prototype.setStropheHandler = function(handler, reset) {
    if (handler == null) {
      handler = null;
    }
    if (reset == null) {
      reset = false;
    }
    if (!reset) {
      if (!(handler instanceof Strophe.Handler)) {
        return this;
      }
    }
    this._stropheHandler = handler;
    return this;
  };

  EventHandler.prototype.reset = function() {
    this.resetStropheHandler();
    return this.resetCallbacks();
  };

  EventHandler.prototype.resetStropheHandler = function() {
    this.setStropheHandler(null, true);
    return this;
  };

  EventHandler.prototype.resetCallbacks = function() {
    var ids;
    ids = _.keys(this._callbacks);
    this._callbacks = {};
    return ids;
  };

  EventHandler.prototype.getSignatureArgs = function(selfJID) {
    var selected;
    this.selfJID = selfJID;
    selected = _.pick(this.config, 'ns', 'name', 'type', 'id', 'from', 'options');
    if (selected.from === EventFilters.SELF_JID) {
      selected.from = this.selfJID;
    }
    return _.values(selected);
  };

  EventHandler.prototype.invokeCallbacks = function(stanza) {
    var callback, data, e, error, id, pass, ref;
    if (!(pass = EventFilters.run(stanza, this.config.filters, this.selfJID))) {
      return this;
    }
    ref = this._callbacks;
    for (id in ref) {
      if (!hasProp.call(ref, id)) continue;
      callback = ref[id];
      try {
        data = dataPayload.getData(stanza);
        callback(data);
      } catch (error) {
        e = error;
      }
    }
    return this;
  };

  onceAndRemove = function(func, remove) {
    return function() {
      func.apply(null, arguments);
      return remove();
    };
  };

  return EventHandler;

})();


},{"adapters/data_payload":"adapters/data_payload","events/event_filters":"events/event_filters","shortid":51,"strophe":"lib/strophe","underscore":85}],"events/event_manager":[function(require,module,exports){
var EventManager, Utils, _,
  hasProp = {}.hasOwnProperty;

_ = require('underscore');

Utils = require('util/utils');

module.exports = EventManager = (function() {
  var PrivateEventManager, instance;

  function EventManager() {}

  instance = null;

  EventManager.get = function(options) {
    var createInstance;
    if (options == null) {
      options = {};
    }
    createInstance = function() {
      return new PrivateEventManager(options);
    };
    return instance != null ? instance : instance = createInstance();
  };

  EventManager.destroy = Utils.returnBool(function() {
    return instance = null;
  });

  PrivateEventManager = (function() {
    var addHandler, addHandlerForCallback, addStropheHandler, addStropheHandlerLazily, addStropheHandlers, createEventsDictionary, deleteHandler, deleteStropheHandler, lazyStrophePolicy, removeStropheHandlers;

    addHandler = null;

    deleteHandler = null;

    addStropheHandlerLazily = null;

    PrivateEventManager.prototype._eventsDictionary = {};

    PrivateEventManager.prototype._selfJID = null;

    function PrivateEventManager(options) {
      var config, handlerClass;
      if (options == null) {
        options = {};
      }
      addHandler = options.addHandler, deleteHandler = options.deleteHandler, config = options.config, handlerClass = options.handlerClass;
      this._eventsDictionary = createEventsDictionary(config, handlerClass);
      addStropheHandlerLazily = Utils.conditional(addStropheHandler, lazyStrophePolicy);
      return this;
    }

    PrivateEventManager.prototype.toggleConnection = function(connected, selfJID) {
      if (selfJID == null) {
        selfJID = '';
      }
      this._selfJID = Strophe.unescapeNode(selfJID);
      if (connected) {
        addStropheHandlers(this._selfJID, this._eventsDictionary);
      } else {
        removeStropheHandlers(this._eventsDictionary);
      }
      return this;
    };

    PrivateEventManager.prototype.listenTo = function(path, callback, once) {
      var callbackId, eventHandler;
      if (once == null) {
        once = false;
      }
      if (eventHandler = this._eventsDictionary[path]) {
        callbackId = eventHandler.addCallback(callback, once);
        addHandlerForCallback(eventHandler, this._selfJID);
        return callbackId;
      } else {
        throw new Error("Unsupported event: " + path);
      }
    };

    PrivateEventManager.prototype.listenToOnce = function(path, callback) {
      return this.listenTo(path, callback, true);
    };

    PrivateEventManager.prototype.stopListening = function(id) {
      var removedIds;
      removedIds = _.invoke(this._eventsDictionary, 'removeCallback', id);
      removedIds = _.compact(removedIds);
      return removedIds[0];
    };

    createEventsDictionary = function(configObj, handlerClass) {
      var dictionary, eventHandler, path, signature;
      if (_.isEmpty(configObj)) {
        return null;
      }
      if (!_.isFunction(handlerClass)) {
        return null;
      }
      dictionary = _.clone(configObj);
      for (path in dictionary) {
        if (!hasProp.call(dictionary, path)) continue;
        signature = dictionary[path];
        eventHandler = new handlerClass(signature);
        eventHandler.path = path;
        dictionary[path] = eventHandler;
      }
      return dictionary;
    };

    lazyStrophePolicy = function(eventHandler) {
      return eventHandler.hasCallbacks();
    };

    addStropheHandlers = function(selfJID, eventsDictionary) {
      var eventHandler, path, results;
      results = [];
      for (path in eventsDictionary) {
        if (!hasProp.call(eventsDictionary, path)) continue;
        eventHandler = eventsDictionary[path];
        results.push(addStropheHandlerLazily(eventHandler, selfJID));
      }
      return results;
    };

    removeStropheHandlers = function(eventsDictionary) {
      var eventHandler, path, results;
      results = [];
      for (path in eventsDictionary) {
        if (!hasProp.call(eventsDictionary, path)) continue;
        eventHandler = eventsDictionary[path];
        deleteStropheHandler(eventHandler.getStropheHandler());
        results.push(eventHandler.resetStropheHandler());
      }
      return results;
    };

    addHandlerForCallback = function(eventHandler, jid) {
      if (!eventHandler.getStropheHandler()) {
        return addStropheHandlerLazily(eventHandler, jid);
      }
    };

    addStropheHandler = function(eventHandler, selfJID, filterJID) {
      var args, handler, invokeCallbacks, signatureArgs, stropheHandler;
      if (!selfJID) {
        return null;
      }
      if (eventHandler.getStropheHandler()) {
        return null;
      }
      invokeCallbacks = _.bind(eventHandler.invokeCallbacks, eventHandler);
      handler = Utils.returnBool(invokeCallbacks, true);
      signatureArgs = eventHandler.getSignatureArgs(selfJID, filterJID);
      args = [handler].concat(signatureArgs);
      stropheHandler = addHandler.apply(null, args);
      eventHandler.setStropheHandler(stropheHandler);
      return stropheHandler;
    };

    deleteStropheHandler = function(stropheHandler) {
      if (!(stropheHandler instanceof Strophe.Handler)) {
        return null;
      }
      return deleteHandler(stropheHandler);
    };

    return PrivateEventManager;

  })();

  return EventManager;

})();


},{"underscore":85,"util/utils":"util/utils"}],"events/events":[function(require,module,exports){
var ACKNS, EventFilters, Events, GatewayName, HistoryNS, MessageType, PresenceType, _, strophePresence;

_ = require('underscore');

strophePresence = require('strophe/strophe_presence');

PresenceType = require('enum/presence_type');

MessageType = require('enum/message_type');

EventFilters = require('events/event_filters');

HistoryNS = require('enum/history_ns');

ACKNS = require('enum/ack_ns');

GatewayName = require('enum/gateways');

module.exports = Events = (function() {
  function Events() {}

  Events.filterByRecipient = function() {
    return EventFilters.filterByRecipient.apply(EventFilters, arguments);
  };

  Events.filterBySender = function() {
    return EventFilters.filterBySender.apply(EventFilters, arguments);
  };

  Events.PRESENCE_USER_UPDATE = 'presence.user.update';

  Events.PRESENCE_SELF_UPDATE = 'presence.self.update';

  Events.PREFERENCES_UPDATE = 'preferences.update';

  Events.BOOKMARKS_UPDATE = 'bookmarks.update';

  Events.MESSAGE_CHAT_RECEIVED = 'message.chat.received';

  Events.MESSAGE_CHAT_HISTORY_RECEIVED = 'message.chat.history.received';

  Events.MESSAGE_CHAT_REGISTERED = 'message.chat.registered';

  Events.MESSAGE_CHAT_DELIVERED = 'message.chat.delivered';

  Events.MESSAGE_CHAT_FAILED = 'message.chat.failed';

  Events.MESSAGE_CHAT_FIN = 'message.chat.fin';

  Events.MESSAGE_GROUPCHAT_INVITE = 'message.groupchat.invite';

  Events.MESSAGE_GROUPCHAT_INVITE_REJECTED = 'message.groupchat.invite.rejected';

  Events.MESSAGE_GROUPCHAT_INVITE_BLOCKED = 'message.groupchat.invite.blocked';

  Events.MESSAGE_GROUPCHAT_INVITE_ERROR = 'message.groupchat.invite.error';

  Events.MESSAGE_GROUPCHAT_RECEIVED = 'message.groupchat.received';

  Events.MESSAGE_GROUPCHAT_HISTORY_RECEIVED = 'message.groupchat.history.received';

  Events.PRESENCE_GROUPCHAT_HISTORY_BLOCKED = 'message.groupchat.history.blocked';

  Events.MESSAGE_GROUPCHAT_REGISTERED = 'message.groupchat.registered';

  Events.MESSAGE_MANAGED_GROUPCHAT_REGISTERED = 'message.managed.groupchat.registered';

  Events.MESSAGE_GROUPCHAT_DELIVERED = 'message.groupchat.delivered';

  Events.MESSAGE_GROUPCHAT_FAILED = 'message.groupchat.failed';

  Events.MESSAGE_GROUPCHAT_SUBJECT = 'message.groupchat.subject';

  Events.ROSTER_ADDED = 'roster.added';

  Events.ROSTER_REMOVED = 'roster.removed';

  Events.ROSTER_INVITE_RECEIVED = 'roster.invite.received';

  Events.ROSTER_INVITE_CONFIRMED = 'roster.invite.confirmed';

  Events.BLOCKLIST_BLOCK = 'blocklist.blocked';

  Events.BLOCKLIST_UNBLOCK = 'blocklist.unblocked';

  Events.GROUPCHAT_SELF_JOINED = 'groupchat.self.joined';

  Events.GROUPCHAT_SELF_LEFT = 'groupchat.self.left';

  Events.GROUPCHAT_USER_JOINED = 'groupchat.user.joined';

  Events.GROUPCHAT_USER_LEFT = 'groupchat.user.left';

  Events.GROUPCHAT_CREATE_ERROR = 'groupchat.create.error';

  Events.GROUPCHAT_JOIN_ERROR = 'groupchat.join.error';

  Events.GROUPCHAT_CONFIGURATION_CHANGE = 'groupchat.config.changed';

  Events.GATEWAY_YAHOO_SUBSCRIBE = 'gateway.yahoo.subscribe';

  Events.GATEWAY_YAHOO_SELF_PRESENCE = 'gateway.yahoo.self.presence';

  Events.GATEWAY_YAHOO_UNSUBSCRIBED = 'gateway.yahoo.unsubscribed';

  Events.STREAM_ERROR = 'stream.error';

  Events.TYPING_NOTICE = 'typing.notice';

  Events.NAME_MESSAGE = 'message';

  Events.NAME_PRESENCE = strophePresence.PRESENCE;

  Events.NAME_IQ = 'iq';

  Events.TYPE_HEADLINE = 'headline';

  Events.TYPE_SET = 'set';

  Events.TYPE_CHAT = MessageType.CHAT;

  Events.TYPE_GROUPCHAT = MessageType.GROUPCHAT;

  Events.TYPE_ERROR = 'error';

  Events.getConfig = function() {
    var config;
    config = {};
    config[this.PRESENCE_USER_UPDATE] = {
      name: this.NAME_PRESENCE,
      filters: [EventFilters.isntMUC, EventFilters.isntSelf, EventFilters.isntSubscribed, EventFilters.isntUnsubscribe]
    };
    config[this.PRESENCE_SELF_UPDATE] = {
      name: this.NAME_PRESENCE,
      filters: [EventFilters.isSelf]
    };
    config[this.PREFERENCES_UPDATE] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_HEADLINE,
      ns: 'http://jabber.org/protocol/pubsub#event',
      filters: [EventFilters.isPreferences]
    };
    config[this.BOOKMARKS_UPDATE] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_HEADLINE,
      ns: 'http://jabber.org/protocol/pubsub#event',
      filters: [EventFilters.isBookmarks]
    };
    config[this.MESSAGE_CHAT_HISTORY_RECEIVED] = {
      name: this.NAME_MESSAGE,
      ns: HistoryNS.CHAT_HISTORY,
      filters: [EventFilters.isntMUC]
    };
    config[this.MESSAGE_CHAT_RECEIVED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_CHAT,
      filters: [EventFilters.isntMUC]
    };
    config[this.MESSAGE_CHAT_REGISTERED] = {
      name: this.NAME_MESSAGE,
      ns: ACKNS.NITRO_RECEIPTS,
      filters: [EventFilters.isntMUC]
    };
    config[this.MESSAGE_CHAT_DELIVERED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_CHAT,
      filters: [EventFilters.isClientAck, EventFilters.isntMUC]
    };
    config[this.MESSAGE_CHAT_FAILED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_ERROR,
      filters: [EventFilters.isntMUC]
    };
    config[this.MESSAGE_GROUPCHAT_INVITE] = {
      name: this.NAME_MESSAGE,
      filters: [EventFilters.isMUCInvite, EventFilters.isntError]
    };
    config[this.MESSAGE_GROUPCHAT_INVITE_REJECTED] = {
      name: this.NAME_MESSAGE,
      filters: [EventFilters.isMUC, EventFilters.hasDecline]
    };
    config[this.MESSAGE_GROUPCHAT_INVITE_BLOCKED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_ERROR,
      filters: [EventFilters.hasPolicyViolation, EventFilters.hasInvitee, EventFilters.hasntErrorTypeCancel]
    };
    config[this.MESSAGE_GROUPCHAT_INVITE_ERROR] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_ERROR,
      filters: [EventFilters.hasErrorTypeCancel, EventFilters.hasInvitee]
    };
    config[this.MESSAGE_GROUPCHAT_SUBJECT] = {
      name: this.NAME_MESSAGE,
      filters: [EventFilters.isMUCSubject]
    };
    config[this.MESSAGE_GROUPCHAT_RECEIVED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_GROUPCHAT,
      filters: [EventFilters.isntMUCSelf, EventFilters.isntMUCInvite, EventFilters.isntMUCSubject, EventFilters.isntDelayed, EventFilters.hasBodyTag]
    };
    config[this.MESSAGE_MANAGED_GROUPCHAT_REGISTERED] = {
      name: this.NAME_MESSAGE,
      ns: ACKNS.STANDARD_RECEIPTS,
      filters: [EventFilters.isMUC, EventFilters.hasntErrorTypeModify]
    };
    config[this.MESSAGE_GROUPCHAT_HISTORY_RECEIVED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_GROUPCHAT,
      ns: HistoryNS.DELAY,
      filters: [EventFilters.isDelayed]
    };
    config[this.MESSAGE_GROUPCHAT_REGISTERED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_GROUPCHAT,
      filters: [EventFilters.isGroupchatAck]
    };
    config[this.MESSAGE_GROUPCHAT_DELIVERED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_GROUPCHAT,
      filters: [EventFilters.isClientAck]
    };
    config[this.MESSAGE_GROUPCHAT_FAILED] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_ERROR,
      filters: [EventFilters.isMUC]
    };
    config[this.MESSAGE_CHAT_FIN] = {
      name: this.NAME_MESSAGE,
      ns: HistoryNS.CHAT_HISTORY,
      filters: [EventFilters.isHistoryFin]
    };
    config[this.ROSTER_ADDED] = {
      name: this.NAME_IQ,
      type: this.TYPE_SET,
      ns: 'jabber:iq:roster',
      filters: [EventFilters.isRosterAdded]
    };
    config[this.ROSTER_REMOVED] = {
      name: this.NAME_IQ,
      type: this.TYPE_SET,
      ns: 'jabber:iq:roster',
      filters: [EventFilters.isRosterRemoved]
    };
    config[this.ROSTER_INVITE_RECEIVED] = {
      name: this.NAME_PRESENCE,
      type: PresenceType.SUBSCRIBE,
      filters: [EventFilters.isntSelf, EventFilters.isntYahooGateway]
    };
    config[this.ROSTER_INVITE_CONFIRMED] = {
      name: this.NAME_PRESENCE,
      type: PresenceType.SUBSCRIBE,
      filters: [EventFilters.isntSelf]
    };
    config[this.BLOCKLIST_BLOCK] = {
      name: this.NAME_IQ,
      type: this.TYPE_SET,
      ns: 'urn:xmpp:blocking',
      filters: [EventFilters.isBlocklistBlocked]
    };
    config[this.BLOCKLIST_UNBLOCK] = {
      name: this.NAME_IQ,
      type: this.TYPE_SET,
      ns: 'urn:xmpp:blocking',
      filters: [EventFilters.isBlocklistUnblocked]
    };
    config[this.GROUPCHAT_SELF_JOINED] = {
      name: this.NAME_PRESENCE,
      ns: 'http://jabber.org/protocol/muc#user',
      filters: [EventFilters.isMUCSelf, EventFilters.hasntType]
    };
    config[this.GROUPCHAT_SELF_LEFT] = {
      name: this.NAME_PRESENCE,
      ns: 'http://jabber.org/protocol/muc#user',
      type: PresenceType.UNAVAILABLE,
      filters: [EventFilters.isMUCSelf]
    };
    config[this.GROUPCHAT_USER_JOINED] = {
      name: this.NAME_PRESENCE,
      ns: 'http://jabber.org/protocol/muc#user',
      filters: [EventFilters.isntMUCSelf, EventFilters.hasntType]
    };
    config[this.GROUPCHAT_USER_LEFT] = {
      name: this.NAME_PRESENCE,
      ns: 'http://jabber.org/protocol/muc#user',
      type: PresenceType.UNAVAILABLE,
      filters: [EventFilters.isntMUCSelf]
    };
    config[this.GROUPCHAT_JOIN_ERROR] = {
      name: this.NAME_PRESENCE,
      type: PresenceType.ERROR,
      filters: [EventFilters.isMUCSelf]
    };
    config[this.GROUPCHAT_CONFIGURATION_CHANGE] = {
      name: this.NAME_MESSAGE,
      type: this.TYPE_GROUPCHAT,
      filters: [EventFilters.hasStatusCode]
    };
    config[this.GATEWAY_YAHOO_SUBSCRIBE] = {
      name: this.NAME_PRESENCE,
      type: PresenceType.SUBSCRIBE,
      filters: [EventFilters.isYahooGateway]
    };
    config[this.GATEWAY_YAHOO_SELF_PRESENCE] = {
      name: this.NAME_PRESENCE,
      filters: [EventFilters.isYahooGateway, EventFilters.isntSubscribe]
    };
    config[this.GATEWAY_YAHOO_UNSUBSCRIBED] = {
      name: this.NAME_PRESENCE,
      type: PresenceType.UNSUBSCRIBED,
      filters: [EventFilters.isYahooGateway]
    };
    config[this.STREAM_ERROR] = {
      name: 'stream:error',
      filters: [EventFilters.isConflict]
    };
    config[this.TYPING_NOTICE] = {
      name: 'message',
      filters: [EventFilters.isTypingNotice]
    };
    config[this.PRESENCE_GROUPCHAT_HISTORY_BLOCKED] = {
      name: this.NAME_PRESENCE,
      type: this.TYPE_ERROR,
      filters: [EventFilters.isHistoryBlocked]
    };
    return config;
  };

  return Events;

})();


},{"enum/ack_ns":"enum/ack_ns","enum/gateways":"enum/gateways","enum/history_ns":"enum/history_ns","enum/message_type":"enum/message_type","enum/presence_type":"enum/presence_type","events/event_filters":"events/event_filters","strophe/strophe_presence":"strophe/strophe_presence","underscore":85}],"events/io_event":[function(require,module,exports){
module.exports = {
  RAW: 'IOEvent.RAW',
  XML: 'IOEvent.XML',
  INPUT: 'IOEvent.INPUT',
  OUTPUT: 'IOEvent.OUTPUT'
};


},{}],"lib/strophe":[function(require,module,exports){
(function (global){
; var __browserify_shim_require__=require;(function browserifyShim(module, exports, require, define, browserify_shim__define__module__export__) {
/** File: strophe.js
 *  A JavaScript library for writing XMPP clients.
 *
 *  This library uses either Bidirectional-streams Over Synchronous HTTP (BOSH)
 *  to emulate a persistent, stateful, two-way connection to an XMPP server or
 *  alternatively WebSockets.
 *
 *  More information on BOSH can be found in XEP 124.
 *  For more information on XMPP-over WebSocket see this RFC:
 *  http://tools.ietf.org/html/rfc7395
 */

/* All of the Strophe globals are defined in this special function below so
 * that references to the globals become closures.  This will ensure that
 * on page reload, these references will still be available to callbacks
 * that are still executing.
 */

/* jshint ignore:start */
(function (callback) {
/* jshint ignore:end */

// This code was written by Tyler Akins and has been placed in the
// public domain.  It would be nice if you left this header intact.
// Base64 code from Tyler Akins -- http://rumkin.com

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-base64', function () {
            return factory();
        });
    } else {
        // Browser globals
        root.Base64 = factory();
    }
}(this, function () {
    var keyStr = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=";

    var obj = {
        /**
         * Encodes a string in base64
         * @param {String} input The string to encode in base64.
         */
        encode: function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;

            do {
                chr1 = input.charCodeAt(i++);
                chr2 = input.charCodeAt(i++);
                chr3 = input.charCodeAt(i++);

                enc1 = chr1 >> 2;
                enc2 = ((chr1 & 3) << 4) | (chr2 >> 4);
                enc3 = ((chr2 & 15) << 2) | (chr3 >> 6);
                enc4 = chr3 & 63;

                if (isNaN(chr2)) {
                    enc2 = ((chr1 & 3) << 4);
                    enc3 = enc4 = 64;
                } else if (isNaN(chr3)) {
                    enc4 = 64;
                }

                output = output + keyStr.charAt(enc1) + keyStr.charAt(enc2) +
                    keyStr.charAt(enc3) + keyStr.charAt(enc4);
            } while (i < input.length);

            return output;
        },

        /**
         * Decodes a base64 string.
         * @param {String} input The string to decode.
         */
        decode: function (input) {
            var output = "";
            var chr1, chr2, chr3;
            var enc1, enc2, enc3, enc4;
            var i = 0;

            // remove all characters that are not A-Z, a-z, 0-9, +, /, or =
            input = input.replace(/[^A-Za-z0-9\+\/\=]/g, "");

            do {
                enc1 = keyStr.indexOf(input.charAt(i++));
                enc2 = keyStr.indexOf(input.charAt(i++));
                enc3 = keyStr.indexOf(input.charAt(i++));
                enc4 = keyStr.indexOf(input.charAt(i++));

                chr1 = (enc1 << 2) | (enc2 >> 4);
                chr2 = ((enc2 & 15) << 4) | (enc3 >> 2);
                chr3 = ((enc3 & 3) << 6) | enc4;

                output = output + String.fromCharCode(chr1);

                if (enc3 != 64) {
                    output = output + String.fromCharCode(chr2);
                }
                if (enc4 != 64) {
                    output = output + String.fromCharCode(chr3);
                }
            } while (i < input.length);

            return output;
        }
    };
    return obj;
}));

/*
 * A JavaScript implementation of the Secure Hash Algorithm, SHA-1, as defined
 * in FIPS PUB 180-1
 * Version 2.1a Copyright Paul Johnston 2000 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for details.
 */

/* jshint undef: true, unused: true:, noarg: true, latedef: false */
/* global define */

/* Some functions and variables have been stripped for use with Strophe */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-sha1', function () {
            return factory();
        });
    } else {
        // Browser globals
        root.SHA1 = factory();
    }
}(this, function () {

/*
 * Calculate the SHA-1 of an array of big-endian words, and a bit length
 */
function core_sha1(x, len)
{
  /* append padding */
  x[len >> 5] |= 0x80 << (24 - len % 32);
  x[((len + 64 >> 9) << 4) + 15] = len;

  var w = new Array(80);
  var a =  1732584193;
  var b = -271733879;
  var c = -1732584194;
  var d =  271733878;
  var e = -1009589776;

  var i, j, t, olda, oldb, oldc, oldd, olde;
  for (i = 0; i < x.length; i += 16)
  {
    olda = a;
    oldb = b;
    oldc = c;
    oldd = d;
    olde = e;

    for (j = 0; j < 80; j++)
    {
      if (j < 16) { w[j] = x[i + j]; }
      else { w[j] = rol(w[j-3] ^ w[j-8] ^ w[j-14] ^ w[j-16], 1); }
      t = safe_add(safe_add(rol(a, 5), sha1_ft(j, b, c, d)),
                       safe_add(safe_add(e, w[j]), sha1_kt(j)));
      e = d;
      d = c;
      c = rol(b, 30);
      b = a;
      a = t;
    }

    a = safe_add(a, olda);
    b = safe_add(b, oldb);
    c = safe_add(c, oldc);
    d = safe_add(d, oldd);
    e = safe_add(e, olde);
  }
  return [a, b, c, d, e];
}

/*
 * Perform the appropriate triplet combination function for the current
 * iteration
 */
function sha1_ft(t, b, c, d)
{
  if (t < 20) { return (b & c) | ((~b) & d); }
  if (t < 40) { return b ^ c ^ d; }
  if (t < 60) { return (b & c) | (b & d) | (c & d); }
  return b ^ c ^ d;
}

/*
 * Determine the appropriate additive constant for the current iteration
 */
function sha1_kt(t)
{
  return (t < 20) ?  1518500249 : (t < 40) ?  1859775393 :
         (t < 60) ? -1894007588 : -899497514;
}

/*
 * Calculate the HMAC-SHA1 of a key and some data
 */
function core_hmac_sha1(key, data)
{
  var bkey = str2binb(key);
  if (bkey.length > 16) { bkey = core_sha1(bkey, key.length * 8); }

  var ipad = new Array(16), opad = new Array(16);
  for (var i = 0; i < 16; i++)
  {
    ipad[i] = bkey[i] ^ 0x36363636;
    opad[i] = bkey[i] ^ 0x5C5C5C5C;
  }

  var hash = core_sha1(ipad.concat(str2binb(data)), 512 + data.length * 8);
  return core_sha1(opad.concat(hash), 512 + 160);
}

/*
 * Add integers, wrapping at 2^32. This uses 16-bit operations internally
 * to work around bugs in some JS interpreters.
 */
function safe_add(x, y)
{
  var lsw = (x & 0xFFFF) + (y & 0xFFFF);
  var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
  return (msw << 16) | (lsw & 0xFFFF);
}

/*
 * Bitwise rotate a 32-bit number to the left.
 */
function rol(num, cnt)
{
  return (num << cnt) | (num >>> (32 - cnt));
}

/*
 * Convert an 8-bit or 16-bit string to an array of big-endian words
 * In 8-bit function, characters >255 have their hi-byte silently ignored.
 */
function str2binb(str)
{
  var bin = [];
  var mask = 255;
  for (var i = 0; i < str.length * 8; i += 8)
  {
    bin[i>>5] |= (str.charCodeAt(i / 8) & mask) << (24 - i%32);
  }
  return bin;
}

/*
 * Convert an array of big-endian words to a string
 */
function binb2str(bin)
{
  var str = "";
  var mask = 255;
  for (var i = 0; i < bin.length * 32; i += 8)
  {
    str += String.fromCharCode((bin[i>>5] >>> (24 - i%32)) & mask);
  }
  return str;
}

/*
 * Convert an array of big-endian words to a base-64 string
 */
function binb2b64(binarray)
{
  var tab = "ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/";
  var str = "";
  var triplet, j;
  for (var i = 0; i < binarray.length * 4; i += 3)
  {
    triplet = (((binarray[i   >> 2] >> 8 * (3 -  i   %4)) & 0xFF) << 16) |
              (((binarray[i+1 >> 2] >> 8 * (3 - (i+1)%4)) & 0xFF) << 8 ) |
               ((binarray[i+2 >> 2] >> 8 * (3 - (i+2)%4)) & 0xFF);
    for (j = 0; j < 4; j++)
    {
      if (i * 8 + j * 6 > binarray.length * 32) { str += "="; }
      else { str += tab.charAt((triplet >> 6*(3-j)) & 0x3F); }
    }
  }
  return str;
}

/*
 * These are the functions you'll usually want to call
 * They take string arguments and return either hex or base-64 encoded strings
 */
return {
    b64_hmac_sha1:  function (key, data){ return binb2b64(core_hmac_sha1(key, data)); },
    b64_sha1:       function (s) { return binb2b64(core_sha1(str2binb(s),s.length * 8)); },
    binb2str:       binb2str,
    core_hmac_sha1: core_hmac_sha1,
    str_hmac_sha1:  function (key, data){ return binb2str(core_hmac_sha1(key, data)); },
    str_sha1:       function (s) { return binb2str(core_sha1(str2binb(s),s.length * 8)); },
};
}));

/*
 * A JavaScript implementation of the RSA Data Security, Inc. MD5 Message
 * Digest Algorithm, as defined in RFC 1321.
 * Version 2.1 Copyright (C) Paul Johnston 1999 - 2002.
 * Other contributors: Greg Holt, Andrew Kepert, Ydnar, Lostinet
 * Distributed under the BSD License
 * See http://pajhome.org.uk/crypt/md5 for more info.
 */

/*
 * Everything that isn't used by Strophe has been stripped here!
 */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-md5', function () {
            return factory();
        });
    } else {
        // Browser globals
        root.MD5 = factory();
    }
}(this, function (b) {
    /*
     * Add integers, wrapping at 2^32. This uses 16-bit operations internally
     * to work around bugs in some JS interpreters.
     */
    var safe_add = function (x, y) {
        var lsw = (x & 0xFFFF) + (y & 0xFFFF);
        var msw = (x >> 16) + (y >> 16) + (lsw >> 16);
        return (msw << 16) | (lsw & 0xFFFF);
    };

    /*
     * Bitwise rotate a 32-bit number to the left.
     */
    var bit_rol = function (num, cnt) {
        return (num << cnt) | (num >>> (32 - cnt));
    };

    /*
     * Convert a string to an array of little-endian words
     */
    var str2binl = function (str) {
        var bin = [];
        for(var i = 0; i < str.length * 8; i += 8)
        {
            bin[i>>5] |= (str.charCodeAt(i / 8) & 255) << (i%32);
        }
        return bin;
    };

    /*
     * Convert an array of little-endian words to a string
     */
    var binl2str = function (bin) {
        var str = "";
        for(var i = 0; i < bin.length * 32; i += 8)
        {
            str += String.fromCharCode((bin[i>>5] >>> (i % 32)) & 255);
        }
        return str;
    };

    /*
     * Convert an array of little-endian words to a hex string.
     */
    var binl2hex = function (binarray) {
        var hex_tab = "0123456789abcdef";
        var str = "";
        for(var i = 0; i < binarray.length * 4; i++)
        {
            str += hex_tab.charAt((binarray[i>>2] >> ((i%4)*8+4)) & 0xF) +
                hex_tab.charAt((binarray[i>>2] >> ((i%4)*8  )) & 0xF);
        }
        return str;
    };

    /*
     * These functions implement the four basic operations the algorithm uses.
     */
    var md5_cmn = function (q, a, b, x, s, t) {
        return safe_add(bit_rol(safe_add(safe_add(a, q),safe_add(x, t)), s),b);
    };

    var md5_ff = function (a, b, c, d, x, s, t) {
        return md5_cmn((b & c) | ((~b) & d), a, b, x, s, t);
    };

    var md5_gg = function (a, b, c, d, x, s, t) {
        return md5_cmn((b & d) | (c & (~d)), a, b, x, s, t);
    };

    var md5_hh = function (a, b, c, d, x, s, t) {
        return md5_cmn(b ^ c ^ d, a, b, x, s, t);
    };

    var md5_ii = function (a, b, c, d, x, s, t) {
        return md5_cmn(c ^ (b | (~d)), a, b, x, s, t);
    };

    /*
     * Calculate the MD5 of an array of little-endian words, and a bit length
     */
    var core_md5 = function (x, len) {
        /* append padding */
        x[len >> 5] |= 0x80 << ((len) % 32);
        x[(((len + 64) >>> 9) << 4) + 14] = len;

        var a =  1732584193;
        var b = -271733879;
        var c = -1732584194;
        var d =  271733878;

        var olda, oldb, oldc, oldd;
        for (var i = 0; i < x.length; i += 16)
        {
            olda = a;
            oldb = b;
            oldc = c;
            oldd = d;

            a = md5_ff(a, b, c, d, x[i+ 0], 7 , -680876936);
            d = md5_ff(d, a, b, c, x[i+ 1], 12, -389564586);
            c = md5_ff(c, d, a, b, x[i+ 2], 17,  606105819);
            b = md5_ff(b, c, d, a, x[i+ 3], 22, -1044525330);
            a = md5_ff(a, b, c, d, x[i+ 4], 7 , -176418897);
            d = md5_ff(d, a, b, c, x[i+ 5], 12,  1200080426);
            c = md5_ff(c, d, a, b, x[i+ 6], 17, -1473231341);
            b = md5_ff(b, c, d, a, x[i+ 7], 22, -45705983);
            a = md5_ff(a, b, c, d, x[i+ 8], 7 ,  1770035416);
            d = md5_ff(d, a, b, c, x[i+ 9], 12, -1958414417);
            c = md5_ff(c, d, a, b, x[i+10], 17, -42063);
            b = md5_ff(b, c, d, a, x[i+11], 22, -1990404162);
            a = md5_ff(a, b, c, d, x[i+12], 7 ,  1804603682);
            d = md5_ff(d, a, b, c, x[i+13], 12, -40341101);
            c = md5_ff(c, d, a, b, x[i+14], 17, -1502002290);
            b = md5_ff(b, c, d, a, x[i+15], 22,  1236535329);

            a = md5_gg(a, b, c, d, x[i+ 1], 5 , -165796510);
            d = md5_gg(d, a, b, c, x[i+ 6], 9 , -1069501632);
            c = md5_gg(c, d, a, b, x[i+11], 14,  643717713);
            b = md5_gg(b, c, d, a, x[i+ 0], 20, -373897302);
            a = md5_gg(a, b, c, d, x[i+ 5], 5 , -701558691);
            d = md5_gg(d, a, b, c, x[i+10], 9 ,  38016083);
            c = md5_gg(c, d, a, b, x[i+15], 14, -660478335);
            b = md5_gg(b, c, d, a, x[i+ 4], 20, -405537848);
            a = md5_gg(a, b, c, d, x[i+ 9], 5 ,  568446438);
            d = md5_gg(d, a, b, c, x[i+14], 9 , -1019803690);
            c = md5_gg(c, d, a, b, x[i+ 3], 14, -187363961);
            b = md5_gg(b, c, d, a, x[i+ 8], 20,  1163531501);
            a = md5_gg(a, b, c, d, x[i+13], 5 , -1444681467);
            d = md5_gg(d, a, b, c, x[i+ 2], 9 , -51403784);
            c = md5_gg(c, d, a, b, x[i+ 7], 14,  1735328473);
            b = md5_gg(b, c, d, a, x[i+12], 20, -1926607734);

            a = md5_hh(a, b, c, d, x[i+ 5], 4 , -378558);
            d = md5_hh(d, a, b, c, x[i+ 8], 11, -2022574463);
            c = md5_hh(c, d, a, b, x[i+11], 16,  1839030562);
            b = md5_hh(b, c, d, a, x[i+14], 23, -35309556);
            a = md5_hh(a, b, c, d, x[i+ 1], 4 , -1530992060);
            d = md5_hh(d, a, b, c, x[i+ 4], 11,  1272893353);
            c = md5_hh(c, d, a, b, x[i+ 7], 16, -155497632);
            b = md5_hh(b, c, d, a, x[i+10], 23, -1094730640);
            a = md5_hh(a, b, c, d, x[i+13], 4 ,  681279174);
            d = md5_hh(d, a, b, c, x[i+ 0], 11, -358537222);
            c = md5_hh(c, d, a, b, x[i+ 3], 16, -722521979);
            b = md5_hh(b, c, d, a, x[i+ 6], 23,  76029189);
            a = md5_hh(a, b, c, d, x[i+ 9], 4 , -640364487);
            d = md5_hh(d, a, b, c, x[i+12], 11, -421815835);
            c = md5_hh(c, d, a, b, x[i+15], 16,  530742520);
            b = md5_hh(b, c, d, a, x[i+ 2], 23, -995338651);

            a = md5_ii(a, b, c, d, x[i+ 0], 6 , -198630844);
            d = md5_ii(d, a, b, c, x[i+ 7], 10,  1126891415);
            c = md5_ii(c, d, a, b, x[i+14], 15, -1416354905);
            b = md5_ii(b, c, d, a, x[i+ 5], 21, -57434055);
            a = md5_ii(a, b, c, d, x[i+12], 6 ,  1700485571);
            d = md5_ii(d, a, b, c, x[i+ 3], 10, -1894986606);
            c = md5_ii(c, d, a, b, x[i+10], 15, -1051523);
            b = md5_ii(b, c, d, a, x[i+ 1], 21, -2054922799);
            a = md5_ii(a, b, c, d, x[i+ 8], 6 ,  1873313359);
            d = md5_ii(d, a, b, c, x[i+15], 10, -30611744);
            c = md5_ii(c, d, a, b, x[i+ 6], 15, -1560198380);
            b = md5_ii(b, c, d, a, x[i+13], 21,  1309151649);
            a = md5_ii(a, b, c, d, x[i+ 4], 6 , -145523070);
            d = md5_ii(d, a, b, c, x[i+11], 10, -1120210379);
            c = md5_ii(c, d, a, b, x[i+ 2], 15,  718787259);
            b = md5_ii(b, c, d, a, x[i+ 9], 21, -343485551);

            a = safe_add(a, olda);
            b = safe_add(b, oldb);
            c = safe_add(c, oldc);
            d = safe_add(d, oldd);
        }
        return [a, b, c, d];
    };

    var obj = {
        /*
         * These are the functions you'll usually want to call.
         * They take string arguments and return either hex or base-64 encoded
         * strings.
         */
        hexdigest: function (s) {
            return binl2hex(core_md5(str2binl(s), s.length * 8));
        },

        hash: function (s) {
            return binl2str(core_md5(str2binl(s), s.length * 8));
        }
    };
    return obj;
}));

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-utils', function () {
            return factory();
        });
    } else {
        // Browser globals
        root.stropheUtils = factory();
    }
}(this, function () {

    var utils = {

        utf16to8: function (str) {
            var i, c;
            var out = "";
            var len = str.length;
            for (i = 0; i < len; i++) {
                c = str.charCodeAt(i);
                if ((c >= 0x0000) && (c <= 0x007F)) {
                    out += str.charAt(i);
                } else if (c > 0x07FF) {
                    out += String.fromCharCode(0xE0 | ((c >> 12) & 0x0F));
                    out += String.fromCharCode(0x80 | ((c >>  6) & 0x3F));
                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                } else {
                    out += String.fromCharCode(0xC0 | ((c >>  6) & 0x1F));
                    out += String.fromCharCode(0x80 | ((c >>  0) & 0x3F));
                }
            }
            return out;
        },

        addCookies: function (cookies) {
            /* Parameters:
             *  (Object) cookies - either a map of cookie names
             *    to string values or to maps of cookie values.
             *
             * For example:
             * { "myCookie": "1234" }
             *
             * or:
             * { "myCookie": {
             *      "value": "1234",
             *      "domain": ".example.org",
             *      "path": "/",
             *      "expires": expirationDate
             *      }
             *  }
             *
             *  These values get passed to Strophe.Connection via
             *   options.cookies
             */
            var cookieName, cookieObj, isObj, cookieValue, expires, domain, path;
            for (cookieName in (cookies || {})) {
                expires = '';
                domain = '';
                path = '';
                cookieObj = cookies[cookieName];
                isObj = typeof cookieObj == "object";
                cookieValue = escape(unescape(isObj ? cookieObj.value : cookieObj));
                if (isObj) {
                    expires = cookieObj.expires ? ";expires="+cookieObj.expires : '';
                    domain = cookieObj.domain ? ";domain="+cookieObj.domain : '';
                    path = cookieObj.path ? ";path="+cookieObj.path : '';
                }
                document.cookie =
                    cookieName+'='+cookieValue + expires + domain + path;
            }
        }
    };
    return utils;
}));

/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* jshint undef: true, unused: true:, noarg: true, latedef: true */
/* global define */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-polyfill', [], function () {
            return factory();
        });
    } else {
        // Browser globals
        return factory();
    }
}(this, function () {

/** Function: Function.prototype.bind
 *  Bind a function to an instance.
 *
 *  This Function object extension method creates a bound method similar
 *  to those in Python.  This means that the 'this' object will point
 *  to the instance you want.  See <MDC's bind() documentation at https://developer.mozilla.org/en/JavaScript/Reference/Global_Objects/Function/bind>
 *  and <Bound Functions and Function Imports in JavaScript at http://benjamin.smedbergs.us/blog/2007-01-03/bound-functions-and-function-imports-in-javascript/>
 *  for a complete explanation.
 *
 *  This extension already exists in some browsers (namely, Firefox 3), but
 *  we provide it to support those that don't.
 *
 *  Parameters:
 *    (Object) obj - The object that will become 'this' in the bound function.
 *    (Object) argN - An option argument that will be prepended to the
 *      arguments given for the function call
 *
 *  Returns:
 *    The bound function.
 */
if (!Function.prototype.bind) {
    Function.prototype.bind = function (obj /*, arg1, arg2, ... */) {
        var func = this;
        var _slice = Array.prototype.slice;
        var _concat = Array.prototype.concat;
        var _args = _slice.call(arguments, 1);
        return function () {
            return func.apply(obj ? obj : this, _concat.call(_args, _slice.call(arguments, 0)));
        };
    };
}

/** Function: Array.isArray
 *  This is a polyfill for the ES5 Array.isArray method.
 */
if (!Array.isArray) {
    Array.isArray = function(arg) {
        return Object.prototype.toString.call(arg) === '[object Array]';
    };
}

/** Function: Array.prototype.indexOf
 *  Return the index of an object in an array.
 *
 *  This function is not supplied by some JavaScript implementations, so
 *  we provide it if it is missing.  This code is from:
 *  http://developer.mozilla.org/En/Core_JavaScript_1.5_Reference:Objects:Array:indexOf
 *
 *  Parameters:
 *    (Object) elt - The object to look for.
 *    (Integer) from - The index from which to start looking. (optional).
 *
 *  Returns:
 *    The index of elt in the array or -1 if not found.
 */
if (!Array.prototype.indexOf) {
        Array.prototype.indexOf = function(elt /*, from*/) {
            var len = this.length;
            var from = Number(arguments[1]) || 0;
            from = (from < 0) ? Math.ceil(from) : Math.floor(from);
            if (from < 0) {
                from += len;
            }

            for (; from < len; from++) {
                if (from in this && this[from] === elt) {
                    return from;
                }
            }
            return -1;
        };
    }
}));


/** Function: Array.prototype.forEach
 *
 *  This function is not available in IE < 9
 *
 *  See <forEach on developer.mozilla.org at https://developer.mozilla.org/en-US/docs/Web/JavaScript/Reference/Global_Objects/Array/forEach>
 */
if (!Array.prototype.forEach) {
    Array.prototype.forEach = function(callback, thisArg) {
        var T, k;
        if (this === null) {
            throw new TypeError(' this is null or not defined');
        }

        // 1. Let O be the result of calling toObject() passing the
        // |this| value as the argument.
        var O = Object(this);
        // 2. Let lenValue be the result of calling the Get() internal
        // method of O with the argument "length".
        // 3. Let len be toUint32(lenValue).
        var len = O.length >>> 0;
        // 4. If isCallable(callback) is false, throw a TypeError exception.
        // See: http://es5.github.com/#x9.11
        if (typeof callback !== "function") {
            throw new TypeError(callback + ' is not a function');
        }
        // 5. If thisArg was supplied, let T be thisArg; else let
        // T be undefined.
        if (arguments.length > 1) {
            T = thisArg;
        }
        // 6. Let k be 0
        k = 0;
        // 7. Repeat, while k < len
        while (k < len) {
            var kValue;
            // a. Let Pk be ToString(k).
            //        This is implicit for LHS operands of the in operator
            // b. Let kPresent be the result of calling the HasProperty
            //        internal method of O with argument Pk.
            //        This step can be combined with c
            // c. If kPresent is true, then
            if (k in O) {
                // i. Let kValue be the result of calling the Get internal
                // method of O with argument Pk.
                kValue = O[k];
                // ii. Call the Call internal method of callback with T as
                // the this value and argument list containing kValue, k, and O.
                callback.call(T, kValue, k, O);
            }
            // d. Increase k by 1.
            k++;
        }
        // 8. return undefined
    };
}

/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* jshint undef: true, unused: true:, noarg: true, latedef: true */
/*global define, document, window, setTimeout, clearTimeout, ActiveXObject, DOMParser */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-core', [
            'strophe-sha1',
            'strophe-base64',
            'strophe-md5',
            'strophe-utils',
            "strophe-polyfill"
        ], function () {
            return factory.apply(this, arguments);
        });
    } else {
        // Browser globals
        var o = factory(root.SHA1, root.Base64, root.MD5, root.stropheUtils);
        window.Strophe =        o.Strophe;
        window.$build =         o.$build;
        window.$iq =            o.$iq;
        window.$msg =           o.$msg;
        window.$pres =          o.$pres;
        window.SHA1 =           o.SHA1;
        window.Base64 =         o.Base64;
        window.MD5 =            o.MD5;
        window.b64_hmac_sha1 =  o.SHA1.b64_hmac_sha1;
        window.b64_sha1 =       o.SHA1.b64_sha1;
        window.str_hmac_sha1 =  o.SHA1.str_hmac_sha1;
        window.str_sha1 =       o.SHA1.str_sha1;
    }
}(this, function (SHA1, Base64, MD5, utils) {

var Strophe;

/** Function: $build
 *  Create a Strophe.Builder.
 *  This is an alias for 'new Strophe.Builder(name, attrs)'.
 *
 *  Parameters:
 *    (String) name - The root element name.
 *    (Object) attrs - The attributes for the root element in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */
function $build(name, attrs) { return new Strophe.Builder(name, attrs); }

/** Function: $msg
 *  Create a Strophe.Builder with a <message/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <message/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */
function $msg(attrs) { return new Strophe.Builder("message", attrs); }

/** Function: $iq
 *  Create a Strophe.Builder with an <iq/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <iq/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */
function $iq(attrs) { return new Strophe.Builder("iq", attrs); }

/** Function: $pres
 *  Create a Strophe.Builder with a <presence/> element as the root.
 *
 *  Parameters:
 *    (Object) attrs - The <presence/> element attributes in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder object.
 */
function $pres(attrs) { return new Strophe.Builder("presence", attrs); }

/** Class: Strophe
 *  An object container for all Strophe library functions.
 *
 *  This class is just a container for all the objects and constants
 *  used in the library.  It is not meant to be instantiated, but to
 *  provide a namespace for library objects, constants, and functions.
 */
Strophe = {
    /** Constant: VERSION
     *  The version of the Strophe library. Unreleased builds will have
     *  a version of head-HASH where HASH is a partial revision.
     */
    VERSION: "1.2.10",

    /** Constants: XMPP Namespace Constants
     *  Common namespace constants from the XMPP RFCs and XEPs.
     *
     *  NS.HTTPBIND - HTTP BIND namespace from XEP 124.
     *  NS.BOSH - BOSH namespace from XEP 206.
     *  NS.CLIENT - Main XMPP client namespace.
     *  NS.AUTH - Legacy authentication namespace.
     *  NS.ROSTER - Roster operations namespace.
     *  NS.PROFILE - Profile namespace.
     *  NS.DISCO_INFO - Service discovery info namespace from XEP 30.
     *  NS.DISCO_ITEMS - Service discovery items namespace from XEP 30.
     *  NS.MUC - Multi-User Chat namespace from XEP 45.
     *  NS.SASL - XMPP SASL namespace from RFC 3920.
     *  NS.STREAM - XMPP Streams namespace from RFC 3920.
     *  NS.BIND - XMPP Binding namespace from RFC 3920.
     *  NS.SESSION - XMPP Session namespace from RFC 3920.
     *  NS.XHTML_IM - XHTML-IM namespace from XEP 71.
     *  NS.XHTML - XHTML body namespace from XEP 71.
     */
    NS: {
        HTTPBIND: "http://jabber.org/protocol/httpbind",
        BOSH: "urn:xmpp:xbosh",
        CLIENT: "jabber:client",
        AUTH: "jabber:iq:auth",
        ROSTER: "jabber:iq:roster",
        PROFILE: "jabber:iq:profile",
        DISCO_INFO: "http://jabber.org/protocol/disco#info",
        DISCO_ITEMS: "http://jabber.org/protocol/disco#items",
        MUC: "http://jabber.org/protocol/muc",
        SASL: "urn:ietf:params:xml:ns:xmpp-sasl",
        STREAM: "http://etherx.jabber.org/streams",
        FRAMING: "urn:ietf:params:xml:ns:xmpp-framing",
        BIND: "urn:ietf:params:xml:ns:xmpp-bind",
        SESSION: "urn:ietf:params:xml:ns:xmpp-session",
        VERSION: "jabber:iq:version",
        STANZAS: "urn:ietf:params:xml:ns:xmpp-stanzas",
        XHTML_IM: "http://jabber.org/protocol/xhtml-im",
        XHTML: "http://www.w3.org/1999/xhtml"
    },

    /** Constants: XHTML_IM Namespace
     *  contains allowed tags, tag attributes, and css properties.
     *  Used in the createHtml function to filter incoming html into the allowed XHTML-IM subset.
     *  See http://xmpp.org/extensions/xep-0071.html#profile-summary for the list of recommended
     *  allowed tags and their attributes.
     */
    XHTML: {
        tags: ['a','blockquote','br','cite','em','img','li','ol','p','span','strong','ul','body'],
        attributes: {
            'a':          ['href'],
            'blockquote': ['style'],
            'br':         [],
            'cite':       ['style'],
            'em':         [],
            'img':        ['src', 'alt', 'style', 'height', 'width'],
            'li':         ['style'],
            'ol':         ['style'],
            'p':          ['style'],
            'span':       ['style'],
            'strong':     [],
            'ul':         ['style'],
            'body':       []
        },
        css: ['background-color','color','font-family','font-size','font-style','font-weight','margin-left','margin-right','text-align','text-decoration'],
        /** Function: XHTML.validTag
         *
         * Utility method to determine whether a tag is allowed
         * in the XHTML_IM namespace.
         *
         * XHTML tag names are case sensitive and must be lower case.
         */
        validTag: function(tag) {
            for (var i = 0; i < Strophe.XHTML.tags.length; i++) {
                if (tag == Strophe.XHTML.tags[i]) {
                    return true;
                }
            }
            return false;
        },
        /** Function: XHTML.validAttribute
         *
         * Utility method to determine whether an attribute is allowed
         * as recommended per XEP-0071
         *
         * XHTML attribute names are case sensitive and must be lower case.
         */
        validAttribute: function(tag, attribute) {
            if (typeof Strophe.XHTML.attributes[tag] !== 'undefined' && Strophe.XHTML.attributes[tag].length > 0) {
                for (var i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
                    if (attribute == Strophe.XHTML.attributes[tag][i]) {
                        return true;
                    }
                }
            }
        return false;
        },
        validCSS: function(style) {
            for (var i = 0; i < Strophe.XHTML.css.length; i++) {
                if (style == Strophe.XHTML.css[i]) {
                    return true;
                }
            }
            return false;
        }
    },

    /** Constants: Connection Status Constants
     *  Connection status constants for use by the connection handler
     *  callback.
     *
     *  Status.ERROR - An error has occurred
     *  Status.CONNECTING - The connection is currently being made
     *  Status.CONNFAIL - The connection attempt failed
     *  Status.AUTHENTICATING - The connection is authenticating
     *  Status.AUTHFAIL - The authentication attempt failed
     *  Status.CONNECTED - The connection has succeeded
     *  Status.DISCONNECTED - The connection has been terminated
     *  Status.DISCONNECTING - The connection is currently being terminated
     *  Status.ATTACHED - The connection has been attached
     *  Status.CONNTIMEOUT - The connection has timed out
     */
    Status: {
        ERROR: 0,
        CONNECTING: 1,
        CONNFAIL: 2,
        AUTHENTICATING: 3,
        AUTHFAIL: 4,
        CONNECTED: 5,
        DISCONNECTED: 6,
        DISCONNECTING: 7,
        ATTACHED: 8,
        REDIRECT: 9,
        CONNTIMEOUT: 10
    },

    /** Constants: Log Level Constants
     *  Logging level indicators.
     *
     *  LogLevel.DEBUG - Debug output
     *  LogLevel.INFO - Informational output
     *  LogLevel.WARN - Warnings
     *  LogLevel.ERROR - Errors
     *  LogLevel.FATAL - Fatal errors
     */
    LogLevel: {
        DEBUG: 0,
        INFO: 1,
        WARN: 2,
        ERROR: 3,
        FATAL: 4
    },

    /** PrivateConstants: DOM Element Type Constants
     *  DOM element types.
     *
     *  ElementType.NORMAL - Normal element.
     *  ElementType.TEXT - Text data element.
     *  ElementType.FRAGMENT - XHTML fragment element.
     */
    ElementType: {
        NORMAL: 1,
        TEXT: 3,
        CDATA: 4,
        FRAGMENT: 11
    },

    /** PrivateConstants: Timeout Values
     *  Timeout values for error states.  These values are in seconds.
     *  These should not be changed unless you know exactly what you are
     *  doing.
     *
     *  TIMEOUT - Timeout multiplier. A waiting request will be considered
     *      failed after Math.floor(TIMEOUT * wait) seconds have elapsed.
     *      This defaults to 1.1, and with default wait, 66 seconds.
     *  SECONDARY_TIMEOUT - Secondary timeout multiplier. In cases where
     *      Strophe can detect early failure, it will consider the request
     *      failed if it doesn't return after
     *      Math.floor(SECONDARY_TIMEOUT * wait) seconds have elapsed.
     *      This defaults to 0.1, and with default wait, 6 seconds.
     */
    TIMEOUT: 1.1,
    SECONDARY_TIMEOUT: 0.1,

    /** Function: addNamespace
     *  This function is used to extend the current namespaces in
     *  Strophe.NS.  It takes a key and a value with the key being the
     *  name of the new namespace, with its actual value.
     *  For example:
     *  Strophe.addNamespace('PUBSUB', "http://jabber.org/protocol/pubsub");
     *
     *  Parameters:
     *    (String) name - The name under which the namespace will be
     *      referenced under Strophe.NS
     *    (String) value - The actual namespace.
     */
    addNamespace: function (name, value) {
        Strophe.NS[name] = value;
    },

    /** Function: forEachChild
     *  Map a function over some or all child elements of a given element.
     *
     *  This is a small convenience function for mapping a function over
     *  some or all of the children of an element.  If elemName is null, all
     *  children will be passed to the function, otherwise only children
     *  whose tag names match elemName will be passed.
     *
     *  Parameters:
     *    (XMLElement) elem - The element to operate on.
     *    (String) elemName - The child element tag name filter.
     *    (Function) func - The function to apply to each child.  This
     *      function should take a single argument, a DOM element.
     */
    forEachChild: function (elem, elemName, func) {
        var i, childNode;
        for (i = 0; i < elem.childNodes.length; i++) {
            childNode = elem.childNodes[i];
            if (childNode.nodeType == Strophe.ElementType.NORMAL &&
                (!elemName || this.isTagEqual(childNode, elemName))) {
                func(childNode);
            }
        }
    },

    /** Function: isTagEqual
     *  Compare an element's tag name with a string.
     *
     *  This function is case sensitive.
     *
     *  Parameters:
     *    (XMLElement) el - A DOM element.
     *    (String) name - The element name.
     *
     *  Returns:
     *    true if the element's tag name matches _el_, and false
     *    otherwise.
     */
    isTagEqual: function (el, name) {
        return el.tagName == name;
    },

    /** PrivateVariable: _xmlGenerator
     *  _Private_ variable that caches a DOM document to
     *  generate elements.
     */
    _xmlGenerator: null,

    /** PrivateFunction: _makeGenerator
     *  _Private_ function that creates a dummy XML DOM document to serve as
     *  an element and text node generator.
     */
    _makeGenerator: function () {
        var doc;
        // IE9 does implement createDocument(); however, using it will cause the browser to leak memory on page unload.
        // Here, we test for presence of createDocument() plus IE's proprietary documentMode attribute, which would be
                // less than 10 in the case of IE9 and below.
        if (document.implementation.createDocument === undefined ||
                        document.implementation.createDocument && document.documentMode && document.documentMode < 10) {
            doc = this._getIEXmlDom();
            doc.appendChild(doc.createElement('strophe'));
        } else {
            doc = document.implementation
                .createDocument('jabber:client', 'strophe', null);
        }
        return doc;
    },

    /** Function: xmlGenerator
     *  Get the DOM document to generate elements.
     *
     *  Returns:
     *    The currently used DOM document.
     */
    xmlGenerator: function () {
        if (!Strophe._xmlGenerator) {
            Strophe._xmlGenerator = Strophe._makeGenerator();
        }
        return Strophe._xmlGenerator;
    },

    /** PrivateFunction: _getIEXmlDom
     *  Gets IE xml doc object
     *
     *  Returns:
     *    A Microsoft XML DOM Object
     *  See Also:
     *    http://msdn.microsoft.com/en-us/library/ms757837%28VS.85%29.aspx
     */
    _getIEXmlDom : function() {
        var doc = null;
        var docStrings = [
            "Msxml2.DOMDocument.6.0",
            "Msxml2.DOMDocument.5.0",
            "Msxml2.DOMDocument.4.0",
            "MSXML2.DOMDocument.3.0",
            "MSXML2.DOMDocument",
            "MSXML.DOMDocument",
            "Microsoft.XMLDOM"
        ];

        for (var d = 0; d < docStrings.length; d++) {
            if (doc === null) {
                try {
                    doc = new ActiveXObject(docStrings[d]);
                } catch (e) {
                    doc = null;
                }
            } else {
                break;
            }
        }
        return doc;
    },

    /** Function: xmlElement
     *  Create an XML DOM element.
     *
     *  This function creates an XML DOM element correctly across all
     *  implementations. Note that these are not HTML DOM elements, which
     *  aren't appropriate for XMPP stanzas.
     *
     *  Parameters:
     *    (String) name - The name for the element.
     *    (Array|Object) attrs - An optional array or object containing
     *      key/value pairs to use as element attributes. The object should
     *      be in the format {'key': 'value'} or {key: 'value'}. The array
     *      should have the format [['key1', 'value1'], ['key2', 'value2']].
     *    (String) text - The text child data for the element.
     *
     *  Returns:
     *    A new XML DOM element.
     */
    xmlElement: function (name) {
        if (!name) { return null; }

        var node = Strophe.xmlGenerator().createElement(name);
        // FIXME: this should throw errors if args are the wrong type or
        // there are more than two optional args
        var a, i, k;
        for (a = 1; a < arguments.length; a++) {
            var arg = arguments[a];
            if (!arg) { continue; }
            if (typeof(arg) == "string" ||
                typeof(arg) == "number") {
                node.appendChild(Strophe.xmlTextNode(arg));
            } else if (typeof(arg) == "object" &&
                       typeof(arg.sort) == "function") {
                for (i = 0; i < arg.length; i++) {
                    var attr = arg[i];
                    if (typeof(attr) == "object" &&
                        typeof(attr.sort) == "function" &&
                        attr[1] !== undefined &&
                        attr[1] !== null) {
                        node.setAttribute(attr[0], attr[1]);
                    }
                }
            } else if (typeof(arg) == "object") {
                for (k in arg) {
                    if (arg.hasOwnProperty(k)) {
                        if (arg[k] !== undefined &&
                            arg[k] !== null) {
                            node.setAttribute(k, arg[k]);
                        }
                    }
                }
            }
        }

        return node;
    },

    /*  Function: xmlescape
     *  Excapes invalid xml characters.
     *
     *  Parameters:
     *     (String) text - text to escape.
     *
     *  Returns:
     *      Escaped text.
     */
    xmlescape: function(text) {
        text = text.replace(/\&/g, "&amp;");
        text = text.replace(/</g,  "&lt;");
        text = text.replace(/>/g,  "&gt;");
        text = text.replace(/'/g,  "&apos;");
        text = text.replace(/"/g,  "&quot;");
        return text;
    },

    /*  Function: xmlunescape
    *  Unexcapes invalid xml characters.
    *
    *  Parameters:
    *     (String) text - text to unescape.
    *
    *  Returns:
    *      Unescaped text.
    */
    xmlunescape: function(text) {
        text = text.replace(/\&amp;/g, "&");
        text = text.replace(/&lt;/g,  "<");
        text = text.replace(/&gt;/g,  ">");
        text = text.replace(/&apos;/g,  "'");
        text = text.replace(/&quot;/g,  "\"");
        return text;
    },

    /** Function: xmlTextNode
     *  Creates an XML DOM text node.
     *
     *  Provides a cross implementation version of document.createTextNode.
     *
     *  Parameters:
     *    (String) text - The content of the text node.
     *
     *  Returns:
     *    A new XML DOM text node.
     */
    xmlTextNode: function (text) {
        return Strophe.xmlGenerator().createTextNode(text);
    },

    /** Function: xmlHtmlNode
     *  Creates an XML DOM html node.
     *
     *  Parameters:
     *    (String) html - The content of the html node.
     *
     *  Returns:
     *    A new XML DOM text node.
     */
    xmlHtmlNode: function (html) {
        var node;
        //ensure text is escaped
        if (window.DOMParser) {
            var parser = new DOMParser();
            node = parser.parseFromString(html, "text/xml");
        } else {
            node = new ActiveXObject("Microsoft.XMLDOM");
            node.async="false";
            node.loadXML(html);
        }
        return node;
    },

    /** Function: getText
     *  Get the concatenation of all text children of an element.
     *
     *  Parameters:
     *    (XMLElement) elem - A DOM element.
     *
     *  Returns:
     *    A String with the concatenated text of all text element children.
     */
    getText: function (elem) {
        if (!elem) { return null; }

        var str = "";
        if (elem.childNodes.length === 0 && elem.nodeType ==
            Strophe.ElementType.TEXT) {
            str += elem.nodeValue;
        }

        for (var i = 0; i < elem.childNodes.length; i++) {
            if (elem.childNodes[i].nodeType == Strophe.ElementType.TEXT) {
                str += elem.childNodes[i].nodeValue;
            }
        }

        return Strophe.xmlescape(str);
    },

    /** Function: copyElement
     *  Copy an XML DOM element.
     *
     *  This function copies a DOM element and all its descendants and returns
     *  the new copy.
     *
     *  Parameters:
     *    (XMLElement) elem - A DOM element.
     *
     *  Returns:
     *    A new, copied DOM element tree.
     */
    copyElement: function (elem) {
        var i, el;
        if (elem.nodeType == Strophe.ElementType.NORMAL) {
            el = Strophe.xmlElement(elem.tagName);

            for (i = 0; i < elem.attributes.length; i++) {
                el.setAttribute(elem.attributes[i].nodeName,
                                elem.attributes[i].value);
            }

            for (i = 0; i < elem.childNodes.length; i++) {
                el.appendChild(Strophe.copyElement(elem.childNodes[i]));
            }
        } else if (elem.nodeType == Strophe.ElementType.TEXT) {
            el = Strophe.xmlGenerator().createTextNode(elem.nodeValue);
        }
        return el;
    },


    /** Function: createHtml
     *  Copy an HTML DOM element into an XML DOM.
     *
     *  This function copies a DOM element and all its descendants and returns
     *  the new copy.
     *
     *  Parameters:
     *    (HTMLElement) elem - A DOM element.
     *
     *  Returns:
     *    A new, copied DOM element tree.
     */
    createHtml: function (elem) {
        var i, el, j, tag, attribute, value, css, cssAttrs, attr, cssName, cssValue;
        if (elem.nodeType == Strophe.ElementType.NORMAL) {
            tag = elem.nodeName.toLowerCase(); // XHTML tags must be lower case.
            if(Strophe.XHTML.validTag(tag)) {
                try {
                    el = Strophe.xmlElement(tag);
                    for(i = 0; i < Strophe.XHTML.attributes[tag].length; i++) {
                        attribute = Strophe.XHTML.attributes[tag][i];
                        value = elem.getAttribute(attribute);
                        if(typeof value == 'undefined' || value === null || value === '' || value === false || value === 0) {
                            continue;
                        }
                        if(attribute == 'style' && typeof value == 'object') {
                            if(typeof value.cssText != 'undefined') {
                                value = value.cssText; // we're dealing with IE, need to get CSS out
                            }
                        }
                        // filter out invalid css styles
                        if(attribute == 'style') {
                            css = [];
                            cssAttrs = value.split(';');
                            for(j = 0; j < cssAttrs.length; j++) {
                                attr = cssAttrs[j].split(':');
                                cssName = attr[0].replace(/^\s*/, "").replace(/\s*$/, "").toLowerCase();
                                if(Strophe.XHTML.validCSS(cssName)) {
                                    cssValue = attr[1].replace(/^\s*/, "").replace(/\s*$/, "");
                                    css.push(cssName + ': ' + cssValue);
                                }
                            }
                            if(css.length > 0) {
                                value = css.join('; ');
                                el.setAttribute(attribute, value);
                            }
                        } else {
                            el.setAttribute(attribute, value);
                        }
                    }

                    for (i = 0; i < elem.childNodes.length; i++) {
                        el.appendChild(Strophe.createHtml(elem.childNodes[i]));
                    }
                } catch(e) { // invalid elements
                  el = Strophe.xmlTextNode('');
                }
            } else {
                el = Strophe.xmlGenerator().createDocumentFragment();
                for (i = 0; i < elem.childNodes.length; i++) {
                    el.appendChild(Strophe.createHtml(elem.childNodes[i]));
                }
            }
        } else if (elem.nodeType == Strophe.ElementType.FRAGMENT) {
            el = Strophe.xmlGenerator().createDocumentFragment();
            for (i = 0; i < elem.childNodes.length; i++) {
                el.appendChild(Strophe.createHtml(elem.childNodes[i]));
            }
        } else if (elem.nodeType == Strophe.ElementType.TEXT) {
            el = Strophe.xmlTextNode(elem.nodeValue);
        }
        return el;
    },

    /** Function: escapeNode
     *  Escape the node part (also called local part) of a JID.
     *
     *  Parameters:
     *    (String) node - A node (or local part).
     *
     *  Returns:
     *    An escaped node (or local part).
     */
    escapeNode: function (node) {
        if (typeof node !== "string") { return node; }
        return node.replace(/^\s+|\s+$/g, '')
            .replace(/\\/g,  "\\5c")
            .replace(/ /g,   "\\20")
            .replace(/\"/g,  "\\22")
            .replace(/\&/g,  "\\26")
            .replace(/\'/g,  "\\27")
            .replace(/\//g,  "\\2f")
            .replace(/:/g,   "\\3a")
            .replace(/</g,   "\\3c")
            .replace(/>/g,   "\\3e")
            .replace(/@/g,   "\\40");
    },

    /** Function: unescapeNode
     *  Unescape a node part (also called local part) of a JID.
     *
     *  Parameters:
     *    (String) node - A node (or local part).
     *
     *  Returns:
     *    An unescaped node (or local part).
     */
    unescapeNode: function (node) {
        if (typeof node !== "string") { return node; }
        return node.replace(/\\20/g, " ")
            .replace(/\\22/g, '"')
            .replace(/\\26/g, "&")
            .replace(/\\27/g, "'")
            .replace(/\\2f/g, "/")
            .replace(/\\3a/g, ":")
            .replace(/\\3c/g, "<")
            .replace(/\\3e/g, ">")
            .replace(/\\40/g, "@")
            .replace(/\\5c/g, "\\");
    },

    /** Function: getNodeFromJid
     *  Get the node portion of a JID String.
     *
     *  Parameters:
     *    (String) jid - A JID.
     *
     *  Returns:
     *    A String containing the node.
     */
    getNodeFromJid: function (jid) {
        if (jid.indexOf("@") < 0) { return null; }
        return jid.split("@")[0];
    },

    /** Function: getDomainFromJid
     *  Get the domain portion of a JID String.
     *
     *  Parameters:
     *    (String) jid - A JID.
     *
     *  Returns:
     *    A String containing the domain.
     */
    getDomainFromJid: function (jid) {
        var bare = Strophe.getBareJidFromJid(jid);
        if (bare.indexOf("@") < 0) {
            return bare;
        } else {
            var parts = bare.split("@");
            parts.splice(0, 1);
            return parts.join('@');
        }
    },

    /** Function: getResourceFromJid
     *  Get the resource portion of a JID String.
     *
     *  Parameters:
     *    (String) jid - A JID.
     *
     *  Returns:
     *    A String containing the resource.
     */
    getResourceFromJid: function (jid) {
        var s = jid.split("/");
        if (s.length < 2) { return null; }
        s.splice(0, 1);
        return s.join('/');
    },

    /** Function: getBareJidFromJid
     *  Get the bare JID from a JID String.
     *
     *  Parameters:
     *    (String) jid - A JID.
     *
     *  Returns:
     *    A String containing the bare JID.
     */
    getBareJidFromJid: function (jid) {
        return jid ? jid.split("/")[0] : null;
    },

    /** PrivateFunction: _handleError
     *  _Private_ function that properly logs an error to the console
     */
    _handleError: function (e) {
        if (typeof e.stack !== "undefined") {
            Strophe.fatal(e.stack);
        }
        if (e.sourceURL) {
            Strophe.fatal("error: " + this.handler + " " + e.sourceURL + ":" +
                          e.line + " - " + e.name + ": " + e.message);
        } else if (e.fileName) {
            Strophe.fatal("error: " + this.handler + " " +
                          e.fileName + ":" + e.lineNumber + " - " +
                          e.name + ": " + e.message);
        } else {
            Strophe.fatal("error: " + e.message);
        }
    },

    /** Function: log
     *  User overrideable logging function.
     *
     *  This function is called whenever the Strophe library calls any
     *  of the logging functions.  The default implementation of this
     *  function does nothing.  If client code wishes to handle the logging
     *  messages, it should override this with
     *  > Strophe.log = function (level, msg) {
     *  >   (user code here)
     *  > };
     *
     *  Please note that data sent and received over the wire is logged
     *  via Strophe.Connection.rawInput() and Strophe.Connection.rawOutput().
     *
     *  The different levels and their meanings are
     *
     *    DEBUG - Messages useful for debugging purposes.
     *    INFO - Informational messages.  This is mostly information like
     *      'disconnect was called' or 'SASL auth succeeded'.
     *    WARN - Warnings about potential problems.  This is mostly used
     *      to report transient connection errors like request timeouts.
     *    ERROR - Some error occurred.
     *    FATAL - A non-recoverable fatal error occurred.
     *
     *  Parameters:
     *    (Integer) level - The log level of the log message.  This will
     *      be one of the values in Strophe.LogLevel.
     *    (String) msg - The log message.
     */
    /* jshint ignore:start */
    log: function (level, msg) {
        return;
    },
    /* jshint ignore:end */

    /** Function: debug
     *  Log a message at the Strophe.LogLevel.DEBUG level.
     *
     *  Parameters:
     *    (String) msg - The log message.
     */
    debug: function(msg) {
        this.log(this.LogLevel.DEBUG, msg);
    },

    /** Function: info
     *  Log a message at the Strophe.LogLevel.INFO level.
     *
     *  Parameters:
     *    (String) msg - The log message.
     */
    info: function (msg) {
        this.log(this.LogLevel.INFO, msg);
    },

    /** Function: warn
     *  Log a message at the Strophe.LogLevel.WARN level.
     *
     *  Parameters:
     *    (String) msg - The log message.
     */
    warn: function (msg) {
        this.log(this.LogLevel.WARN, msg);
    },

    /** Function: error
     *  Log a message at the Strophe.LogLevel.ERROR level.
     *
     *  Parameters:
     *    (String) msg - The log message.
     */
    error: function (msg) {
        this.log(this.LogLevel.ERROR, msg);
    },

    /** Function: fatal
     *  Log a message at the Strophe.LogLevel.FATAL level.
     *
     *  Parameters:
     *    (String) msg - The log message.
     */
    fatal: function (msg) {
        this.log(this.LogLevel.FATAL, msg);
    },

    /** Function: serialize
     *  Render a DOM element and all descendants to a String.
     *
     *  Parameters:
     *    (XMLElement) elem - A DOM element.
     *
     *  Returns:
     *    The serialized element tree as a String.
     */
    serialize: function (elem) {
        var result;

        if (!elem) { return null; }

        if (typeof(elem.tree) === "function") {
            elem = elem.tree();
        }

        var nodeName = elem.nodeName;
        var i, child;

        if (elem.getAttribute("_realname")) {
            nodeName = elem.getAttribute("_realname");
        }

        result = "<" + nodeName;
        for (i = 0; i < elem.attributes.length; i++) {
             if(elem.attributes[i].nodeName != "_realname") {
               result += " " + elem.attributes[i].nodeName +
                   "='" + Strophe.xmlescape(elem.attributes[i].value) + "'";
             }
        }

        if (elem.childNodes.length > 0) {
            result += ">";
            for (i = 0; i < elem.childNodes.length; i++) {
                child = elem.childNodes[i];
                switch( child.nodeType ){
                  case Strophe.ElementType.NORMAL:
                    // normal element, so recurse
                    result += Strophe.serialize(child);
                    break;
                  case Strophe.ElementType.TEXT:
                    // text element to escape values
                    result += Strophe.xmlescape(child.nodeValue);
                    break;
                  case Strophe.ElementType.CDATA:
                    // cdata section so don't escape values
                    result += "<![CDATA["+child.nodeValue+"]]>";
                }
            }
            result += "</" + nodeName + ">";
        } else {
            result += "/>";
        }

        return result;
    },

    /** PrivateVariable: _requestId
     *  _Private_ variable that keeps track of the request ids for
     *  connections.
     */
    _requestId: 0,

    /** PrivateVariable: Strophe.connectionPlugins
     *  _Private_ variable Used to store plugin names that need
     *  initialization on Strophe.Connection construction.
     */
    _connectionPlugins: {},

    /** Function: addConnectionPlugin
     *  Extends the Strophe.Connection object with the given plugin.
     *
     *  Parameters:
     *    (String) name - The name of the extension.
     *    (Object) ptype - The plugin's prototype.
     */
    addConnectionPlugin: function (name, ptype) {
        Strophe._connectionPlugins[name] = ptype;
    }
};

/** Class: Strophe.Builder
 *  XML DOM builder.
 *
 *  This object provides an interface similar to JQuery but for building
 *  DOM elements easily and rapidly.  All the functions except for toString()
 *  and tree() return the object, so calls can be chained.  Here's an
 *  example using the $iq() builder helper.
 *  > $iq({to: 'you', from: 'me', type: 'get', id: '1'})
 *  >     .c('query', {xmlns: 'strophe:example'})
 *  >     .c('example')
 *  >     .toString()
 *
 *  The above generates this XML fragment
 *  > <iq to='you' from='me' type='get' id='1'>
 *  >   <query xmlns='strophe:example'>
 *  >     <example/>
 *  >   </query>
 *  > </iq>
 *  The corresponding DOM manipulations to get a similar fragment would be
 *  a lot more tedious and probably involve several helper variables.
 *
 *  Since adding children makes new operations operate on the child, up()
 *  is provided to traverse up the tree.  To add two children, do
 *  > builder.c('child1', ...).up().c('child2', ...)
 *  The next operation on the Builder will be relative to the second child.
 */

/** Constructor: Strophe.Builder
 *  Create a Strophe.Builder object.
 *
 *  The attributes should be passed in object notation.  For example
 *  > var b = new Builder('message', {to: 'you', from: 'me'});
 *  or
 *  > var b = new Builder('messsage', {'xml:lang': 'en'});
 *
 *  Parameters:
 *    (String) name - The name of the root element.
 *    (Object) attrs - The attributes for the root element in object notation.
 *
 *  Returns:
 *    A new Strophe.Builder.
 */
Strophe.Builder = function (name, attrs) {
    // Set correct namespace for jabber:client elements
    if (name == "presence" || name == "message" || name == "iq") {
        if (attrs && !attrs.xmlns) {
            attrs.xmlns = Strophe.NS.CLIENT;
        } else if (!attrs) {
            attrs = {xmlns: Strophe.NS.CLIENT};
        }
    }

    // Holds the tree being built.
    this.nodeTree = Strophe.xmlElement(name, attrs);

    // Points to the current operation node.
    this.node = this.nodeTree;
};

Strophe.Builder.prototype = {
    /** Function: tree
     *  Return the DOM tree.
     *
     *  This function returns the current DOM tree as an element object.  This
     *  is suitable for passing to functions like Strophe.Connection.send().
     *
     *  Returns:
     *    The DOM tree as a element object.
     */
    tree: function () {
        return this.nodeTree;
    },

    /** Function: toString
     *  Serialize the DOM tree to a String.
     *
     *  This function returns a string serialization of the current DOM
     *  tree.  It is often used internally to pass data to a
     *  Strophe.Request object.
     *
     *  Returns:
     *    The serialized DOM tree in a String.
     */
    toString: function () {
        return Strophe.serialize(this.nodeTree);
    },

    /** Function: up
     *  Make the current parent element the new current element.
     *
     *  This function is often used after c() to traverse back up the tree.
     *  For example, to add two children to the same element
     *  > builder.c('child1', {}).up().c('child2', {});
     *
     *  Returns:
     *    The Stophe.Builder object.
     */
    up: function () {
        this.node = this.node.parentNode;
        return this;
    },

    /** Function: root
     *  Make the root element the new current element.
     *
     *  When at a deeply nested element in the tree, this function can be used
     *  to jump back to the root of the tree, instead of having to repeatedly
     *  call up().
     *
     *  Returns:
     *    The Stophe.Builder object.
     */
    root: function () {
        this.node = this.nodeTree;
        return this;
    },

    /** Function: attrs
     *  Add or modify attributes of the current element.
     *
     *  The attributes should be passed in object notation.  This function
     *  does not move the current element pointer.
     *
     *  Parameters:
     *    (Object) moreattrs - The attributes to add/modify in object notation.
     *
     *  Returns:
     *    The Strophe.Builder object.
     */
    attrs: function (moreattrs) {
        for (var k in moreattrs) {
            if (moreattrs.hasOwnProperty(k)) {
                if (moreattrs[k] === undefined) {
                    this.node.removeAttribute(k);
                } else {
                    this.node.setAttribute(k, moreattrs[k]);
                }
            }
        }
        return this;
    },

    /** Function: c
     *  Add a child to the current element and make it the new current
     *  element.
     *
     *  This function moves the current element pointer to the child,
     *  unless text is provided.  If you need to add another child, it
     *  is necessary to use up() to go back to the parent in the tree.
     *
     *  Parameters:
     *    (String) name - The name of the child.
     *    (Object) attrs - The attributes of the child in object notation.
     *    (String) text - The text to add to the child.
     *
     *  Returns:
     *    The Strophe.Builder object.
     */
    c: function (name, attrs, text) {
        var child = Strophe.xmlElement(name, attrs, text);
        this.node.appendChild(child);
        if (typeof text !== "string" && typeof text !=="number") {
            this.node = child;
        }
        return this;
    },

    /** Function: cnode
     *  Add a child to the current element and make it the new current
     *  element.
     *
     *  This function is the same as c() except that instead of using a
     *  name and an attributes object to create the child it uses an
     *  existing DOM element object.
     *
     *  Parameters:
     *    (XMLElement) elem - A DOM element.
     *
     *  Returns:
     *    The Strophe.Builder object.
     */
    cnode: function (elem) {
        var impNode;
        var xmlGen = Strophe.xmlGenerator();
        try {
            impNode = (xmlGen.importNode !== undefined);
        } catch (e) {
            impNode = false;
        }
        var newElem = impNode ?
                      xmlGen.importNode(elem, true) :
                      Strophe.copyElement(elem);
        this.node.appendChild(newElem);
        this.node = newElem;
        return this;
    },

    /** Function: t
     *  Add a child text element.
     *
     *  This *does not* make the child the new current element since there
     *  are no children of text elements.
     *
     *  Parameters:
     *    (String) text - The text data to append to the current element.
     *
     *  Returns:
     *    The Strophe.Builder object.
     */
    t: function (text) {
        var child = Strophe.xmlTextNode(text);
        this.node.appendChild(child);
        return this;
    },

    /** Function: h
     *  Replace current element contents with the HTML passed in.
     *
     *  This *does not* make the child the new current element
     *
     *  Parameters:
     *    (String) html - The html to insert as contents of current element.
     *
     *  Returns:
     *    The Strophe.Builder object.
     */
    h: function (html) {
        var fragment = document.createElement('body');

        // force the browser to try and fix any invalid HTML tags
        fragment.innerHTML = html;

        // copy cleaned html into an xml dom
        var xhtml = Strophe.createHtml(fragment);

        while(xhtml.childNodes.length > 0) {
            this.node.appendChild(xhtml.childNodes[0]);
        }
        return this;
    }
};

/** PrivateClass: Strophe.Handler
 *  _Private_ helper class for managing stanza handlers.
 *
 *  A Strophe.Handler encapsulates a user provided callback function to be
 *  executed when matching stanzas are received by the connection.
 *  Handlers can be either one-off or persistant depending on their
 *  return value. Returning true will cause a Handler to remain active, and
 *  returning false will remove the Handler.
 *
 *  Users will not use Strophe.Handler objects directly, but instead they
 *  will use Strophe.Connection.addHandler() and
 *  Strophe.Connection.deleteHandler().
 */

/** PrivateConstructor: Strophe.Handler
 *  Create and initialize a new Strophe.Handler.
 *
 *  Parameters:
 *    (Function) handler - A function to be executed when the handler is run.
 *    (String) ns - The namespace to match.
 *    (String) name - The element name to match.
 *    (String) type - The element type to match.
 *    (String) id - The element id attribute to match.
 *    (String) from - The element from attribute to match.
 *    (Object) options - Handler options
 *
 *  Returns:
 *    A new Strophe.Handler object.
 */
Strophe.Handler = function (handler, ns, name, type, id, from, options) {
    this.handler = handler;
    this.ns = ns;
    this.name = name;
    this.type = type;
    this.id = id;
    this.options = options || {'matchBareFromJid': false, 'ignoreNamespaceFragment': false};
    // BBB: Maintain backward compatibility with old `matchBare` option
    if (this.options.matchBare) {
        Strophe.warn('The "matchBare" option is deprecated, use "matchBareFromJid" instead.');
        this.options.matchBareFromJid = this.options.matchBare;
        delete this.options.matchBare;
    }

    if (this.options.matchBareFromJid) {
        this.from = from ? Strophe.getBareJidFromJid(from) : null;
    } else {
        this.from = from;
    }
    // whether the handler is a user handler or a system handler
    this.user = true;
};

Strophe.Handler.prototype = {
    /** PrivateFunction: getNamespace
     *  Returns the XML namespace attribute on an element.
     *  If `ignoreNamespaceFragment` was passed in for this handler, then the
     *  URL fragment will be stripped.
     *
     *  Parameters:
     *    (XMLElement) elem - The XML element with the namespace.
     *
     *  Returns:
     *    The namespace, with optionally the fragment stripped.
     */
    getNamespace: function (elem) {
        var elNamespace = elem.getAttribute("xmlns");
        if (elNamespace && this.options.ignoreNamespaceFragment) {
            elNamespace = elNamespace.split('#')[0];
        }
        return elNamespace;
    },

    /** PrivateFunction: namespaceMatch
     *  Tests if a stanza matches the namespace set for this Strophe.Handler.
     *
     *  Parameters:
     *    (XMLElement) elem - The XML element to test.
     *
     *  Returns:
     *    true if the stanza matches and false otherwise.
     */
    namespaceMatch: function (elem) {
        var nsMatch = false;
        if (!this.ns) {
            return true;
        } else {
            var that = this;
            Strophe.forEachChild(elem, null, function (elem) {
                if (that.getNamespace(elem) === that.ns) {
                    nsMatch = true;
                }
            });
            nsMatch = nsMatch || this.getNamespace(elem) === this.ns;
        }
        return nsMatch;
    },

    /** PrivateFunction: isMatch
     *  Tests if a stanza matches the Strophe.Handler.
     *
     *  Parameters:
     *    (XMLElement) elem - The XML element to test.
     *
     *  Returns:
     *    true if the stanza matches and false otherwise.
     */
    isMatch: function (elem) {
        var from = elem.getAttribute('from');
        if (this.options.matchBareFromJid) {
            from = Strophe.getBareJidFromJid(from);
        }
        var elem_type = elem.getAttribute("type");
        if (this.namespaceMatch(elem) &&
            (!this.name || Strophe.isTagEqual(elem, this.name)) &&
            (!this.type || (Array.isArray(this.type) ? this.type.indexOf(elem_type) != -1 : elem_type == this.type)) &&
            (!this.id || elem.getAttribute("id") == this.id) &&
            (!this.from || from == this.from)) {
                return true;
        }
        return false;
    },

    /** PrivateFunction: run
     *  Run the callback on a matching stanza.
     *
     *  Parameters:
     *    (XMLElement) elem - The DOM element that triggered the
     *      Strophe.Handler.
     *
     *  Returns:
     *    A boolean indicating if the handler should remain active.
     */
    run: function (elem) {
        var result = null;
        try {
            result = this.handler(elem);
        } catch (e) {
            Strophe._handleError(e);
            throw e;
        }
        return result;
    },

    /** PrivateFunction: toString
     *  Get a String representation of the Strophe.Handler object.
     *
     *  Returns:
     *    A String.
     */
    toString: function () {
        return "{Handler: " + this.handler + "(" + this.name + "," +
            this.id + "," + this.ns + ")}";
    }
};

/** PrivateClass: Strophe.TimedHandler
 *  _Private_ helper class for managing timed handlers.
 *
 *  A Strophe.TimedHandler encapsulates a user provided callback that
 *  should be called after a certain period of time or at regular
 *  intervals.  The return value of the callback determines whether the
 *  Strophe.TimedHandler will continue to fire.
 *
 *  Users will not use Strophe.TimedHandler objects directly, but instead
 *  they will use Strophe.Connection.addTimedHandler() and
 *  Strophe.Connection.deleteTimedHandler().
 */

/** PrivateConstructor: Strophe.TimedHandler
 *  Create and initialize a new Strophe.TimedHandler object.
 *
 *  Parameters:
 *    (Integer) period - The number of milliseconds to wait before the
 *      handler is called.
 *    (Function) handler - The callback to run when the handler fires.  This
 *      function should take no arguments.
 *
 *  Returns:
 *    A new Strophe.TimedHandler object.
 */
Strophe.TimedHandler = function (period, handler) {
    this.period = period;
    this.handler = handler;
    this.lastCalled = new Date().getTime();
    this.user = true;
};

Strophe.TimedHandler.prototype = {
    /** PrivateFunction: run
     *  Run the callback for the Strophe.TimedHandler.
     *
     *  Returns:
     *    true if the Strophe.TimedHandler should be called again, and false
     *      otherwise.
     */
    run: function () {
        this.lastCalled = new Date().getTime();
        return this.handler();
    },

    /** PrivateFunction: reset
     *  Reset the last called time for the Strophe.TimedHandler.
     */
    reset: function () {
        this.lastCalled = new Date().getTime();
    },

    /** PrivateFunction: toString
     *  Get a string representation of the Strophe.TimedHandler object.
     *
     *  Returns:
     *    The string representation.
     */
    toString: function () {
        return "{TimedHandler: " + this.handler + "(" + this.period +")}";
    }
};

/** Class: Strophe.Connection
 *  XMPP Connection manager.
 *
 *  This class is the main part of Strophe.  It manages a BOSH or websocket
 *  connection to an XMPP server and dispatches events to the user callbacks
 *  as data arrives. It supports SASL PLAIN, SASL DIGEST-MD5, SASL SCRAM-SHA1
 *  and legacy authentication.
 *
 *  After creating a Strophe.Connection object, the user will typically
 *  call connect() with a user supplied callback to handle connection level
 *  events like authentication failure, disconnection, or connection
 *  complete.
 *
 *  The user will also have several event handlers defined by using
 *  addHandler() and addTimedHandler().  These will allow the user code to
 *  respond to interesting stanzas or do something periodically with the
 *  connection. These handlers will be active once authentication is
 *  finished.
 *
 *  To send data to the connection, use send().
 */

/** Constructor: Strophe.Connection
 *  Create and initialize a Strophe.Connection object.
 *
 *  The transport-protocol for this connection will be chosen automatically
 *  based on the given service parameter. URLs starting with "ws://" or
 *  "wss://" will use WebSockets, URLs starting with "http://", "https://"
 *  or without a protocol will use BOSH.
 *
 *  To make Strophe connect to the current host you can leave out the protocol
 *  and host part and just pass the path, e.g.
 *
 *  > var conn = new Strophe.Connection("/http-bind/");
 *
 *  Options common to both Websocket and BOSH:
 *  ------------------------------------------
 *
 *  cookies:
 *
 *  The *cookies* option allows you to pass in cookies to be added to the
 *  document. These cookies will then be included in the BOSH XMLHttpRequest
 *  or in the websocket connection.
 *
 *  The passed in value must be a map of cookie names and string values.
 *
 *  > { "myCookie": {
 *  >     "value": "1234",
 *  >     "domain": ".example.org",
 *  >     "path": "/",
 *  >     "expires": expirationDate
 *  >     }
 *  > }
 *
 *  Note that cookies can't be set in this way for other domains (i.e. cross-domain).
 *  Those cookies need to be set under those domains, for example they can be
 *  set server-side by making a XHR call to that domain to ask it to set any
 *  necessary cookies.
 *
 *  mechanisms:
 *
 *  The *mechanisms* option allows you to specify the SASL mechanisms that this
 *  instance of Strophe.Connection (and therefore your XMPP client) will
 *  support.
 *
 *  The value must be an array of objects with Strophe.SASLMechanism
 *  prototypes.
 *
 *  If nothing is specified, then the following mechanisms (and their
 *  priorities) are registered:
 *
 *      EXTERNAL - 60
 *      OAUTHBEARER - 50
 *      SCRAM-SHA1 - 40
 *      DIGEST-MD5 - 30
 *      PLAIN - 20
 *      ANONYMOUS - 10
 *
 *  WebSocket options:
 *  ------------------
 *
 *  If you want to connect to the current host with a WebSocket connection you
 *  can tell Strophe to use WebSockets through a "protocol" attribute in the
 *  optional options parameter. Valid values are "ws" for WebSocket and "wss"
 *  for Secure WebSocket.
 *  So to connect to "wss://CURRENT_HOSTNAME/xmpp-websocket" you would call
 *
 *  > var conn = new Strophe.Connection("/xmpp-websocket/", {protocol: "wss"});
 *
 *  Note that relative URLs _NOT_ starting with a "/" will also include the path
 *  of the current site.
 *
 *  Also because downgrading security is not permitted by browsers, when using
 *  relative URLs both BOSH and WebSocket connections will use their secure
 *  variants if the current connection to the site is also secure (https).
 *
 *  BOSH options:
 *  -------------
 *
 *  By adding "sync" to the options, you can control if requests will
 *  be made synchronously or not. The default behaviour is asynchronous.
 *  If you want to make requests synchronous, make "sync" evaluate to true.
 *  > var conn = new Strophe.Connection("/http-bind/", {sync: true});
 *
 *  You can also toggle this on an already established connection.
 *  > conn.options.sync = true;
 *
 *  The *customHeaders* option can be used to provide custom HTTP headers to be
 *  included in the XMLHttpRequests made.
 *
 *  The *keepalive* option can be used to instruct Strophe to maintain the
 *  current BOSH session across interruptions such as webpage reloads.
 *
 *  It will do this by caching the sessions tokens in sessionStorage, and when
 *  "restore" is called it will check whether there are cached tokens with
 *  which it can resume an existing session.
 *
 *  The *withCredentials* option should receive a Boolean value and is used to
 *  indicate wether cookies should be included in ajax requests (by default
 *  they're not).
 *  Set this value to true if you are connecting to a BOSH service
 *  and for some reason need to send cookies to it.
 *  In order for this to work cross-domain, the server must also enable
 *  credentials by setting the Access-Control-Allow-Credentials response header
 *  to "true". For most usecases however this setting should be false (which
 *  is the default).
 *  Additionally, when using Access-Control-Allow-Credentials, the
 *  Access-Control-Allow-Origin header can't be set to the wildcard "*", but
 *  instead must be restricted to actual domains.
 *
 *  The *contentType* option can be set to change the default Content-Type
 *  of "text/xml; charset=utf-8", which can be useful to reduce the amount of
 *  CORS preflight requests that are sent to the server.
 *
 *  Parameters:
 *    (String) service - The BOSH or WebSocket service URL.
 *    (Object) options - A hash of configuration options
 *
 *  Returns:
 *    A new Strophe.Connection object.
 */
Strophe.Connection = function (service, options) {
    // The service URL
    this.service = service;
    // Configuration options
    this.options = options || {};
    var proto = this.options.protocol || "";

    // Select protocal based on service or options
    if (service.indexOf("ws:") === 0 || service.indexOf("wss:") === 0 ||
            proto.indexOf("ws") === 0) {
        this._proto = new Strophe.Websocket(this);
    } else {
        this._proto = new Strophe.Bosh(this);
    }

    /* The connected JID. */
    this.jid = "";
    /* the JIDs domain */
    this.domain = null;
    /* stream:features */
    this.features = null;

    // SASL
    this._sasl_data = {};
    this.do_session = false;
    this.do_bind = false;

    // handler lists
    this.timedHandlers = [];
    this.handlers = [];
    this.removeTimeds = [];
    this.removeHandlers = [];
    this.addTimeds = [];
    this.addHandlers = [];
    this.protocolErrorHandlers = {
        'HTTP': {},
        'websocket': {}
    };

    this._idleTimeout = null;
    this._disconnectTimeout = null;

    this.authenticated = false;
    this.connected = false;
    this.disconnecting = false;
    this.do_authentication = true;
    this.paused = false;
    this.restored = false;

    this._data = [];
    this._uniqueId = 0;

    this._sasl_success_handler = null;
    this._sasl_failure_handler = null;
    this._sasl_challenge_handler = null;

    // Max retries before disconnecting
    this.maxRetries = 5;

    // Call onIdle callback every 1/10th of a second
    // XXX: setTimeout should be called only with function expressions (23974bc1)
    this._idleTimeout = setTimeout(function() {
        this._onIdle();
    }.bind(this), 100);

    utils.addCookies(this.options.cookies);
    this.registerSASLMechanisms(this.options.mechanisms);

    // initialize plugins
    for (var k in Strophe._connectionPlugins) {
        if (Strophe._connectionPlugins.hasOwnProperty(k)) {
            var ptype = Strophe._connectionPlugins[k];
            // jslint complaints about the below line, but this is fine
            var F = function () {}; // jshint ignore:line
            F.prototype = ptype;
            this[k] = new F();
            this[k].init(this);
        }
    }
};

Strophe.Connection.prototype = {
    /** Function: reset
     *  Reset the connection.
     *
     *  This function should be called after a connection is disconnected
     *  before that connection is reused.
     */
    reset: function () {
        this._proto._reset();

        // SASL
        this.do_session = false;
        this.do_bind = false;

        // handler lists
        this.timedHandlers = [];
        this.handlers = [];
        this.removeTimeds = [];
        this.removeHandlers = [];
        this.addTimeds = [];
        this.addHandlers = [];

        this.authenticated = false;
        this.connected = false;
        this.disconnecting = false;
        this.restored = false;

        this._data = [];
        this._requests = [];
        this._uniqueId = 0;
    },

    /** Function: pause
     *  Pause the request manager.
     *
     *  This will prevent Strophe from sending any more requests to the
     *  server.  This is very useful for temporarily pausing
     *  BOSH-Connections while a lot of send() calls are happening quickly.
     *  This causes Strophe to send the data in a single request, saving
     *  many request trips.
     */
    pause: function () {
        this.paused = true;
    },

    /** Function: resume
     *  Resume the request manager.
     *
     *  This resumes after pause() has been called.
     */
    resume: function () {
        this.paused = false;
    },

    /** Function: getUniqueId
     *  Generate a unique ID for use in <iq/> elements.
     *
     *  All <iq/> stanzas are required to have unique id attributes.  This
     *  function makes creating these easy.  Each connection instance has
     *  a counter which starts from zero, and the value of this counter
     *  plus a colon followed by the suffix becomes the unique id. If no
     *  suffix is supplied, the counter is used as the unique id.
     *
     *  Suffixes are used to make debugging easier when reading the stream
     *  data, and their use is recommended.  The counter resets to 0 for
     *  every new connection for the same reason.  For connections to the
     *  same server that authenticate the same way, all the ids should be
     *  the same, which makes it easy to see changes.  This is useful for
     *  automated testing as well.
     *
     *  Parameters:
     *    (String) suffix - A optional suffix to append to the id.
     *
     *  Returns:
     *    A unique string to be used for the id attribute.
     */
    getUniqueId: function(suffix) {
        var uuid = 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, function(c) {
            var r = Math.random() * 16 | 0,
                v = c == 'x' ? r : r & 0x3 | 0x8;
            return v.toString(16);
        });
        if (typeof(suffix) == "string" || typeof(suffix) == "number") {
            return uuid + ":" + suffix;
        } else {
            return uuid + "";
        }
    },

    /** Function: addProtocolErrorHandler
     *  Register a handler function for when a protocol (websocker or HTTP)
     *  error occurs.
     *
     *  NOTE: Currently only HTTP errors for BOSH requests are handled.
     *  Patches that handle websocket errors would be very welcome.
     *
     *  Parameters:
     *    (String) protocol - 'HTTP' or 'websocket' 
     *    (Integer) status_code - Error status code (e.g 500, 400 or 404)
     *    (Function) callback - Function that will fire on Http error
     *
     *  Example:
     *  function onError(err_code){
     *    //do stuff
     *  }
     *
     *  var conn = Strophe.connect('http://example.com/http-bind');
     *  conn.addProtocolErrorHandler('HTTP', 500, onError);
     *  // Triggers HTTP 500 error and onError handler will be called
     *  conn.connect('user_jid@incorrect_jabber_host', 'secret', onConnect);
     */
    addProtocolErrorHandler: function(protocol, status_code, callback){
        this.protocolErrorHandlers[protocol][status_code] = callback;
    },


    /** Function: connect
     *  Starts the connection process.
     *
     *  As the connection process proceeds, the user supplied callback will
     *  be triggered multiple times with status updates.  The callback
     *  should take two arguments - the status code and the error condition.
     *
     *  The status code will be one of the values in the Strophe.Status
     *  constants.  The error condition will be one of the conditions
     *  defined in RFC 3920 or the condition 'strophe-parsererror'.
     *
     *  The Parameters _wait_, _hold_ and _route_ are optional and only relevant
     *  for BOSH connections. Please see XEP 124 for a more detailed explanation
     *  of the optional parameters.
     *
     *  Parameters:
     *    (String) jid - The user's JID.  This may be a bare JID,
     *      or a full JID.  If a node is not supplied, SASL ANONYMOUS
     *      authentication will be attempted.
     *    (String) pass - The user's password.
     *    (Function) callback - The connect callback function.
     *    (Integer) wait - The optional HTTPBIND wait value.  This is the
     *      time the server will wait before returning an empty result for
     *      a request.  The default setting of 60 seconds is recommended.
     *    (Integer) hold - The optional HTTPBIND hold value.  This is the
     *      number of connections the server will hold at one time.  This
     *      should almost always be set to 1 (the default).
     *    (String) route - The optional route value.
     *    (String) authcid - The optional alternative authentication identity
     *      (username) if intending to impersonate another user.
     *      When using the SASL-EXTERNAL authentication mechanism, for example
     *      with client certificates, then the authcid value is used to
     *      determine whether an authorization JID (authzid) should be sent to
     *      the server. The authzid should not be sent to the server if the
     *      authzid and authcid are the same. So to prevent it from being sent
     *      (for example when the JID is already contained in the client
     *      certificate), set authcid to that same JID. See XEP-178 for more
     *      details.
     */
    connect: function (jid, pass, callback, wait, hold, route, authcid) {
        this.jid = jid;
        /** Variable: authzid
         *  Authorization identity.
         */
        this.authzid = Strophe.getBareJidFromJid(this.jid);

        /** Variable: authcid
         *  Authentication identity (User name).
         */
        this.authcid = authcid || Strophe.getNodeFromJid(this.jid);

        /** Variable: pass
         *  Authentication identity (User password).
         */
        this.pass = pass;

        /** Variable: servtype
         *  Digest MD5 compatibility.
         */
        this.servtype = "xmpp";

        this.connect_callback = callback;
        this.disconnecting = false;
        this.connected = false;
        this.authenticated = false;
        this.restored = false;

        // parse jid for domain
        this.domain = Strophe.getDomainFromJid(this.jid);

        this._changeConnectStatus(Strophe.Status.CONNECTING, null);

        this._proto._connect(wait, hold, route);
    },

    /** Function: attach
     *  Attach to an already created and authenticated BOSH session.
     *
     *  This function is provided to allow Strophe to attach to BOSH
     *  sessions which have been created externally, perhaps by a Web
     *  application.  This is often used to support auto-login type features
     *  without putting user credentials into the page.
     *
     *  Parameters:
     *    (String) jid - The full JID that is bound by the session.
     *    (String) sid - The SID of the BOSH session.
     *    (String) rid - The current RID of the BOSH session.  This RID
     *      will be used by the next request.
     *    (Function) callback The connect callback function.
     *    (Integer) wait - The optional HTTPBIND wait value.  This is the
     *      time the server will wait before returning an empty result for
     *      a request.  The default setting of 60 seconds is recommended.
     *      Other settings will require tweaks to the Strophe.TIMEOUT value.
     *    (Integer) hold - The optional HTTPBIND hold value.  This is the
     *      number of connections the server will hold at one time.  This
     *      should almost always be set to 1 (the default).
     *    (Integer) wind - The optional HTTBIND window value.  This is the
     *      allowed range of request ids that are valid.  The default is 5.
     */
    attach: function (jid, sid, rid, callback, wait, hold, wind) {
        if (this._proto instanceof Strophe.Bosh) {
            this._proto._attach(jid, sid, rid, callback, wait, hold, wind);
        } else {
            throw {
                name: 'StropheSessionError',
                message: 'The "attach" method can only be used with a BOSH connection.'
            };
        }
    },

    /** Function: restore
     *  Attempt to restore a cached BOSH session.
     *
     *  This function is only useful in conjunction with providing the
     *  "keepalive":true option when instantiating a new Strophe.Connection.
     *
     *  When "keepalive" is set to true, Strophe will cache the BOSH tokens
     *  RID (Request ID) and SID (Session ID) and then when this function is
     *  called, it will attempt to restore the session from those cached
     *  tokens.
     *
     *  This function must therefore be called instead of connect or attach.
     *
     *  For an example on how to use it, please see examples/restore.js
     *
     *  Parameters:
     *    (String) jid - The user's JID.  This may be a bare JID or a full JID.
     *    (Function) callback - The connect callback function.
     *    (Integer) wait - The optional HTTPBIND wait value.  This is the
     *      time the server will wait before returning an empty result for
     *      a request.  The default setting of 60 seconds is recommended.
     *    (Integer) hold - The optional HTTPBIND hold value.  This is the
     *      number of connections the server will hold at one time.  This
     *      should almost always be set to 1 (the default).
     *    (Integer) wind - The optional HTTBIND window value.  This is the
     *      allowed range of request ids that are valid.  The default is 5.
     */
    restore: function (jid, callback, wait, hold, wind) {
        if (this._sessionCachingSupported()) {
            this._proto._restore(jid, callback, wait, hold, wind);
        } else {
            throw {
                name: 'StropheSessionError',
                message: 'The "restore" method can only be used with a BOSH connection.'
            };
        }
    },

    /** PrivateFunction: _sessionCachingSupported
     * Checks whether sessionStorage and JSON are supported and whether we're
     * using BOSH.
     */
    _sessionCachingSupported: function () {
        if (this._proto instanceof Strophe.Bosh) {
            if (!JSON) { return false; }
            try {
                window.sessionStorage.setItem('_strophe_', '_strophe_');
                window.sessionStorage.removeItem('_strophe_');
            } catch (e) {
                return false;
            }
            return true;
        }
        return false;
    },

    /** Function: xmlInput
     *  User overrideable function that receives XML data coming into the
     *  connection.
     *
     *  The default function does nothing.  User code can override this with
     *  > Strophe.Connection.xmlInput = function (elem) {
     *  >   (user code)
     *  > };
     *
     *  Due to limitations of current Browsers' XML-Parsers the opening and closing
     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
     *
     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
     *  <Strophe.Bosh.strip> if you want to strip this tag.
     *
     *  Parameters:
     *    (XMLElement) elem - The XML data received by the connection.
     */
    /* jshint unused:false */
    xmlInput: function (elem) {
        return;
    },
    /* jshint unused:true */

    /** Function: xmlOutput
     *  User overrideable function that receives XML data sent to the
     *  connection.
     *
     *  The default function does nothing.  User code can override this with
     *  > Strophe.Connection.xmlOutput = function (elem) {
     *  >   (user code)
     *  > };
     *
     *  Due to limitations of current Browsers' XML-Parsers the opening and closing
     *  <stream> tag for WebSocket-Connoctions will be passed as selfclosing here.
     *
     *  BOSH-Connections will have all stanzas wrapped in a <body> tag. See
     *  <Strophe.Bosh.strip> if you want to strip this tag.
     *
     *  Parameters:
     *    (XMLElement) elem - The XMLdata sent by the connection.
     */
    /* jshint unused:false */
    xmlOutput: function (elem) {
        return;
    },
    /* jshint unused:true */

    /** Function: rawInput
     *  User overrideable function that receives raw data coming into the
     *  connection.
     *
     *  The default function does nothing.  User code can override this with
     *  > Strophe.Connection.rawInput = function (data) {
     *  >   (user code)
     *  > };
     *
     *  Parameters:
     *    (String) data - The data received by the connection.
     */
    /* jshint unused:false */
    rawInput: function (data) {
        return;
    },
    /* jshint unused:true */

    /** Function: rawOutput
     *  User overrideable function that receives raw data sent to the
     *  connection.
     *
     *  The default function does nothing.  User code can override this with
     *  > Strophe.Connection.rawOutput = function (data) {
     *  >   (user code)
     *  > };
     *
     *  Parameters:
     *    (String) data - The data sent by the connection.
     */
    /* jshint unused:false */
    rawOutput: function (data) {
        return;
    },
    /* jshint unused:true */

    /** Function: nextValidRid
     *  User overrideable function that receives the new valid rid.
     *
     *  The default function does nothing. User code can override this with
     *  > Strophe.Connection.nextValidRid = function (rid) {
     *  >    (user code)
     *  > };
     *
     *  Parameters:
     *    (Number) rid - The next valid rid
     */
    /* jshint unused:false */
    nextValidRid: function (rid) {
        return;
    },
    /* jshint unused:true */

    /** Function: send
     *  Send a stanza.
     *
     *  This function is called to push data onto the send queue to
     *  go out over the wire.  Whenever a request is sent to the BOSH
     *  server, all pending data is sent and the queue is flushed.
     *
     *  Parameters:
     *    (XMLElement |
     *     [XMLElement] |
     *     Strophe.Builder) elem - The stanza to send.
     */
    send: function (elem) {
        if (elem === null) { return ; }
        if (typeof(elem.sort) === "function") {
            for (var i = 0; i < elem.length; i++) {
                this._queueData(elem[i]);
            }
        } else if (typeof(elem.tree) === "function") {
            this._queueData(elem.tree());
        } else {
            this._queueData(elem);
        }

        this._proto._send();
    },

    /** Function: flush
     *  Immediately send any pending outgoing data.
     *
     *  Normally send() queues outgoing data until the next idle period
     *  (100ms), which optimizes network use in the common cases when
     *  several send()s are called in succession. flush() can be used to
     *  immediately send all pending data.
     */
    flush: function () {
        // cancel the pending idle period and run the idle function
        // immediately
        clearTimeout(this._idleTimeout);
        this._onIdle();
    },

    /** Function: sendIQ
     *  Helper function to send IQ stanzas.
     *
     *  Parameters:
     *    (XMLElement) elem - The stanza to send.
     *    (Function) callback - The callback function for a successful request.
     *    (Function) errback - The callback function for a failed or timed
     *      out request.  On timeout, the stanza will be null.
     *    (Integer) timeout - The time specified in milliseconds for a
     *      timeout to occur.
     *
     *  Returns:
     *    The id used to send the IQ.
    */
    sendIQ: function(elem, callback, errback, timeout) {
        var timeoutHandler = null;
        var that = this;

        if (typeof(elem.tree) === "function") {
            elem = elem.tree();
        }
        var id = elem.getAttribute('id');
        if (!id) { // inject id if not found
            id = this.getUniqueId("sendIQ");
            elem.setAttribute("id", id);
        }

        var handler = this.addHandler(function (stanza) {
            // remove timeout handler if there is one
            if (timeoutHandler) {
                that.deleteTimedHandler(timeoutHandler);
            }
            var iqtype = stanza.getAttribute('type');
            if (iqtype == 'result') {
                if (callback) {
                    callback(stanza);
                }
            } else if (iqtype == 'error') {
                if (errback) {
                    errback(stanza);
                }
            } else {
                throw {
                    name: "StropheError",
                    message: "Got bad IQ type of " + iqtype
                };
            }
        }, null, 'iq', ['error', 'result'], id);

        // if timeout specified, set up a timeout handler.
        if (timeout) {
            timeoutHandler = this.addTimedHandler(timeout, function () {
                // get rid of normal handler
                that.deleteHandler(handler);
                // call errback on timeout with null stanza
                if (errback) {
                    errback(null);
                }
                return false;
            });
        }
        this.send(elem);
        return id;
    },

    /** PrivateFunction: _queueData
     *  Queue outgoing data for later sending.  Also ensures that the data
     *  is a DOMElement.
     */
    _queueData: function (element) {
        if (element === null ||
            !element.tagName ||
            !element.childNodes) {
            throw {
                name: "StropheError",
                message: "Cannot queue non-DOMElement."
            };
        }
        this._data.push(element);
    },

    /** PrivateFunction: _sendRestart
     *  Send an xmpp:restart stanza.
     */
    _sendRestart: function () {
        this._data.push("restart");
        this._proto._sendRestart();
        // XXX: setTimeout should be called only with function expressions (23974bc1)
        this._idleTimeout = setTimeout(function() {
            this._onIdle();
        }.bind(this), 100);
    },

    /** Function: addTimedHandler
     *  Add a timed handler to the connection.
     *
     *  This function adds a timed handler.  The provided handler will
     *  be called every period milliseconds until it returns false,
     *  the connection is terminated, or the handler is removed.  Handlers
     *  that wish to continue being invoked should return true.
     *
     *  Because of method binding it is necessary to save the result of
     *  this function if you wish to remove a handler with
     *  deleteTimedHandler().
     *
     *  Note that user handlers are not active until authentication is
     *  successful.
     *
     *  Parameters:
     *    (Integer) period - The period of the handler.
     *    (Function) handler - The callback function.
     *
     *  Returns:
     *    A reference to the handler that can be used to remove it.
     */
    addTimedHandler: function (period, handler) {
        var thand = new Strophe.TimedHandler(period, handler);
        this.addTimeds.push(thand);
        return thand;
    },

    /** Function: deleteTimedHandler
     *  Delete a timed handler for a connection.
     *
     *  This function removes a timed handler from the connection.  The
     *  handRef parameter is *not* the function passed to addTimedHandler(),
     *  but is the reference returned from addTimedHandler().
     *
     *  Parameters:
     *    (Strophe.TimedHandler) handRef - The handler reference.
     */
    deleteTimedHandler: function (handRef) {
        // this must be done in the Idle loop so that we don't change
        // the handlers during iteration
        this.removeTimeds.push(handRef);
    },

    /** Function: addHandler
     *  Add a stanza handler for the connection.
     *
     *  This function adds a stanza handler to the connection.  The
     *  handler callback will be called for any stanza that matches
     *  the parameters.  Note that if multiple parameters are supplied,
     *  they must all match for the handler to be invoked.
     *
     *  The handler will receive the stanza that triggered it as its argument.
     *  *The handler should return true if it is to be invoked again;
     *  returning false will remove the handler after it returns.*
     *
     *  As a convenience, the ns parameters applies to the top level element
     *  and also any of its immediate children.  This is primarily to make
     *  matching /iq/query elements easy.
     *
     *  Options
     *  ~~~~~~~
     *  With the options argument, you can specify boolean flags that affect how
     *  matches are being done.
     *
     *  Currently two flags exist:
     *
     *  - matchBareFromJid:
     *      When set to true, the from parameter and the
     *      from attribute on the stanza will be matched as bare JIDs instead
     *      of full JIDs. To use this, pass {matchBareFromJid: true} as the
     *      value of options. The default value for matchBareFromJid is false.
     *
     *  - ignoreNamespaceFragment:
     *      When set to true, a fragment specified on the stanza's namespace
     *      URL will be ignored when it's matched with the one configured for
     *      the handler.
     *
     *      This means that if you register like this:
     *      >   connection.addHandler(
     *      >       handler,
     *      >       'http://jabber.org/protocol/muc',
     *      >       null, null, null, null,
     *      >       {'ignoreNamespaceFragment': true}
     *      >   );
     *
     *      Then a stanza with XML namespace of
     *      'http://jabber.org/protocol/muc#user' will also be matched. If
     *      'ignoreNamespaceFragment' is false, then only stanzas with
     *      'http://jabber.org/protocol/muc' will be matched.
     *
     *  Deleting the handler
     *  ~~~~~~~~~~~~~~~~~~~~
     *  The return value should be saved if you wish to remove the handler
     *  with deleteHandler().
     *
     *  Parameters:
     *    (Function) handler - The user callback.
     *    (String) ns - The namespace to match.
     *    (String) name - The stanza name to match.
     *    (String|Array) type - The stanza type (or types if an array) to match.
     *    (String) id - The stanza id attribute to match.
     *    (String) from - The stanza from attribute to match.
     *    (String) options - The handler options
     *
     *  Returns:
     *    A reference to the handler that can be used to remove it.
     */
    addHandler: function (handler, ns, name, type, id, from, options) {
        var hand = new Strophe.Handler(handler, ns, name, type, id, from, options);
        this.addHandlers.push(hand);
        return hand;
    },

    /** Function: deleteHandler
     *  Delete a stanza handler for a connection.
     *
     *  This function removes a stanza handler from the connection.  The
     *  handRef parameter is *not* the function passed to addHandler(),
     *  but is the reference returned from addHandler().
     *
     *  Parameters:
     *    (Strophe.Handler) handRef - The handler reference.
     */
    deleteHandler: function (handRef) {
        // this must be done in the Idle loop so that we don't change
        // the handlers during iteration
        this.removeHandlers.push(handRef);
        // If a handler is being deleted while it is being added,
        // prevent it from getting added
        var i = this.addHandlers.indexOf(handRef);
        if (i >= 0) {
            this.addHandlers.splice(i, 1);
        }
    },

    /** Function: registerSASLMechanisms
     *
     * Register the SASL mechanisms which will be supported by this instance of
     * Strophe.Connection (i.e. which this XMPP client will support).
     *
     *  Parameters:
     *    (Array) mechanisms - Array of objects with Strophe.SASLMechanism prototypes
     *
     */
    registerSASLMechanisms: function (mechanisms) {
        this.mechanisms = {};
        mechanisms = mechanisms || [
            Strophe.SASLAnonymous,
            Strophe.SASLExternal,
            Strophe.SASLMD5,
            Strophe.SASLOAuthBearer,
            Strophe.SASLPlain,
            Strophe.SASLSHA1
        ];
        mechanisms.forEach(this.registerSASLMechanism.bind(this));
    },

    /** Function: registerSASLMechanism
     *
     * Register a single SASL mechanism, to be supported by this client.
     *
     *  Parameters:
     *    (Object) mechanism - Object with a Strophe.SASLMechanism prototype
     *
     */
    registerSASLMechanism: function (mechanism) {
        this.mechanisms[mechanism.prototype.name] = mechanism;
    },

    /** Function: disconnect
     *  Start the graceful disconnection process.
     *
     *  This function starts the disconnection process.  This process starts
     *  by sending unavailable presence and sending BOSH body of type
     *  terminate.  A timeout handler makes sure that disconnection happens
     *  even if the BOSH server does not respond.
     *  If the Connection object isn't connected, at least tries to abort all pending requests
     *  so the connection object won't generate successful requests (which were already opened).
     *
     *  The user supplied connection callback will be notified of the
     *  progress as this process happens.
     *
     *  Parameters:
     *    (String) reason - The reason the disconnect is occuring.
     */
    disconnect: function (reason) {
        this._changeConnectStatus(Strophe.Status.DISCONNECTING, reason);

        Strophe.info("Disconnect was called because: " + reason);
        if (this.connected) {
            var pres = false;
            this.disconnecting = true;
            if (this.authenticated) {
                pres = $pres({
                    xmlns: Strophe.NS.CLIENT,
                    type: 'unavailable'
                });
            }
            // setup timeout handler
            this._disconnectTimeout = this._addSysTimedHandler(
                3000, this._onDisconnectTimeout.bind(this));
            this._proto._disconnect(pres);
        } else {
            Strophe.info("Disconnect was called before Strophe connected to the server");
            this._proto._abortAllRequests();
        }
    },

    /** PrivateFunction: _changeConnectStatus
     *  _Private_ helper function that makes sure plugins and the user's
     *  callback are notified of connection status changes.
     *
     *  Parameters:
     *    (Integer) status - the new connection status, one of the values
     *      in Strophe.Status
     *    (String) condition - the error condition or null
     */
    _changeConnectStatus: function (status, condition) {
        // notify all plugins listening for status changes
        for (var k in Strophe._connectionPlugins) {
            if (Strophe._connectionPlugins.hasOwnProperty(k)) {
                var plugin = this[k];
                if (plugin.statusChanged) {
                    try {
                        plugin.statusChanged(status, condition);
                    } catch (err) {
                        Strophe.error("" + k + " plugin caused an exception " +
                                      "changing status: " + err);
                    }
                }
            }
        }

        // notify the user's callback
        if (this.connect_callback) {
            try {
                this.connect_callback(status, condition);
            } catch (e) {
                Strophe._handleError(e);
                Strophe.error(
                    "User connection callback caused an "+"exception: "+e);
            }
        }
    },

    /** PrivateFunction: _doDisconnect
     *  _Private_ function to disconnect.
     *
     *  This is the last piece of the disconnection logic.  This resets the
     *  connection and alerts the user's connection callback.
     */
    _doDisconnect: function (condition) {
        if (typeof this._idleTimeout == "number") {
            clearTimeout(this._idleTimeout);
        }

        // Cancel Disconnect Timeout
        if (this._disconnectTimeout !== null) {
            this.deleteTimedHandler(this._disconnectTimeout);
            this._disconnectTimeout = null;
        }

        Strophe.info("_doDisconnect was called");
        this._proto._doDisconnect();

        this.authenticated = false;
        this.disconnecting = false;
        this.restored = false;

        // delete handlers
        this.handlers = [];
        this.timedHandlers = [];
        this.removeTimeds = [];
        this.removeHandlers = [];
        this.addTimeds = [];
        this.addHandlers = [];

        // tell the parent we disconnected
        this._changeConnectStatus(Strophe.Status.DISCONNECTED, condition);
        this.connected = false;
    },

    /** PrivateFunction: _dataRecv
     *  _Private_ handler to processes incoming data from the the connection.
     *
     *  Except for _connect_cb handling the initial connection request,
     *  this function handles the incoming data for all requests.  This
     *  function also fires stanza handlers that match each incoming
     *  stanza.
     *
     *  Parameters:
     *    (Strophe.Request) req - The request that has data ready.
     *    (string) req - The stanza a raw string (optiona).
     */
    _dataRecv: function (req, raw) {
        Strophe.info("_dataRecv called");
        var elem = this._proto._reqToData(req);
        if (elem === null) { return; }

        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
            if (elem.nodeName === this._proto.strip && elem.childNodes.length) {
                this.xmlInput(elem.childNodes[0]);
            } else {
                this.xmlInput(elem);
            }
        }
        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
            if (raw) {
                this.rawInput(raw);
            } else {
                this.rawInput(Strophe.serialize(elem));
            }
        }

        // remove handlers scheduled for deletion
        var i, hand;
        while (this.removeHandlers.length > 0) {
            hand = this.removeHandlers.pop();
            i = this.handlers.indexOf(hand);
            if (i >= 0) {
                this.handlers.splice(i, 1);
            }
        }

        // add handlers scheduled for addition
        while (this.addHandlers.length > 0) {
            this.handlers.push(this.addHandlers.pop());
        }

        // handle graceful disconnect
        if (this.disconnecting && this._proto._emptyQueue()) {
            this._doDisconnect();
            return;
        }

        var type = elem.getAttribute("type");
        var cond, conflict;
        if (type !== null && type == "terminate") {
            // Don't process stanzas that come in after disconnect
            if (this.disconnecting) {
                return;
            }

            // an error occurred
            cond = elem.getAttribute("condition");
            conflict = elem.getElementsByTagName("conflict");
            if (cond !== null) {
                if (cond == "remote-stream-error" && conflict.length > 0) {
                    cond = "conflict";
                }
                this._changeConnectStatus(Strophe.Status.CONNFAIL, cond);
            } else {
                this._changeConnectStatus(Strophe.Status.CONNFAIL, "unknown");
            }
            this._doDisconnect(cond);
            return;
        }

        // send each incoming stanza through the handler chain
        var that = this;
        Strophe.forEachChild(elem, null, function (child) {
            var i, newList;
            // process handlers
            newList = that.handlers;
            that.handlers = [];
            for (i = 0; i < newList.length; i++) {
                var hand = newList[i];
                // encapsulate 'handler.run' not to lose the whole handler list if
                // one of the handlers throws an exception
                try {
                    if (hand.isMatch(child) &&
                        (that.authenticated || !hand.user)) {
                        if (hand.run(child)) {
                            that.handlers.push(hand);
                        }
                    } else {
                        that.handlers.push(hand);
                    }
                } catch(e) {
                    // if the handler throws an exception, we consider it as false
                    Strophe.warn('Removing Strophe handlers due to uncaught exception: '+e.message);
                }
            }
        });
    },


    /** Attribute: mechanisms
     *  SASL Mechanisms available for Connection.
     */
    mechanisms: {},

    /** PrivateFunction: _connect_cb
     *  _Private_ handler for initial connection request.
     *
     *  This handler is used to process the initial connection request
     *  response from the BOSH server. It is used to set up authentication
     *  handlers and start the authentication process.
     *
     *  SASL authentication will be attempted if available, otherwise
     *  the code will fall back to legacy authentication.
     *
     *  Parameters:
     *    (Strophe.Request) req - The current request.
     *    (Function) _callback - low level (xmpp) connect callback function.
     *      Useful for plugins with their own xmpp connect callback (when their)
     *      want to do something special).
     */
    _connect_cb: function (req, _callback, raw) {
        Strophe.info("_connect_cb was called");
        this.connected = true;

        var bodyWrap;
        try {
            bodyWrap = this._proto._reqToData(req);
        } catch (e) {
            if (e != "badformat") { throw e; }
            this._changeConnectStatus(Strophe.Status.CONNFAIL, 'bad-format');
            this._doDisconnect('bad-format');
        }
        if (!bodyWrap) { return; }

        if (this.xmlInput !== Strophe.Connection.prototype.xmlInput) {
            if (bodyWrap.nodeName === this._proto.strip && bodyWrap.childNodes.length) {
                this.xmlInput(bodyWrap.childNodes[0]);
            } else {
                this.xmlInput(bodyWrap);
            }
        }
        if (this.rawInput !== Strophe.Connection.prototype.rawInput) {
            if (raw) {
                this.rawInput(raw);
            } else {
                this.rawInput(Strophe.serialize(bodyWrap));
            }
        }

        var conncheck = this._proto._connect_cb(bodyWrap);
        if (conncheck === Strophe.Status.CONNFAIL) {
            return;
        }

        // Check for the stream:features tag
        var hasFeatures;
        if (bodyWrap.getElementsByTagNameNS) {
            hasFeatures = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, "features").length > 0;
        } else {
            hasFeatures = bodyWrap.getElementsByTagName("stream:features").length > 0 ||
                            bodyWrap.getElementsByTagName("features").length > 0;
        }
        if (!hasFeatures) {
            this._proto._no_auth_received(_callback);
            return;
        }

        var matched = [], i, mech;
        var mechanisms = bodyWrap.getElementsByTagName("mechanism");
        if (mechanisms.length > 0) {
            for (i = 0; i < mechanisms.length; i++) {
                mech = Strophe.getText(mechanisms[i]);
                if (this.mechanisms[mech]) matched.push(this.mechanisms[mech]);
            }
        }
        if (matched.length === 0) {
            if (bodyWrap.getElementsByTagName("auth").length === 0) {
                // There are no matching SASL mechanisms and also no legacy
                // auth available.
                this._proto._no_auth_received(_callback);
                return;
            }
        }
        if (this.do_authentication !== false) {
            this.authenticate(matched);
        }
    },

    /** Function: sortMechanismsByPriority
     *
     *  Sorts an array of objects with prototype SASLMechanism according to
     *  their priorities.
     *
     *  Parameters:
     *    (Array) mechanisms - Array of SASL mechanisms.
     *
     */
    sortMechanismsByPriority: function (mechanisms) {
        // Sorting mechanisms according to priority.
        var i, j, higher, swap;
        for (i = 0; i < mechanisms.length - 1; ++i) {
            higher = i;
            for (j = i + 1; j < mechanisms.length; ++j) {
                if (mechanisms[j].prototype.priority > mechanisms[higher].prototype.priority) {
                    higher = j;
                }
            }
            if (higher != i) {
                swap = mechanisms[i];
                mechanisms[i] = mechanisms[higher];
                mechanisms[higher] = swap;
            }
        }
        return mechanisms;
    },

    /** PrivateFunction: _attemptSASLAuth
     *
     *  Iterate through an array of SASL mechanisms and attempt authentication
     *  with the highest priority (enabled) mechanism.
     *
     *  Parameters:
     *    (Array) mechanisms - Array of SASL mechanisms.
     *
     *  Returns:
     *    (Boolean) mechanism_found - true or false, depending on whether a
     *          valid SASL mechanism was found with which authentication could be
     *          started.
     */
    _attemptSASLAuth: function (mechanisms) {
        mechanisms = this.sortMechanismsByPriority(mechanisms || []);
        var i = 0, mechanism_found = false;
        for (i = 0; i < mechanisms.length; ++i) {
            if (!mechanisms[i].prototype.test(this)) {
                continue;
            }
            this._sasl_success_handler = this._addSysHandler(
                this._sasl_success_cb.bind(this), null,
                "success", null, null);
            this._sasl_failure_handler = this._addSysHandler(
                this._sasl_failure_cb.bind(this), null,
                "failure", null, null);
            this._sasl_challenge_handler = this._addSysHandler(
                this._sasl_challenge_cb.bind(this), null,
                "challenge", null, null);

            this._sasl_mechanism = new mechanisms[i]();
            this._sasl_mechanism.onStart(this);

            var request_auth_exchange = $build("auth", {
                xmlns: Strophe.NS.SASL,
                mechanism: this._sasl_mechanism.name
            });
            if (this._sasl_mechanism.isClientFirst) {
                var response = this._sasl_mechanism.onChallenge(this, null);
                request_auth_exchange.t(Base64.encode(response));
            }
            this.send(request_auth_exchange.tree());
            mechanism_found = true;
            break;
        }
        return mechanism_found;
    },

    /** PrivateFunction: _attemptLegacyAuth
     *
     *  Attempt legacy (i.e. non-SASL) authentication.
     *
     */
    _attemptLegacyAuth: function () {
        if (Strophe.getNodeFromJid(this.jid) === null) {
            // we don't have a node, which is required for non-anonymous
            // client connections
            this._changeConnectStatus(
                Strophe.Status.CONNFAIL,
                'x-strophe-bad-non-anon-jid'
            );
            this.disconnect('x-strophe-bad-non-anon-jid');
        } else {
            // Fall back to legacy authentication
            this._changeConnectStatus(Strophe.Status.AUTHENTICATING, null);
            this._addSysHandler(
                this._auth1_cb.bind(this),
                null, null, null, "_auth_1"
            );
            this.send($iq({
                    'type': "get",
                    'to': this.domain,
                    'id': "_auth_1"
                }).c("query", {xmlns: Strophe.NS.AUTH})
                .c("username", {}).t(Strophe.getNodeFromJid(this.jid))
                .tree());
        }
    },

    /** Function: authenticate
     * Set up authentication
     *
     *  Continues the initial connection request by setting up authentication
     *  handlers and starting the authentication process.
     *
     *  SASL authentication will be attempted if available, otherwise
     *  the code will fall back to legacy authentication.
     *
     *  Parameters:
     *    (Array) matched - Array of SASL mechanisms supported.
     *
     */
    authenticate: function (matched) {
        if (!this._attemptSASLAuth(matched)) {
            this._attemptLegacyAuth();
        }
    },

    /** PrivateFunction: _sasl_challenge_cb
     *  _Private_ handler for the SASL challenge
     *
     */
    _sasl_challenge_cb: function(elem) {
      var challenge = Base64.decode(Strophe.getText(elem));
      var response = this._sasl_mechanism.onChallenge(this, challenge);
      var stanza = $build('response', {
          'xmlns': Strophe.NS.SASL
      });
      if (response !== "") {
        stanza.t(Base64.encode(response));
      }
      this.send(stanza.tree());
      return true;
    },

    /** PrivateFunction: _auth1_cb
     *  _Private_ handler for legacy authentication.
     *
     *  This handler is called in response to the initial <iq type='get'/>
     *  for legacy authentication.  It builds an authentication <iq/> and
     *  sends it, creating a handler (calling back to _auth2_cb()) to
     *  handle the result
     *
     *  Parameters:
     *    (XMLElement) elem - The stanza that triggered the callback.
     *
     *  Returns:
     *    false to remove the handler.
     */
    /* jshint unused:false */
    _auth1_cb: function (elem) {
        // build plaintext auth iq
        var iq = $iq({type: "set", id: "_auth_2"})
            .c('query', {xmlns: Strophe.NS.AUTH})
            .c('username', {}).t(Strophe.getNodeFromJid(this.jid))
            .up()
            .c('password').t(this.pass);

        if (!Strophe.getResourceFromJid(this.jid)) {
            // since the user has not supplied a resource, we pick
            // a default one here.  unlike other auth methods, the server
            // cannot do this for us.
            this.jid = Strophe.getBareJidFromJid(this.jid) + '/strophe';
        }
        iq.up().c('resource', {}).t(Strophe.getResourceFromJid(this.jid));

        this._addSysHandler(this._auth2_cb.bind(this), null,
                            null, null, "_auth_2");
        this.send(iq.tree());
        return false;
    },
    /* jshint unused:true */

    /** PrivateFunction: _sasl_success_cb
     *  _Private_ handler for succesful SASL authentication.
     *
     *  Parameters:
     *    (XMLElement) elem - The matching stanza.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _sasl_success_cb: function (elem) {
        if (this._sasl_data["server-signature"]) {
            var serverSignature;
            var success = Base64.decode(Strophe.getText(elem));
            var attribMatch = /([a-z]+)=([^,]+)(,|$)/;
            var matches = success.match(attribMatch);
            if (matches[1] == "v") {
                serverSignature = matches[2];
            }

            if (serverSignature != this._sasl_data["server-signature"]) {
              // remove old handlers
              this.deleteHandler(this._sasl_failure_handler);
              this._sasl_failure_handler = null;
              if (this._sasl_challenge_handler) {
                this.deleteHandler(this._sasl_challenge_handler);
                this._sasl_challenge_handler = null;
              }

              this._sasl_data = {};
              return this._sasl_failure_cb(null);
            }
        }
        Strophe.info("SASL authentication succeeded.");

        if (this._sasl_mechanism) {
          this._sasl_mechanism.onSuccess();
        }

        // remove old handlers
        this.deleteHandler(this._sasl_failure_handler);
        this._sasl_failure_handler = null;
        if (this._sasl_challenge_handler) {
            this.deleteHandler(this._sasl_challenge_handler);
            this._sasl_challenge_handler = null;
        }

        var streamfeature_handlers = [];
        var wrapper = function(handlers, elem) {
            while (handlers.length) {
                this.deleteHandler(handlers.pop());
            }
            this._sasl_auth1_cb.bind(this)(elem);
            return false;
        };
        streamfeature_handlers.push(this._addSysHandler(function(elem) {
            wrapper.bind(this)(streamfeature_handlers, elem);
        }.bind(this), null, "stream:features", null, null));
        streamfeature_handlers.push(this._addSysHandler(function(elem) {
            wrapper.bind(this)(streamfeature_handlers, elem);
        }.bind(this), Strophe.NS.STREAM, "features", null, null));

        // we must send an xmpp:restart now
        this._sendRestart();

        return false;
    },

    /** PrivateFunction: _sasl_auth1_cb
     *  _Private_ handler to start stream binding.
     *
     *  Parameters:
     *    (XMLElement) elem - The matching stanza.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _sasl_auth1_cb: function (elem) {
        // save stream:features for future usage
        this.features = elem;
        var i, child;
        for (i = 0; i < elem.childNodes.length; i++) {
            child = elem.childNodes[i];
            if (child.nodeName == 'bind') {
                this.do_bind = true;
            }

            if (child.nodeName == 'session') {
                this.do_session = true;
            }
        }

        if (!this.do_bind) {
            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);
            return false;
        } else {
            this._addSysHandler(this._sasl_bind_cb.bind(this), null, null,
                                null, "_bind_auth_2");

            var resource = Strophe.getResourceFromJid(this.jid);
            if (resource) {
                this.send($iq({type: "set", id: "_bind_auth_2"})
                          .c('bind', {xmlns: Strophe.NS.BIND})
                          .c('resource', {}).t(resource).tree());
            } else {
                this.send($iq({type: "set", id: "_bind_auth_2"})
                          .c('bind', {xmlns: Strophe.NS.BIND})
                          .tree());
            }
        }
        return false;
    },

    /** PrivateFunction: _sasl_bind_cb
     *  _Private_ handler for binding result and session start.
     *
     *  Parameters:
     *    (XMLElement) elem - The matching stanza.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _sasl_bind_cb: function (elem) {
        if (elem.getAttribute("type") == "error") {
            Strophe.info("SASL binding failed.");
            var conflict = elem.getElementsByTagName("conflict"), condition;
            if (conflict.length > 0) {
                condition = 'conflict';
            }
            this._changeConnectStatus(Strophe.Status.AUTHFAIL, condition);
            return false;
        }

        // TODO - need to grab errors
        var bind = elem.getElementsByTagName("bind");
        var jidNode;
        if (bind.length > 0) {
            // Grab jid
            jidNode = bind[0].getElementsByTagName("jid");
            if (jidNode.length > 0) {
                this.jid = Strophe.getText(jidNode[0]);

                if (this.do_session) {
                    this._addSysHandler(this._sasl_session_cb.bind(this),
                                        null, null, null, "_session_auth_2");

                    this.send($iq({type: "set", id: "_session_auth_2"})
                                  .c('session', {xmlns: Strophe.NS.SESSION})
                                  .tree());
                } else {
                    this.authenticated = true;
                    this._changeConnectStatus(Strophe.Status.CONNECTED, null);
                }
            }
        } else {
            Strophe.info("SASL binding failed.");
            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);
            return false;
        }
    },

    /** PrivateFunction: _sasl_session_cb
     *  _Private_ handler to finish successful SASL connection.
     *
     *  This sets Connection.authenticated to true on success, which
     *  starts the processing of user handlers.
     *
     *  Parameters:
     *    (XMLElement) elem - The matching stanza.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _sasl_session_cb: function (elem) {
        if (elem.getAttribute("type") == "result") {
            this.authenticated = true;
            this._changeConnectStatus(Strophe.Status.CONNECTED, null);
        } else if (elem.getAttribute("type") == "error") {
            Strophe.info("Session creation failed.");
            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);
            return false;
        }
        return false;
    },

    /** PrivateFunction: _sasl_failure_cb
     *  _Private_ handler for SASL authentication failure.
     *
     *  Parameters:
     *    (XMLElement) elem - The matching stanza.
     *
     *  Returns:
     *    false to remove the handler.
     */
    /* jshint unused:false */
    _sasl_failure_cb: function (elem) {
        // delete unneeded handlers
        if (this._sasl_success_handler) {
            this.deleteHandler(this._sasl_success_handler);
            this._sasl_success_handler = null;
        }
        if (this._sasl_challenge_handler) {
            this.deleteHandler(this._sasl_challenge_handler);
            this._sasl_challenge_handler = null;
        }

        if(this._sasl_mechanism)
          this._sasl_mechanism.onFailure();
        this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);
        return false;
    },
    /* jshint unused:true */

    /** PrivateFunction: _auth2_cb
     *  _Private_ handler to finish legacy authentication.
     *
     *  This handler is called when the result from the jabber:iq:auth
     *  <iq/> stanza is returned.
     *
     *  Parameters:
     *    (XMLElement) elem - The stanza that triggered the callback.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _auth2_cb: function (elem) {
        if (elem.getAttribute("type") == "result") {
            this.authenticated = true;
            this._changeConnectStatus(Strophe.Status.CONNECTED, null);
        } else if (elem.getAttribute("type") == "error") {
            this._changeConnectStatus(Strophe.Status.AUTHFAIL, null);
            this.disconnect('authentication failed');
        }
        return false;
    },

    /** PrivateFunction: _addSysTimedHandler
     *  _Private_ function to add a system level timed handler.
     *
     *  This function is used to add a Strophe.TimedHandler for the
     *  library code.  System timed handlers are allowed to run before
     *  authentication is complete.
     *
     *  Parameters:
     *    (Integer) period - The period of the handler.
     *    (Function) handler - The callback function.
     */
    _addSysTimedHandler: function (period, handler) {
        var thand = new Strophe.TimedHandler(period, handler);
        thand.user = false;
        this.addTimeds.push(thand);
        return thand;
    },

    /** PrivateFunction: _addSysHandler
     *  _Private_ function to add a system level stanza handler.
     *
     *  This function is used to add a Strophe.Handler for the
     *  library code.  System stanza handlers are allowed to run before
     *  authentication is complete.
     *
     *  Parameters:
     *    (Function) handler - The callback function.
     *    (String) ns - The namespace to match.
     *    (String) name - The stanza name to match.
     *    (String) type - The stanza type attribute to match.
     *    (String) id - The stanza id attribute to match.
     */
    _addSysHandler: function (handler, ns, name, type, id) {
        var hand = new Strophe.Handler(handler, ns, name, type, id);
        hand.user = false;
        this.addHandlers.push(hand);
        return hand;
    },

    /** PrivateFunction: _onDisconnectTimeout
     *  _Private_ timeout handler for handling non-graceful disconnection.
     *
     *  If the graceful disconnect process does not complete within the
     *  time allotted, this handler finishes the disconnect anyway.
     *
     *  Returns:
     *    false to remove the handler.
     */
    _onDisconnectTimeout: function () {
        Strophe.info("_onDisconnectTimeout was called");
        this._changeConnectStatus(Strophe.Status.CONNTIMEOUT, null);
        this._proto._onDisconnectTimeout();
        // actually disconnect
        this._doDisconnect();
        return false;
    },

    /** PrivateFunction: _onIdle
     *  _Private_ handler to process events during idle cycle.
     *
     *  This handler is called every 100ms to fire timed handlers that
     *  are ready and keep poll requests going.
     */
    _onIdle: function () {
        var i, thand, since, newList;

        // add timed handlers scheduled for addition
        // NOTE: we add before remove in the case a timed handler is
        // added and then deleted before the next _onIdle() call.
        while (this.addTimeds.length > 0) {
            this.timedHandlers.push(this.addTimeds.pop());
        }

        // remove timed handlers that have been scheduled for deletion
        while (this.removeTimeds.length > 0) {
            thand = this.removeTimeds.pop();
            i = this.timedHandlers.indexOf(thand);
            if (i >= 0) {
                this.timedHandlers.splice(i, 1);
            }
        }

        // call ready timed handlers
        var now = new Date().getTime();
        newList = [];
        for (i = 0; i < this.timedHandlers.length; i++) {
            thand = this.timedHandlers[i];
            if (this.authenticated || !thand.user) {
                since = thand.lastCalled + thand.period;
                if (since - now <= 0) {
                    if (thand.run()) {
                        newList.push(thand);
                    }
                } else {
                    newList.push(thand);
                }
            }
        }
        this.timedHandlers = newList;

        clearTimeout(this._idleTimeout);

        this._proto._onIdle();

        // reactivate the timer only if connected
        if (this.connected) {
            // XXX: setTimeout should be called only with function expressions (23974bc1)
            this._idleTimeout = setTimeout(function() {
                this._onIdle();
            }.bind(this), 100);
        }
    }
};

/** Class: Strophe.SASLMechanism
 *
 *  encapsulates SASL authentication mechanisms.
 *
 *  User code may override the priority for each mechanism or disable it completely.
 *  See <priority> for information about changing priority and <test> for informatian on
 *  how to disable a mechanism.
 *
 *  By default, all mechanisms are enabled and the priorities are
 *
 *  EXTERNAL - 60
 *  OAUTHBEARER - 50
 *  SCRAM-SHA1 - 40
 *  DIGEST-MD5 - 30
 *  PLAIN - 20
 *  ANONYMOUS - 10
 *
 *  See: Strophe.Connection.addSupportedSASLMechanisms
 */

/**
 * PrivateConstructor: Strophe.SASLMechanism
 * SASL auth mechanism abstraction.
 *
 *  Parameters:
 *    (String) name - SASL Mechanism name.
 *    (Boolean) isClientFirst - If client should send response first without challenge.
 *    (Number) priority - Priority.
 *
 *  Returns:
 *    A new Strophe.SASLMechanism object.
 */
Strophe.SASLMechanism = function(name, isClientFirst, priority) {
  /** PrivateVariable: name
   *  Mechanism name.
   */
  this.name = name;
  /** PrivateVariable: isClientFirst
   *  If client sends response without initial server challenge.
   */
  this.isClientFirst = isClientFirst;
  /** Variable: priority
   *  Determines which <SASLMechanism> is chosen for authentication (Higher is better).
   *  Users may override this to prioritize mechanisms differently.
   *
   *  In the default configuration the priorities are
   *
   *  SCRAM-SHA1 - 40
   *  DIGEST-MD5 - 30
   *  Plain - 20
   *
   *  Example: (This will cause Strophe to choose the mechanism that the server sent first)
   *
   *  > Strophe.SASLMD5.priority = Strophe.SASLSHA1.priority;
   *
   *  See <SASL mechanisms> for a list of available mechanisms.
   *
   */
  this.priority = priority;
};

Strophe.SASLMechanism.prototype = {
  /**
   *  Function: test
   *  Checks if mechanism able to run.
   *  To disable a mechanism, make this return false;
   *
   *  To disable plain authentication run
   *  > Strophe.SASLPlain.test = function() {
   *  >   return false;
   *  > }
   *
   *  See <SASL mechanisms> for a list of available mechanisms.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   *
   *  Returns:
   *    (Boolean) If mechanism was able to run.
   */
  /* jshint unused:false */
  test: function(connection) {
    return true;
  },
  /* jshint unused:true */

  /** PrivateFunction: onStart
   *  Called before starting mechanism on some connection.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   */
  onStart: function(connection) {
    this._connection = connection;
  },

  /** PrivateFunction: onChallenge
   *  Called by protocol implementation on incoming challenge. If client is
   *  first (isClientFirst == true) challenge will be null on the first call.
   *
   *  Parameters:
   *    (Strophe.Connection) connection - Target Connection.
   *    (String) challenge - current challenge to handle.
   *
   *  Returns:
   *    (String) Mechanism response.
   */
  /* jshint unused:false */
  onChallenge: function(connection, challenge) {
    throw new Error("You should implement challenge handling!");
  },
  /* jshint unused:true */

  /** PrivateFunction: onFailure
   *  Protocol informs mechanism implementation about SASL failure.
   */
  onFailure: function() {
    this._connection = null;
  },

  /** PrivateFunction: onSuccess
   *  Protocol informs mechanism implementation about SASL success.
   */
  onSuccess: function() {
    this._connection = null;
  }
};

  /** Constants: SASL mechanisms
   *  Available authentication mechanisms
   *
   *  Strophe.SASLAnonymous - SASL ANONYMOUS authentication.
   *  Strophe.SASLPlain - SASL PLAIN authentication.
   *  Strophe.SASLMD5 - SASL DIGEST-MD5 authentication
   *  Strophe.SASLSHA1 - SASL SCRAM-SHA1 authentication
   *  Strophe.SASLOAuthBearer - SASL OAuth Bearer authentication
   *  Strophe.SASLExternal - SASL EXTERNAL authentication
   */

// Building SASL callbacks

/** PrivateConstructor: SASLAnonymous
 *  SASL ANONYMOUS authentication.
 */
Strophe.SASLAnonymous = function() {};
Strophe.SASLAnonymous.prototype = new Strophe.SASLMechanism("ANONYMOUS", false, 10);

Strophe.SASLAnonymous.prototype.test = function(connection) {
    return connection.authcid === null;
};


/** PrivateConstructor: SASLPlain
 *  SASL PLAIN authentication.
 */
Strophe.SASLPlain = function() {};
Strophe.SASLPlain.prototype = new Strophe.SASLMechanism("PLAIN", true, 20);

Strophe.SASLPlain.prototype.test = function(connection) {
    return connection.authcid !== null;
};

Strophe.SASLPlain.prototype.onChallenge = function(connection) {
    var auth_str = connection.authzid;
    auth_str = auth_str + "\u0000";
    auth_str = auth_str + connection.authcid;
    auth_str = auth_str + "\u0000";
    auth_str = auth_str + connection.pass;
    return utils.utf16to8(auth_str);
};


/** PrivateConstructor: SASLSHA1
 *  SASL SCRAM SHA 1 authentication.
 */
Strophe.SASLSHA1 = function() {};
Strophe.SASLSHA1.prototype = new Strophe.SASLMechanism("SCRAM-SHA-1", true, 40);

Strophe.SASLSHA1.prototype.test = function(connection) {
    return connection.authcid !== null;
};

Strophe.SASLSHA1.prototype.onChallenge = function(connection, challenge, test_cnonce) {
  var cnonce = test_cnonce || MD5.hexdigest(Math.random() * 1234567890);
  var auth_str = "n=" + utils.utf16to8(connection.authcid);
  auth_str += ",r=";
  auth_str += cnonce;
  connection._sasl_data.cnonce = cnonce;
  connection._sasl_data["client-first-message-bare"] = auth_str;

  auth_str = "n,," + auth_str;

  this.onChallenge = function (connection, challenge) {
    var nonce, salt, iter, Hi, U, U_old, i, k, pass;
    var clientKey, serverKey, clientSignature;
    var responseText = "c=biws,";
    var authMessage = connection._sasl_data["client-first-message-bare"] + "," +
      challenge + ",";
    var cnonce = connection._sasl_data.cnonce;
    var attribMatch = /([a-z]+)=([^,]+)(,|$)/;

    while (challenge.match(attribMatch)) {
      var matches = challenge.match(attribMatch);
      challenge = challenge.replace(matches[0], "");
      switch (matches[1]) {
      case "r":
        nonce = matches[2];
        break;
      case "s":
        salt = matches[2];
        break;
      case "i":
        iter = matches[2];
        break;
      }
    }

    if (nonce.substr(0, cnonce.length) !== cnonce) {
      connection._sasl_data = {};
      return connection._sasl_failure_cb();
    }

    responseText += "r=" + nonce;
    authMessage += responseText;

    salt = Base64.decode(salt);
    salt += "\x00\x00\x00\x01";

    pass = utils.utf16to8(connection.pass);
    Hi = U_old = SHA1.core_hmac_sha1(pass, salt);
    for (i = 1; i < iter; i++) {
      U = SHA1.core_hmac_sha1(pass, SHA1.binb2str(U_old));
      for (k = 0; k < 5; k++) {
        Hi[k] ^= U[k];
      }
      U_old = U;
    }
    Hi = SHA1.binb2str(Hi);

    clientKey = SHA1.core_hmac_sha1(Hi, "Client Key");
    serverKey = SHA1.str_hmac_sha1(Hi, "Server Key");
    clientSignature = SHA1.core_hmac_sha1(SHA1.str_sha1(SHA1.binb2str(clientKey)), authMessage);
    connection._sasl_data["server-signature"] = SHA1.b64_hmac_sha1(serverKey, authMessage);

    for (k = 0; k < 5; k++) {
      clientKey[k] ^= clientSignature[k];
    }

    responseText += ",p=" + Base64.encode(SHA1.binb2str(clientKey));
    return responseText;
  }.bind(this);

  return auth_str;
};


/** PrivateConstructor: SASLMD5
 *  SASL DIGEST MD5 authentication.
 */
Strophe.SASLMD5 = function() {};
Strophe.SASLMD5.prototype = new Strophe.SASLMechanism("DIGEST-MD5", false, 30);

Strophe.SASLMD5.prototype.test = function(connection) {
    return connection.authcid !== null;
};

/** PrivateFunction: _quote
 *  _Private_ utility function to backslash escape and quote strings.
 *
 *  Parameters:
 *    (String) str - The string to be quoted.
 *
 *  Returns:
 *    quoted string
 */
Strophe.SASLMD5.prototype._quote = function (str) {
    return '"' + str.replace(/\\/g, "\\\\").replace(/"/g, '\\"') + '"';
    //" end string workaround for emacs
};

Strophe.SASLMD5.prototype.onChallenge = function(connection, challenge, test_cnonce) {
  var attribMatch = /([a-z]+)=("[^"]+"|[^,"]+)(?:,|$)/;
  var cnonce = test_cnonce || MD5.hexdigest("" + (Math.random() * 1234567890));
  var realm = "";
  var host = null;
  var nonce = "";
  var qop = "";
  var matches;

  while (challenge.match(attribMatch)) {
    matches = challenge.match(attribMatch);
    challenge = challenge.replace(matches[0], "");
    matches[2] = matches[2].replace(/^"(.+)"$/, "$1");
    switch (matches[1]) {
    case "realm":
      realm = matches[2];
      break;
    case "nonce":
      nonce = matches[2];
      break;
    case "qop":
      qop = matches[2];
      break;
    case "host":
      host = matches[2];
      break;
    }
  }

  var digest_uri = connection.servtype + "/" + connection.domain;
  if (host !== null) {
    digest_uri = digest_uri + "/" + host;
  }

  var cred = utils.utf16to8(connection.authcid + ":" + realm + ":" + this._connection.pass);
  var A1 = MD5.hash(cred) + ":" + nonce + ":" + cnonce;
  var A2 = 'AUTHENTICATE:' + digest_uri;

  var responseText = "";
  responseText += 'charset=utf-8,';
  responseText += 'username=' + this._quote(utils.utf16to8(connection.authcid)) + ',';
  responseText += 'realm=' + this._quote(realm) + ',';
  responseText += 'nonce=' + this._quote(nonce) + ',';
  responseText += 'nc=00000001,';
  responseText += 'cnonce=' + this._quote(cnonce) + ',';
  responseText += 'digest-uri=' + this._quote(digest_uri) + ',';
  responseText += 'response=' + MD5.hexdigest(MD5.hexdigest(A1) + ":" +
                                              nonce + ":00000001:" +
                                              cnonce + ":auth:" +
                                              MD5.hexdigest(A2)) + ",";
  responseText += 'qop=auth';

  this.onChallenge = function () {
      return "";
  };
  return responseText;
};


/** PrivateConstructor: SASLOAuthBearer
 *  SASL OAuth Bearer authentication.
 */
Strophe.SASLOAuthBearer = function() {};
Strophe.SASLOAuthBearer.prototype = new Strophe.SASLMechanism("OAUTHBEARER", true, 50);

Strophe.SASLOAuthBearer.prototype.test = function(connection) {
    return connection.authcid !== null;
};

Strophe.SASLOAuthBearer.prototype.onChallenge = function(connection) {
    var auth_str = 'n,a=';
    auth_str = auth_str + connection.authzid;
    auth_str = auth_str + ',';
    auth_str = auth_str + "\u0001";
    auth_str = auth_str + 'auth=Bearer ';
    auth_str = auth_str + connection.pass;
    auth_str = auth_str + "\u0001";
    auth_str = auth_str + "\u0001";
    return utils.utf16to8(auth_str);
};


/** PrivateConstructor: SASLExternal
 *  SASL EXTERNAL authentication.
 *
 *  The EXTERNAL mechanism allows a client to request the server to use
 *  credentials established by means external to the mechanism to
 *  authenticate the client. The external means may be, for instance,
 *  TLS services.
 */
Strophe.SASLExternal = function() {};
Strophe.SASLExternal.prototype = new Strophe.SASLMechanism("EXTERNAL", true, 60);

Strophe.SASLExternal.prototype.onChallenge = function(connection) {
    /** According to XEP-178, an authzid SHOULD NOT be presented when the
     * authcid contained or implied in the client certificate is the JID (i.e.
     * authzid) with which the user wants to log in as.
     *
     * To NOT send the authzid, the user should therefore set the authcid equal
     * to the JID when instantiating a new Strophe.Connection object.
     */
    return connection.authcid === connection.authzid ? '' : connection.authzid;
};

return {
    Strophe:        Strophe,
    $build:         $build,
    $msg:           $msg,
    $iq:            $iq,
    $pres:          $pres,
    SHA1:           SHA1,
    Base64:         Base64,
    MD5:            MD5,
};
}));

/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* jshint undef: true, unused: true:, noarg: true, latedef: true */
/* global define, window, setTimeout, clearTimeout, XMLHttpRequest, ActiveXObject, Strophe, $build */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-bosh', ['strophe-core'], function (core) {
            return factory(
                core.Strophe,
                core.$build
            );
        });
    } else {
        // Browser globals
        return factory(Strophe, $build);
    }
}(this, function (Strophe, $build) {

/** PrivateClass: Strophe.Request
 *  _Private_ helper class that provides a cross implementation abstraction
 *  for a BOSH related XMLHttpRequest.
 *
 *  The Strophe.Request class is used internally to encapsulate BOSH request
 *  information.  It is not meant to be used from user's code.
 */

/** PrivateConstructor: Strophe.Request
 *  Create and initialize a new Strophe.Request object.
 *
 *  Parameters:
 *    (XMLElement) elem - The XML data to be sent in the request.
 *    (Function) func - The function that will be called when the
 *      XMLHttpRequest readyState changes.
 *    (Integer) rid - The BOSH rid attribute associated with this request.
 *    (Integer) sends - The number of times this same request has been sent.
 */
Strophe.Request = function (elem, func, rid, sends) {
    this.id = ++Strophe._requestId;
    this.xmlData = elem;
    this.data = Strophe.serialize(elem);
    // save original function in case we need to make a new request
    // from this one.
    this.origFunc = func;
    this.func = func;
    this.rid = rid;
    this.date = NaN;
    this.sends = sends || 0;
    this.abort = false;
    this.dead = null;

    this.age = function () {
        if (!this.date) { return 0; }
        var now = new Date();
        return (now - this.date) / 1000;
    };
    this.timeDead = function () {
        if (!this.dead) { return 0; }
        var now = new Date();
        return (now - this.dead) / 1000;
    };
    this.xhr = this._newXHR();
};

Strophe.Request.prototype = {
    /** PrivateFunction: getResponse
     *  Get a response from the underlying XMLHttpRequest.
     *
     *  This function attempts to get a response from the request and checks
     *  for errors.
     *
     *  Throws:
     *    "parsererror" - A parser error occured.
     *    "badformat" - The entity has sent XML that cannot be processed.
     *
     *  Returns:
     *    The DOM element tree of the response.
     */
    getResponse: function () {
        var node = null;
        if (this.xhr.responseXML && this.xhr.responseXML.documentElement) {
            node = this.xhr.responseXML.documentElement;
            if (node.tagName == "parsererror") {
                Strophe.error("invalid response received");
                Strophe.error("responseText: " + this.xhr.responseText);
                Strophe.error("responseXML: " +
                              Strophe.serialize(this.xhr.responseXML));
                throw "parsererror";
            }
        } else if (this.xhr.responseText) {
            Strophe.error("invalid response received");
            Strophe.error("responseText: " + this.xhr.responseText);
            throw "badformat";
        }

        return node;
    },

    /** PrivateFunction: _newXHR
     *  _Private_ helper function to create XMLHttpRequests.
     *
     *  This function creates XMLHttpRequests across all implementations.
     *
     *  Returns:
     *    A new XMLHttpRequest.
     */
    _newXHR: function () {
        var xhr = null;
        if (window.XMLHttpRequest) {
            xhr = new XMLHttpRequest();
            if (xhr.overrideMimeType) {
                xhr.overrideMimeType("text/xml; charset=utf-8");
            }
        } else if (window.ActiveXObject) {
            xhr = new ActiveXObject("Microsoft.XMLHTTP");
        }
        // use Function.bind() to prepend ourselves as an argument
        xhr.onreadystatechange = this.func.bind(null, this);
        return xhr;
    }
};

/** Class: Strophe.Bosh
 *  _Private_ helper class that handles BOSH Connections
 *
 *  The Strophe.Bosh class is used internally by Strophe.Connection
 *  to encapsulate BOSH sessions. It is not meant to be used from user's code.
 */

/** File: bosh.js
 *  A JavaScript library to enable BOSH in Strophejs.
 *
 *  this library uses Bidirectional-streams Over Synchronous HTTP (BOSH)
 *  to emulate a persistent, stateful, two-way connection to an XMPP server.
 *  More information on BOSH can be found in XEP 124.
 */

/** PrivateConstructor: Strophe.Bosh
 *  Create and initialize a Strophe.Bosh object.
 *
 *  Parameters:
 *    (Strophe.Connection) connection - The Strophe.Connection that will use BOSH.
 *
 *  Returns:
 *    A new Strophe.Bosh object.
 */
Strophe.Bosh = function(connection) {
    this._conn = connection;
    /* request id for body tags */
    this.rid = Math.floor(Math.random() * 4294967295);
    /* The current session ID. */
    this.sid = null;

    // default BOSH values
    this.hold = 1;
    this.wait = 60;
    this.window = 5;
    this.errors = 0;
    this.inactivity = null;

    this._requests = [];
};

Strophe.Bosh.prototype = {
    /** Variable: strip
     *
     *  BOSH-Connections will have all stanzas wrapped in a <body> tag when
     *  passed to <Strophe.Connection.xmlInput> or <Strophe.Connection.xmlOutput>.
     *  To strip this tag, User code can set <Strophe.Bosh.strip> to "body":
     *
     *  > Strophe.Bosh.prototype.strip = "body";
     *
     *  This will enable stripping of the body tag in both
     *  <Strophe.Connection.xmlInput> and <Strophe.Connection.xmlOutput>.
     */
    strip: null,

    /** PrivateFunction: _buildBody
     *  _Private_ helper function to generate the <body/> wrapper for BOSH.
     *
     *  Returns:
     *    A Strophe.Builder with a <body/> element.
     */
    _buildBody: function () {
        var bodyWrap = $build('body', {
            rid: this.rid++,
            xmlns: Strophe.NS.HTTPBIND
        });
        if (this.sid !== null) {
            bodyWrap.attrs({sid: this.sid});
        }
        if (this._conn.options.keepalive && this._conn._sessionCachingSupported()) {
            this._cacheSession();
        }
        return bodyWrap;
    },

    /** PrivateFunction: _reset
     *  Reset the connection.
     *
     *  This function is called by the reset function of the Strophe Connection
     */
    _reset: function () {
        this.rid = Math.floor(Math.random() * 4294967295);
        this.sid = null;
        this.errors = 0;
        if (this._conn._sessionCachingSupported()) {
            window.sessionStorage.removeItem('strophe-bosh-session');
        }

        this._conn.nextValidRid(this.rid);
    },

    /** PrivateFunction: _connect
     *  _Private_ function that initializes the BOSH connection.
     *
     *  Creates and sends the Request that initializes the BOSH connection.
     */
    _connect: function (wait, hold, route) {
        this.wait = wait || this.wait;
        this.hold = hold || this.hold;
        this.errors = 0;

        // build the body tag
        var body = this._buildBody().attrs({
            to: this._conn.domain,
            "xml:lang": "en",
            wait: this.wait,
            hold: this.hold,
            content: "text/xml; charset=utf-8",
            ver: "1.6",
            "xmpp:version": "1.0",
            "xmlns:xmpp": Strophe.NS.BOSH
        });

        if(route){
            body.attrs({
                route: route
            });
        }

        var _connect_cb = this._conn._connect_cb;

        this._requests.push(
            new Strophe.Request(body.tree(),
                                this._onRequestStateChange.bind(
                                    this, _connect_cb.bind(this._conn)),
                                body.tree().getAttribute("rid")));
        this._throttledRequestHandler();
    },

    /** PrivateFunction: _attach
     *  Attach to an already created and authenticated BOSH session.
     *
     *  This function is provided to allow Strophe to attach to BOSH
     *  sessions which have been created externally, perhaps by a Web
     *  application.  This is often used to support auto-login type features
     *  without putting user credentials into the page.
     *
     *  Parameters:
     *    (String) jid - The full JID that is bound by the session.
     *    (String) sid - The SID of the BOSH session.
     *    (String) rid - The current RID of the BOSH session.  This RID
     *      will be used by the next request.
     *    (Function) callback The connect callback function.
     *    (Integer) wait - The optional HTTPBIND wait value.  This is the
     *      time the server will wait before returning an empty result for
     *      a request.  The default setting of 60 seconds is recommended.
     *      Other settings will require tweaks to the Strophe.TIMEOUT value.
     *    (Integer) hold - The optional HTTPBIND hold value.  This is the
     *      number of connections the server will hold at one time.  This
     *      should almost always be set to 1 (the default).
     *    (Integer) wind - The optional HTTBIND window value.  This is the
     *      allowed range of request ids that are valid.  The default is 5.
     */
    _attach: function (jid, sid, rid, callback, wait, hold, wind) {
        this._conn.jid = jid;
        this.sid = sid;
        this.rid = rid;

        this._conn.connect_callback = callback;

        this._conn.domain = Strophe.getDomainFromJid(this._conn.jid);

        this._conn.authenticated = true;
        this._conn.connected = true;

        this.wait = wait || this.wait;
        this.hold = hold || this.hold;
        this.window = wind || this.window;

        this._conn._changeConnectStatus(Strophe.Status.ATTACHED, null);
    },

    /** PrivateFunction: _restore
     *  Attempt to restore a cached BOSH session
     *
     *  Parameters:
     *    (String) jid - The full JID that is bound by the session.
     *      This parameter is optional but recommended, specifically in cases
     *      where prebinded BOSH sessions are used where it's important to know
     *      that the right session is being restored.
     *    (Function) callback The connect callback function.
     *    (Integer) wait - The optional HTTPBIND wait value.  This is the
     *      time the server will wait before returning an empty result for
     *      a request.  The default setting of 60 seconds is recommended.
     *      Other settings will require tweaks to the Strophe.TIMEOUT value.
     *    (Integer) hold - The optional HTTPBIND hold value.  This is the
     *      number of connections the server will hold at one time.  This
     *      should almost always be set to 1 (the default).
     *    (Integer) wind - The optional HTTBIND window value.  This is the
     *      allowed range of request ids that are valid.  The default is 5.
     */
    _restore: function (jid, callback, wait, hold, wind) {
        var session = JSON.parse(window.sessionStorage.getItem('strophe-bosh-session'));
        if (typeof session !== "undefined" &&
                   session !== null &&
                   session.rid &&
                   session.sid &&
                   session.jid &&
                   (    typeof jid === "undefined" ||
                        jid === null ||
                        Strophe.getBareJidFromJid(session.jid) == Strophe.getBareJidFromJid(jid) ||
                        // If authcid is null, then it's an anonymous login, so
                        // we compare only the domains:
                        ((Strophe.getNodeFromJid(jid) === null) && (Strophe.getDomainFromJid(session.jid) == jid))
                    )
        ) {
            this._conn.restored = true;
            this._attach(session.jid, session.sid, session.rid, callback, wait, hold, wind);
        } else {
            throw { name: "StropheSessionError", message: "_restore: no restoreable session." };
        }
    },

    /** PrivateFunction: _cacheSession
     *  _Private_ handler for the beforeunload event.
     *
     *  This handler is used to process the Bosh-part of the initial request.
     *  Parameters:
     *    (Strophe.Request) bodyWrap - The received stanza.
     */
    _cacheSession: function () {
        if (this._conn.authenticated) {
            if (this._conn.jid && this.rid && this.sid) {
                window.sessionStorage.setItem('strophe-bosh-session', JSON.stringify({
                    'jid': this._conn.jid,
                    'rid': this.rid,
                    'sid': this.sid
                }));
            }
        } else {
            window.sessionStorage.removeItem('strophe-bosh-session');
        }
    },

    /** PrivateFunction: _connect_cb
     *  _Private_ handler for initial connection request.
     *
     *  This handler is used to process the Bosh-part of the initial request.
     *  Parameters:
     *    (Strophe.Request) bodyWrap - The received stanza.
     */
    _connect_cb: function (bodyWrap) {
        var typ = bodyWrap.getAttribute("type");
        var cond, conflict;
        if (typ !== null && typ == "terminate") {
            // an error occurred
            cond = bodyWrap.getAttribute("condition");
            Strophe.error("BOSH-Connection failed: " + cond);
            conflict = bodyWrap.getElementsByTagName("conflict");
            if (cond !== null) {
                if (cond == "remote-stream-error" && conflict.length > 0) {
                    cond = "conflict";
                }
                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, cond);
            } else {
                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "unknown");
            }
            this._conn._doDisconnect(cond);
            return Strophe.Status.CONNFAIL;
        }

        // check to make sure we don't overwrite these if _connect_cb is
        // called multiple times in the case of missing stream:features
        if (!this.sid) {
            this.sid = bodyWrap.getAttribute("sid");
        }
        var wind = bodyWrap.getAttribute('requests');
        if (wind) { this.window = parseInt(wind, 10); }
        var hold = bodyWrap.getAttribute('hold');
        if (hold) { this.hold = parseInt(hold, 10); }
        var wait = bodyWrap.getAttribute('wait');
        if (wait) { this.wait = parseInt(wait, 10); }
        var inactivity = bodyWrap.getAttribute('inactivity');
        if (inactivity) { this.inactivity = parseInt(inactivity, 10); }
    },

    /** PrivateFunction: _disconnect
     *  _Private_ part of Connection.disconnect for Bosh
     *
     *  Parameters:
     *    (Request) pres - This stanza will be sent before disconnecting.
     */
    _disconnect: function (pres) {
        this._sendTerminate(pres);
    },

    /** PrivateFunction: _doDisconnect
     *  _Private_ function to disconnect.
     *
     *  Resets the SID and RID.
     */
    _doDisconnect: function () {
        this.sid = null;
        this.rid = Math.floor(Math.random() * 4294967295);
        if (this._conn._sessionCachingSupported()) {
            window.sessionStorage.removeItem('strophe-bosh-session');
        }

        this._conn.nextValidRid(this.rid);
    },

    /** PrivateFunction: _emptyQueue
     * _Private_ function to check if the Request queue is empty.
     *
     *  Returns:
     *    True, if there are no Requests queued, False otherwise.
     */
    _emptyQueue: function () {
        return this._requests.length === 0;
    },

    /** PrivateFunction: _callProtocolErrorHandlers
     *  _Private_ function to call error handlers registered for HTTP errors.
     *
     *  Parameters:
     *    (Strophe.Request) req - The request that is changing readyState.
     */
    _callProtocolErrorHandlers: function (req) {
        var reqStatus = this._getRequestStatus(req),
            err_callback;
        err_callback = this._conn.protocolErrorHandlers.HTTP[reqStatus];
        if (err_callback) {
            err_callback.call(this, reqStatus);
        }
    },

    /** PrivateFunction: _hitError
     *  _Private_ function to handle the error count.
     *
     *  Requests are resent automatically until their error count reaches
     *  5.  Each time an error is encountered, this function is called to
     *  increment the count and disconnect if the count is too high.
     *
     *  Parameters:
     *    (Integer) reqStatus - The request status.
     */
    _hitError: function (reqStatus) {
        this.errors++;
        Strophe.warn("request errored, status: " + reqStatus +
                     ", number of errors: " + this.errors);
        if (this.errors > 4) {
            this._conn._onDisconnectTimeout();
        }
    },

    /** PrivateFunction: _no_auth_received
     *
     * Called on stream start/restart when no stream:features
     * has been received and sends a blank poll request.
     */
    _no_auth_received: function (_callback) {
        if (_callback) {
            _callback = _callback.bind(this._conn);
        } else {
            _callback = this._conn._connect_cb.bind(this._conn);
        }
        var body = this._buildBody();
        this._requests.push(
                new Strophe.Request(body.tree(),
                    this._onRequestStateChange.bind(
                        this, _callback.bind(this._conn)),
                    body.tree().getAttribute("rid")));
        this._throttledRequestHandler();
    },

    /** PrivateFunction: _onDisconnectTimeout
     *  _Private_ timeout handler for handling non-graceful disconnection.
     *
     *  Cancels all remaining Requests and clears the queue.
     */
    _onDisconnectTimeout: function () {
        this._abortAllRequests();
    },

    /** PrivateFunction: _abortAllRequests
     *  _Private_ helper function that makes sure all pending requests are aborted.
     */
    _abortAllRequests: function _abortAllRequests() {
        var req;
        while (this._requests.length > 0) {
            req = this._requests.pop();
            req.abort = true;
            req.xhr.abort();
            // jslint complains, but this is fine. setting to empty func
            // is necessary for IE6
            req.xhr.onreadystatechange = function () {}; // jshint ignore:line
        }
    },

    /** PrivateFunction: _onIdle
     *  _Private_ handler called by Strophe.Connection._onIdle
     *
     *  Sends all queued Requests or polls with empty Request if there are none.
     */
    _onIdle: function () {
        var data = this._conn._data;
        // if no requests are in progress, poll
        if (this._conn.authenticated && this._requests.length === 0 &&
            data.length === 0 && !this._conn.disconnecting) {
            Strophe.info("no requests during idle cycle, sending " +
                         "blank request");
            data.push(null);
        }

        if (this._conn.paused) {
            return;
        }

        if (this._requests.length < 2 && data.length > 0) {
            var body = this._buildBody();
            for (var i = 0; i < data.length; i++) {
                if (data[i] !== null) {
                    if (data[i] === "restart") {
                        body.attrs({
                            to: this._conn.domain,
                            "xml:lang": "en",
                            "xmpp:restart": "true",
                            "xmlns:xmpp": Strophe.NS.BOSH
                        });
                    } else {
                        body.cnode(data[i]).up();
                    }
                }
            }
            delete this._conn._data;
            this._conn._data = [];
            this._requests.push(
                new Strophe.Request(body.tree(),
                                    this._onRequestStateChange.bind(
                                        this, this._conn._dataRecv.bind(this._conn)),
                                    body.tree().getAttribute("rid")));
            this._throttledRequestHandler();
        }

        if (this._requests.length > 0) {
            var time_elapsed = this._requests[0].age();
            if (this._requests[0].dead !== null) {
                if (this._requests[0].timeDead() >
                    Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait)) {
                    this._throttledRequestHandler();
                }
            }

            if (time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait)) {
                Strophe.warn("Request " +
                             this._requests[0].id +
                             " timed out, over " + Math.floor(Strophe.TIMEOUT * this.wait) +
                             " seconds since last activity");
                this._throttledRequestHandler();
            }
        }
    },

    /** PrivateFunction: _getRequestStatus
     *
     *  Returns the HTTP status code from a Strophe.Request
     *
     *  Parameters:
     *    (Strophe.Request) req - The Strophe.Request instance.
     *    (Integer) def - The default value that should be returned if no
     *          status value was found.
     */
    _getRequestStatus: function (req, def) {
        var reqStatus;
        if (req.xhr.readyState == 4) {
            try {
                reqStatus = req.xhr.status;
            } catch (e) {
                // ignore errors from undefined status attribute. Works
                // around a browser bug
                Strophe.error(
                    "Caught an error while retrieving a request's status, " +
                    "reqStatus: " + reqStatus);
            }
        }
        if (typeof(reqStatus) == "undefined") {
            reqStatus = typeof def === 'number' ? def : 0;
        }
        return reqStatus;
    },

    /** PrivateFunction: _onRequestStateChange
     *  _Private_ handler for Strophe.Request state changes.
     *
     *  This function is called when the XMLHttpRequest readyState changes.
     *  It contains a lot of error handling logic for the many ways that
     *  requests can fail, and calls the request callback when requests
     *  succeed.
     *
     *  Parameters:
     *    (Function) func - The handler for the request.
     *    (Strophe.Request) req - The request that is changing readyState.
     */
    _onRequestStateChange: function (func, req) {
        Strophe.debug("request id "+req.id+"."+req.sends+
                      " state changed to "+req.xhr.readyState);
        if (req.abort) {
            req.abort = false;
            return;
        }
        if (req.xhr.readyState !== 4) {
            // The request is not yet complete
            return;
        }
        var reqStatus = this._getRequestStatus(req);
        if (this.disconnecting && reqStatus >= 400) {
            this._hitError(reqStatus);
            this._callProtocolErrorHandlers(req);
            return;
        }

        if ((reqStatus > 0 && reqStatus < 500) || req.sends > 5) {
            // remove from internal queue
            this._removeRequest(req);
            Strophe.debug("request id "+req.id+" should now be removed");
        }

        if (reqStatus == 200) {
            // request succeeded
            var reqIs0 = (this._requests[0] == req);
            var reqIs1 = (this._requests[1] == req);
            // if request 1 finished, or request 0 finished and request
            // 1 is over Strophe.SECONDARY_TIMEOUT seconds old, we need to
            // restart the other - both will be in the first spot, as the
            // completed request has been removed from the queue already
            if (reqIs1 ||
                (reqIs0 && this._requests.length > 0 &&
                    this._requests[0].age() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait))) {
                this._restartRequest(0);
            }
            this._conn.nextValidRid(Number(req.rid) + 1);
            Strophe.debug("request id "+req.id+"."+req.sends+" got 200");
            func(req); // call handler
            this.errors = 0;
        } else if (reqStatus === 0 ||
                   (reqStatus >= 400 && reqStatus < 600) ||
                   reqStatus >= 12000) {
            // request failed
            Strophe.error("request id "+req.id+"."+req.sends+" error "+reqStatus+" happened");
            this._hitError(reqStatus);
            this._callProtocolErrorHandlers(req);
            if (reqStatus >= 400 && reqStatus < 500) {
                this._conn._changeConnectStatus(Strophe.Status.DISCONNECTING, null);
                this._conn._doDisconnect();
            }
        } else {
            Strophe.error("request id "+req.id+"."+req.sends+" error "+reqStatus+" happened");
        }
        if (!(reqStatus > 0 && reqStatus < 500) || req.sends > 5) {
            this._throttledRequestHandler();
        }
    },

    /** PrivateFunction: _processRequest
     *  _Private_ function to process a request in the queue.
     *
     *  This function takes requests off the queue and sends them and
     *  restarts dead requests.
     *
     *  Parameters:
     *    (Integer) i - The index of the request in the queue.
     */
    _processRequest: function (i) {
        var self = this;
        var req = this._requests[i];
        var reqStatus = this._getRequestStatus(req, -1);

        // make sure we limit the number of retries
        if (req.sends > this._conn.maxRetries) {
            this._conn._onDisconnectTimeout();
            return;
        }

        var time_elapsed = req.age();
        var primaryTimeout = (!isNaN(time_elapsed) &&
                              time_elapsed > Math.floor(Strophe.TIMEOUT * this.wait));
        var secondaryTimeout = (req.dead !== null &&
                                req.timeDead() > Math.floor(Strophe.SECONDARY_TIMEOUT * this.wait));
        var requestCompletedWithServerError = (req.xhr.readyState == 4 &&
                                               (reqStatus < 1 || reqStatus >= 500));
        if (primaryTimeout || secondaryTimeout ||
            requestCompletedWithServerError) {
            if (secondaryTimeout) {
                Strophe.error("Request " + this._requests[i].id +
                              " timed out (secondary), restarting");
            }
            req.abort = true;
            req.xhr.abort();
            // setting to null fails on IE6, so set to empty function
            req.xhr.onreadystatechange = function () {};
            this._requests[i] = new Strophe.Request(req.xmlData,
                                                    req.origFunc,
                                                    req.rid,
                                                    req.sends);
            req = this._requests[i];
        }

        if (req.xhr.readyState === 0) {
            Strophe.debug("request id "+req.id+"."+req.sends+" posting");

            try {
                var contentType = this._conn.options.contentType || "text/xml; charset=utf-8";
                req.xhr.open("POST", this._conn.service, this._conn.options.sync ? false : true);
                if (typeof req.xhr.setRequestHeader !== 'undefined') {
                    // IE9 doesn't have setRequestHeader
                    req.xhr.setRequestHeader("Content-Type", contentType);
                }
                if (this._conn.options.withCredentials) {
                    req.xhr.withCredentials = true;
                }
            } catch (e2) {
                Strophe.error("XHR open failed.");
                if (!this._conn.connected) {
                    this._conn._changeConnectStatus(
                            Strophe.Status.CONNFAIL, "bad-service");
                }
                this._conn.disconnect();
                return;
            }

            // Fires the XHR request -- may be invoked immediately
            // or on a gradually expanding retry window for reconnects
            var sendFunc = function () {
                req.date = new Date();
                if (self._conn.options.customHeaders){
                    var headers = self._conn.options.customHeaders;
                    for (var header in headers) {
                        if (headers.hasOwnProperty(header)) {
                            req.xhr.setRequestHeader(header, headers[header]);
                        }
                    }
                }
                req.xhr.send(req.data);
            };

            // Implement progressive backoff for reconnects --
            // First retry (send == 1) should also be instantaneous
            if (req.sends > 1) {
                // Using a cube of the retry number creates a nicely
                // expanding retry window
                var backoff = Math.min(Math.floor(Strophe.TIMEOUT * this.wait),
                                       Math.pow(req.sends, 3)) * 1000;
                setTimeout(function() {
                    // XXX: setTimeout should be called only with function expressions (23974bc1)
                    sendFunc();
                }, backoff);
            } else {
                sendFunc();
            }

            req.sends++;

            if (this._conn.xmlOutput !== Strophe.Connection.prototype.xmlOutput) {
                if (req.xmlData.nodeName === this.strip && req.xmlData.childNodes.length) {
                    this._conn.xmlOutput(req.xmlData.childNodes[0]);
                } else {
                    this._conn.xmlOutput(req.xmlData);
                }
            }
            if (this._conn.rawOutput !== Strophe.Connection.prototype.rawOutput) {
                this._conn.rawOutput(req.data);
            }
        } else {
            Strophe.debug("_processRequest: " +
                          (i === 0 ? "first" : "second") +
                          " request has readyState of " +
                          req.xhr.readyState);
        }
    },

    /** PrivateFunction: _removeRequest
     *  _Private_ function to remove a request from the queue.
     *
     *  Parameters:
     *    (Strophe.Request) req - The request to remove.
     */
    _removeRequest: function (req) {
        Strophe.debug("removing request");
        var i;
        for (i = this._requests.length - 1; i >= 0; i--) {
            if (req == this._requests[i]) {
                this._requests.splice(i, 1);
            }
        }
        // IE6 fails on setting to null, so set to empty function
        req.xhr.onreadystatechange = function () {};
        this._throttledRequestHandler();
    },

    /** PrivateFunction: _restartRequest
     *  _Private_ function to restart a request that is presumed dead.
     *
     *  Parameters:
     *    (Integer) i - The index of the request in the queue.
     */
    _restartRequest: function (i) {
        var req = this._requests[i];
        if (req.dead === null) {
            req.dead = new Date();
        }

        this._processRequest(i);
    },

    /** PrivateFunction: _reqToData
     * _Private_ function to get a stanza out of a request.
     *
     * Tries to extract a stanza out of a Request Object.
     * When this fails the current connection will be disconnected.
     *
     *  Parameters:
     *    (Object) req - The Request.
     *
     *  Returns:
     *    The stanza that was passed.
     */
    _reqToData: function (req) {
        try {
            return req.getResponse();
        } catch (e) {
            if (e != "parsererror") { throw e; }
            this._conn.disconnect("strophe-parsererror");
        }
    },

    /** PrivateFunction: _sendTerminate
     *  _Private_ function to send initial disconnect sequence.
     *
     *  This is the first step in a graceful disconnect.  It sends
     *  the BOSH server a terminate body and includes an unavailable
     *  presence if authentication has completed.
     */
    _sendTerminate: function (pres) {
        Strophe.info("_sendTerminate was called");
        var body = this._buildBody().attrs({type: "terminate"});
        if (pres) {
            body.cnode(pres.tree());
        }
        var req = new Strophe.Request(
            body.tree(),
            this._onRequestStateChange.bind(
            this, this._conn._dataRecv.bind(this._conn)),
            body.tree().getAttribute("rid")
        );
        this._requests.push(req);
        this._throttledRequestHandler();
    },

    /** PrivateFunction: _send
     *  _Private_ part of the Connection.send function for BOSH
     *
     * Just triggers the RequestHandler to send the messages that are in the queue
     */
    _send: function () {
        clearTimeout(this._conn._idleTimeout);
        this._throttledRequestHandler();

        // XXX: setTimeout should be called only with function expressions (23974bc1)
        this._conn._idleTimeout = setTimeout(function() {
            this._onIdle();
        }.bind(this._conn), 100);
    },

    /** PrivateFunction: _sendRestart
     *
     *  Send an xmpp:restart stanza.
     */
    _sendRestart: function () {
        this._throttledRequestHandler();
        clearTimeout(this._conn._idleTimeout);
    },

    /** PrivateFunction: _throttledRequestHandler
     *  _Private_ function to throttle requests to the connection window.
     *
     *  This function makes sure we don't send requests so fast that the
     *  request ids overflow the connection window in the case that one
     *  request died.
     */
    _throttledRequestHandler: function () {
        if (!this._requests) {
            Strophe.debug("_throttledRequestHandler called with " +
                          "undefined requests");
        } else {
            Strophe.debug("_throttledRequestHandler called with " +
                          this._requests.length + " requests");
        }

        if (!this._requests || this._requests.length === 0) {
            return;
        }

        if (this._requests.length > 0) {
            this._processRequest(0);
        }

        if (this._requests.length > 1 &&
            Math.abs(this._requests[0].rid -
                     this._requests[1].rid) < this.window) {
            this._processRequest(1);
        }
    }
};
return Strophe;
}));

/*
    This program is distributed under the terms of the MIT license.
    Please see the LICENSE file for details.

    Copyright 2006-2008, OGG, LLC
*/

/* jshint undef: true, unused: true:, noarg: true, latedef: true */
/* global define, window, clearTimeout, WebSocket, DOMParser, Strophe, $build */

(function (root, factory) {
    if (typeof define === 'function' && define.amd) {
        define('strophe-websocket', ['strophe-core'], function (core) {
            return factory(
                core.Strophe,
                core.$build
            );
        });
    } else {
        // Browser globals
        return factory(Strophe, $build);
    }
}(this, function (Strophe, $build) {

/** Class: Strophe.WebSocket
 *  _Private_ helper class that handles WebSocket Connections
 *
 *  The Strophe.WebSocket class is used internally by Strophe.Connection
 *  to encapsulate WebSocket sessions. It is not meant to be used from user's code.
 */

/** File: websocket.js
 *  A JavaScript library to enable XMPP over Websocket in Strophejs.
 *
 *  This file implements XMPP over WebSockets for Strophejs.
 *  If a Connection is established with a Websocket url (ws://...)
 *  Strophe will use WebSockets.
 *  For more information on XMPP-over-WebSocket see RFC 7395:
 *  http://tools.ietf.org/html/rfc7395
 *
 *  WebSocket support implemented by Andreas Guth (andreas.guth@rwth-aachen.de)
 */

/** PrivateConstructor: Strophe.Websocket
 *  Create and initialize a Strophe.WebSocket object.
 *  Currently only sets the connection Object.
 *
 *  Parameters:
 *    (Strophe.Connection) connection - The Strophe.Connection that will use WebSockets.
 *
 *  Returns:
 *    A new Strophe.WebSocket object.
 */
Strophe.Websocket = function(connection) {
    this._conn = connection;
    this.strip = "wrapper";

    var service = connection.service;
    if (service.indexOf("ws:") !== 0 && service.indexOf("wss:") !== 0) {
        // If the service is not an absolute URL, assume it is a path and put the absolute
        // URL together from options, current URL and the path.
        var new_service = "";

        if (connection.options.protocol === "ws" && window.location.protocol !== "https:") {
            new_service += "ws";
        } else {
            new_service += "wss";
        }

        new_service += "://" + window.location.host;

        if (service.indexOf("/") !== 0) {
            new_service += window.location.pathname + service;
        } else {
            new_service += service;
        }

        connection.service = new_service;
    }
};

Strophe.Websocket.prototype = {
    /** PrivateFunction: _buildStream
     *  _Private_ helper function to generate the <stream> start tag for WebSockets
     *
     *  Returns:
     *    A Strophe.Builder with a <stream> element.
     */
    _buildStream: function () {
        return $build("open", {
            "xmlns": Strophe.NS.FRAMING,
            "to": this._conn.domain,
            "version": '1.0'
        });
    },

    /** PrivateFunction: _check_streamerror
     * _Private_ checks a message for stream:error
     *
     *  Parameters:
     *    (Strophe.Request) bodyWrap - The received stanza.
     *    connectstatus - The ConnectStatus that will be set on error.
     *  Returns:
     *     true if there was a streamerror, false otherwise.
     */
    _check_streamerror: function (bodyWrap, connectstatus) {
        var errors;
        if (bodyWrap.getElementsByTagNameNS) {
            errors = bodyWrap.getElementsByTagNameNS(Strophe.NS.STREAM, "error");
        } else {
            errors = bodyWrap.getElementsByTagName("stream:error");
        }
        if (errors.length === 0) {
            return false;
        }
        var error = errors[0];

        var condition = "";
        var text = "";

        var ns = "urn:ietf:params:xml:ns:xmpp-streams";
        for (var i = 0; i < error.childNodes.length; i++) {
            var e = error.childNodes[i];
            if (e.getAttribute("xmlns") !== ns) {
                break;
            } if (e.nodeName === "text") {
                text = e.textContent;
            } else {
                condition = e.nodeName;
            }
        }

        var errorString = "WebSocket stream error: ";

        if (condition) {
            errorString += condition;
        } else {
            errorString += "unknown";
        }

        if (text) {
            errorString += " - " + condition;
        }

        Strophe.error(errorString);

        // close the connection on stream_error
        this._conn._changeConnectStatus(connectstatus, condition);
        this._conn._doDisconnect();
        return true;
    },

    /** PrivateFunction: _reset
     *  Reset the connection.
     *
     *  This function is called by the reset function of the Strophe Connection.
     *  Is not needed by WebSockets.
     */
    _reset: function () {
        return;
    },

    /** PrivateFunction: _connect
     *  _Private_ function called by Strophe.Connection.connect
     *
     *  Creates a WebSocket for a connection and assigns Callbacks to it.
     *  Does nothing if there already is a WebSocket.
     */
    _connect: function () {
        // Ensure that there is no open WebSocket from a previous Connection.
        this._closeSocket();

        // Create the new WobSocket
        this.socket = new WebSocket(this._conn.service, "xmpp");
        this.socket.onopen = this._onOpen.bind(this);
        this.socket.onerror = this._onError.bind(this);
        this.socket.onclose = this._onClose.bind(this);
        this.socket.onmessage = this._connect_cb_wrapper.bind(this);
    },

    /** PrivateFunction: _connect_cb
     *  _Private_ function called by Strophe.Connection._connect_cb
     *
     * checks for stream:error
     *
     *  Parameters:
     *    (Strophe.Request) bodyWrap - The received stanza.
     */
    _connect_cb: function(bodyWrap) {
        var error = this._check_streamerror(bodyWrap, Strophe.Status.CONNFAIL);
        if (error) {
            return Strophe.Status.CONNFAIL;
        }
    },

    /** PrivateFunction: _handleStreamStart
     * _Private_ function that checks the opening <open /> tag for errors.
     *
     * Disconnects if there is an error and returns false, true otherwise.
     *
     *  Parameters:
     *    (Node) message - Stanza containing the <open /> tag.
     */
    _handleStreamStart: function(message) {
        var error = false;

        // Check for errors in the <open /> tag
        var ns = message.getAttribute("xmlns");
        if (typeof ns !== "string") {
            error = "Missing xmlns in <open />";
        } else if (ns !== Strophe.NS.FRAMING) {
            error = "Wrong xmlns in <open />: " + ns;
        }

        var ver = message.getAttribute("version");
        if (typeof ver !== "string") {
            error = "Missing version in <open />";
        } else if (ver !== "1.0") {
            error = "Wrong version in <open />: " + ver;
        }

        if (error) {
            this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, error);
            this._conn._doDisconnect();
            return false;
        }

        return true;
    },

    /** PrivateFunction: _connect_cb_wrapper
     * _Private_ function that handles the first connection messages.
     *
     * On receiving an opening stream tag this callback replaces itself with the real
     * message handler. On receiving a stream error the connection is terminated.
     */
    _connect_cb_wrapper: function(message) {
        if (message.data.indexOf("<open ") === 0 || message.data.indexOf("<?xml") === 0) {
            // Strip the XML Declaration, if there is one
            var data = message.data.replace(/^(<\?.*?\?>\s*)*/, "");
            if (data === '') return;

            var streamStart = new DOMParser().parseFromString(data, "text/xml").documentElement;
            this._conn.xmlInput(streamStart);
            this._conn.rawInput(message.data);

            //_handleStreamSteart will check for XML errors and disconnect on error
            if (this._handleStreamStart(streamStart)) {
                //_connect_cb will check for stream:error and disconnect on error
                this._connect_cb(streamStart);
            }
        } else if (message.data.indexOf("<close ") === 0) { //'<close xmlns="urn:ietf:params:xml:ns:xmpp-framing />') {
            this._conn.rawInput(message.data);
            this._conn.xmlInput(message);
            var see_uri = message.getAttribute("see-other-uri");
            if (see_uri) {
                this._conn._changeConnectStatus(Strophe.Status.REDIRECT, "Received see-other-uri, resetting connection");
                this._conn.reset();
                this._conn.service = see_uri;
                this._connect();
            } else {
                this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "Received closing stream");
                this._conn._doDisconnect();
            }
        } else {
            var string = this._streamWrap(message.data);
            var elem = new DOMParser().parseFromString(string, "text/xml").documentElement;
            this.socket.onmessage = this._onMessage.bind(this);
            this._conn._connect_cb(elem, null, message.data);
        }
    },

    /** PrivateFunction: _disconnect
     *  _Private_ function called by Strophe.Connection.disconnect
     *
     *  Disconnects and sends a last stanza if one is given
     *
     *  Parameters:
     *    (Request) pres - This stanza will be sent before disconnecting.
     */
    _disconnect: function (pres) {
        if (this.socket && this.socket.readyState !== WebSocket.CLOSED) {
            if (pres) {
                this._conn.send(pres);
            }
            var close = $build("close", { "xmlns": Strophe.NS.FRAMING });
            this._conn.xmlOutput(close);
            var closeString = Strophe.serialize(close);
            this._conn.rawOutput(closeString);
            try {
                this.socket.send(closeString);
            } catch (e) {
                Strophe.info("Couldn't send <close /> tag.");
            }
        }
        this._conn._doDisconnect();
    },

    /** PrivateFunction: _doDisconnect
     *  _Private_ function to disconnect.
     *
     *  Just closes the Socket for WebSockets
     */
    _doDisconnect: function () {
        Strophe.info("WebSockets _doDisconnect was called");
        this._closeSocket();
    },

    /** PrivateFunction _streamWrap
     *  _Private_ helper function to wrap a stanza in a <stream> tag.
     *  This is used so Strophe can process stanzas from WebSockets like BOSH
     */
    _streamWrap: function (stanza) {
        return "<wrapper>" + stanza + '</wrapper>';
    },


    /** PrivateFunction: _closeSocket
     *  _Private_ function to close the WebSocket.
     *
     *  Closes the socket if it is still open and deletes it
     */
    _closeSocket: function () {
        if (this.socket) { try {
            this.socket.close();
        } catch (e) {} }
        this.socket = null;
    },

    /** PrivateFunction: _emptyQueue
     * _Private_ function to check if the message queue is empty.
     *
     *  Returns:
     *    True, because WebSocket messages are send immediately after queueing.
     */
    _emptyQueue: function () {
        return true;
    },

    /** PrivateFunction: _onClose
     * _Private_ function to handle websockets closing.
     *
     * Nothing to do here for WebSockets
     */
    _onClose: function() {
        if(this._conn.connected && !this._conn.disconnecting) {
            Strophe.error("Websocket closed unexpectedly");
            this._conn._doDisconnect();
        } else {
            Strophe.info("Websocket closed");
        }
    },

    /** PrivateFunction: _no_auth_received
     *
     * Called on stream start/restart when no stream:features
     * has been received.
     */
    _no_auth_received: function (_callback) {
        Strophe.error("Server did not send any auth methods");
        this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "Server did not send any auth methods");
        if (_callback) {
            _callback = _callback.bind(this._conn);
            _callback();
        }
        this._conn._doDisconnect();
    },

    /** PrivateFunction: _onDisconnectTimeout
     *  _Private_ timeout handler for handling non-graceful disconnection.
     *
     *  This does nothing for WebSockets
     */
    _onDisconnectTimeout: function () {},

    /** PrivateFunction: _abortAllRequests
     *  _Private_ helper function that makes sure all pending requests are aborted.
     */
    _abortAllRequests: function () {},

    /** PrivateFunction: _onError
     * _Private_ function to handle websockets errors.
     *
     * Parameters:
     * (Object) error - The websocket error.
     */
    _onError: function(error) {
        Strophe.error("Websocket error " + error);
        this._conn._changeConnectStatus(Strophe.Status.CONNFAIL, "The WebSocket connection could not be established or was disconnected.");
        this._disconnect();
    },

    /** PrivateFunction: _onIdle
     *  _Private_ function called by Strophe.Connection._onIdle
     *
     *  sends all queued stanzas
     */
    _onIdle: function () {
        var data = this._conn._data;
        if (data.length > 0 && !this._conn.paused) {
            for (var i = 0; i < data.length; i++) {
                if (data[i] !== null) {
                    var stanza, rawStanza;
                    if (data[i] === "restart") {
                        stanza = this._buildStream().tree();
                    } else {
                        stanza = data[i];
                    }
                    rawStanza = Strophe.serialize(stanza);
                    this._conn.xmlOutput(stanza);
                    this._conn.rawOutput(rawStanza);
                    this.socket.send(rawStanza);
                }
            }
            this._conn._data = [];
        }
    },

    /** PrivateFunction: _onMessage
     * _Private_ function to handle websockets messages.
     *
     * This function parses each of the messages as if they are full documents.
     * [TODO : We may actually want to use a SAX Push parser].
     *
     * Since all XMPP traffic starts with
     *  <stream:stream version='1.0'
     *                 xml:lang='en'
     *                 xmlns='jabber:client'
     *                 xmlns:stream='http://etherx.jabber.org/streams'
     *                 id='3697395463'
     *                 from='SERVER'>
     *
     * The first stanza will always fail to be parsed.
     *
     * Additionally, the seconds stanza will always be <stream:features> with
     * the stream NS defined in the previous stanza, so we need to 'force'
     * the inclusion of the NS in this stanza.
     *
     * Parameters:
     * (string) message - The websocket message.
     */
    _onMessage: function(message) {
        var elem, data;
        // check for closing stream
        var close = '<close xmlns="urn:ietf:params:xml:ns:xmpp-framing" />';
        if (message.data === close) {
            this._conn.rawInput(close);
            this._conn.xmlInput(message);
            if (!this._conn.disconnecting) {
                this._conn._doDisconnect();
            }
            return;
        } else if (message.data.search("<open ") === 0) {
            // This handles stream restarts
            elem = new DOMParser().parseFromString(message.data, "text/xml").documentElement;
            if (!this._handleStreamStart(elem)) {
                return;
            }
        } else {
            data = this._streamWrap(message.data);
            elem = new DOMParser().parseFromString(data, "text/xml").documentElement;
        }

        if (this._check_streamerror(elem, Strophe.Status.ERROR)) {
            return;
        }

        //handle unavailable presence stanza before disconnecting
        if (this._conn.disconnecting &&
                elem.firstChild.nodeName === "presence" &&
                elem.firstChild.getAttribute("type") === "unavailable") {
            this._conn.xmlInput(elem);
            this._conn.rawInput(Strophe.serialize(elem));
            // if we are already disconnecting we will ignore the unavailable stanza and
            // wait for the </stream:stream> tag before we close the connection
            return;
        }
        this._conn._dataRecv(elem, message.data);
    },

    /** PrivateFunction: _onOpen
     * _Private_ function to handle websockets connection setup.
     *
     * The opening stream tag is sent here.
     */
    _onOpen: function() {
        Strophe.info("Websocket open");
        var start = this._buildStream();
        this._conn.xmlOutput(start.tree());

        var startString = Strophe.serialize(start);
        this._conn.rawOutput(startString);
        this.socket.send(startString);
    },

    /** PrivateFunction: _reqToData
     * _Private_ function to get a stanza out of a request.
     *
     * WebSockets don't use requests, so the passed argument is just returned.
     *
     *  Parameters:
     *    (Object) stanza - The stanza.
     *
     *  Returns:
     *    The stanza that was passed.
     */
    _reqToData: function (stanza) {
        return stanza;
    },

    /** PrivateFunction: _send
     *  _Private_ part of the Connection.send function for WebSocket
     *
     * Just flushes the messages that are in the queue
     */
    _send: function () {
        this._conn.flush();
    },

    /** PrivateFunction: _sendRestart
     *
     *  Send an xmpp:restart stanza.
     */
    _sendRestart: function () {
        clearTimeout(this._conn._idleTimeout);
        this._conn._onIdle.bind(this._conn)();
    }
};
return Strophe;
}));

(function(root){
    if(typeof define === 'function' && define.amd){
        define("strophe", [
            "strophe-core",
            "strophe-bosh",
            "strophe-websocket"
        ], function (wrapper) {
            return wrapper;
        });
    }
})(this);

/* jshint ignore:start */
if (callback) {
    if(typeof define === 'function' && define.amd){
        //For backwards compatability
        var n_callback = callback;
        if (typeof requirejs === 'function') {
            requirejs(["strophe"], function(o){
                n_callback(o.Strophe,o.$build,o.$msg,o.$iq,o.$pres);
            });
        } else {
            __browserify_shim_require__(["strophe"], function(o){
                n_callback(o.Strophe,o.$build,o.$msg,o.$iq,o.$pres);
            });
        }
    }else{
        return callback(Strophe, $build, $msg, $iq, $pres);
    }
}


})(function (Strophe, build, msg, iq, pres) {
    window.Strophe = Strophe;
    window.$build = build;
    window.$msg = msg;
    window.$iq = iq;
    window.$pres = pres;
});
/* jshint ignore:end */

; browserify_shim__define__module__export__(typeof Strophe != "undefined" ? Strophe : window.Strophe);

}).call(global, undefined, undefined, undefined, undefined, function defineExport(ex) { module.exports = ex; });

}).call(this,typeof global !== "undefined" ? global : typeof self !== "undefined" ? self : typeof window !== "undefined" ? window : {})

},{}],"nitro":[function(require,module,exports){
var Connection, Utils, _, getStropheAPI;

_ = require('underscore');

Connection = require('connection');

Utils = require('util/utils');

module.exports = window.Nitro = {
  ROSTER: require('components/roster').NAME,
  MESSAGING: require('components/messaging').NAME,
  STORAGE: require('components/storage').NAME,
  BLOCKLIST: require('components/blocklist').NAME,
  MUC: require('components/muc').NAME,
  YAHOO: require('enum/gateways').YAHOO,
  Status: require('enum/status'),
  PresenceShow: require('enum/presence_show'),
  XMPPPresence: require('enum/xmpp_presence'),
  PresenceType: require('enum/presence_type'),
  MessageType: require('enum/message_type'),
  MUCNode: require('enum/muc_node'),
  MUCRole: require('enum/muc_role'),
  MUCError: require('enum/muc_error'),
  MUCErrorType: require('enum/muc_error_type'),
  SubscriptionStatus: require('enum/subscription_status'),
  ComplianceError: require('enum/compliance_error'),
  YahooError: require('enum/yahoo_error'),
  Events: require('events/events'),
  IOEvent: require('events/io_event'),
  getConnection: Connection.get,
  getComponent: function() {
    var connection, error, error1;
    try {
      connection = Connection.get();
      return connection.getComponent.apply(connection, arguments);
    } catch (error1) {
      error = error1;
      return null;
    }
  }
};

Object.defineProperty(Nitro, 'connection', {
  get: function() {
    return Utils.tryCatch(function() {
      return Connection.get();
    })();
  }
});

Object.defineProperty(Nitro, 'eventManager', {
  get: function() {
    return Utils.tryCatch(function() {
      var ref;
      return (ref = Connection.get()) != null ? ref.eventManager : void 0;
    })();
  }
});

Object.defineProperty(Nitro, 'utils', {
  get: _.once(function() {
    var Matchers, XMPPUtils, retryer, stropheAPI;
    XMPPUtils = require('util/xmpp_utils');
    Matchers = require('util/matchers');
    retryer = require('util/retryer');
    stropheAPI = getStropheAPI(Strophe);
    return _.extend({}, Utils, XMPPUtils, Matchers, retryer, stropheAPI);
  })
});

getStropheAPI = function(strophe) {
  return {
    getBareJID: strophe.getBareJidFromJid,
    getResource: strophe.getResourceFromJid,
    serialize: strophe.serialize
  };
};


},{"components/blocklist":"components/blocklist","components/messaging":"components/messaging","components/muc":"components/muc","components/roster":"components/roster","components/storage":"components/storage","connection":"connection","enum/compliance_error":"enum/compliance_error","enum/gateways":"enum/gateways","enum/message_type":"enum/message_type","enum/muc_error":"enum/muc_error","enum/muc_error_type":"enum/muc_error_type","enum/muc_node":"enum/muc_node","enum/muc_role":"enum/muc_role","enum/presence_show":"enum/presence_show","enum/presence_type":"enum/presence_type","enum/status":"enum/status","enum/subscription_status":"enum/subscription_status","enum/xmpp_presence":"enum/xmpp_presence","enum/yahoo_error":"enum/yahoo_error","events/events":"events/events","events/io_event":"events/io_event","underscore":85,"util/matchers":"util/matchers","util/retryer":"util/retryer","util/utils":"util/utils","util/xmpp_utils":"util/xmpp_utils"}],"spec/adapters/adapters_spec":[function(require,module,exports){
var adapters, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, expect = ref.expect, assert = ref.assert;

adapters = require('adapters/adapters');

describe('Adapters', function() {
  describe('xmlToJSON', function() {
    return it('should convert XML to JSON', function() {
      return assert(true);
    });
  });
  return describe('jsonAttrs', function() {
    var expected, object;
    object = null;
    expected = null;
    afterEach(function() {
      object = null;
      return expected = null;
    });
    it('should group attributes under `attributes` object', function() {
      var newObj;
      object = {
        _attr1: 'attr1Val',
        _attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object);
      newObj.should.have.a.property('attributes').that.eqls({
        attr1: 'attr1Val',
        attr2: 'attr2Val'
      });
      newObj.should.not.have.a.property('_attr1');
      return newObj.should.not.have.a.property('_attr2');
    });
    it('should process an object that is an array', function() {
      var newObj;
      object = ["element1", "element2"];
      newObj = adapters.jsonAttrs(object);
      return newObj.should.eql(["element1", "element2"]);
    });
    it('should process an object with an array', function() {
      var newObj;
      object = {
        prop1: ["one", "two"]
      };
      newObj = adapters.jsonAttrs(object);
      return newObj.should.eql({
        prop1: ["one", "two"]
      });
    });
    it('should process an object with an array of objects', function() {
      var newObj;
      object = {
        prop1: [
          {
            el1Prop1: "el1Prop1",
            el1Prop2: "el1Prop2"
          }, {
            el2Prop1: "el2Prop1",
            el2Prop2: "el2Prop2"
          }
        ]
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        prop1: [
          {
            el1Prop1: "el1Prop1",
            el1Prop2: "el1Prop2"
          }, {
            el2Prop1: "el2Prop1",
            el2Prop2: "el2Prop2"
          }
        ]
      };
      return newObj.should.eql(expected);
    });
    it('should recurse to group attributes for each object property', function() {
      var newObj;
      object = {
        prop1: 'prop1Val',
        prop2: {
          prop2_prop1: 'prop2_prop1Val',
          prop2_prop2: 'prop2_prop2Val',
          _prop2_attr1: 'prop2_attr1Val',
          _prop2_attr2: 'prop2_attr2Val'
        },
        _attr1: 'attr1Val',
        _attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        attributes: {
          attr1: 'attr1Val',
          attr2: 'attr2Val'
        },
        prop1: 'prop1Val',
        prop2: {
          attributes: {
            prop2_attr1: 'prop2_attr1Val',
            prop2_attr2: 'prop2_attr2Val'
          },
          prop2_prop1: 'prop2_prop1Val',
          prop2_prop2: 'prop2_prop2Val'
        }
      };
      return newObj.should.eql(expected);
    });
    it('should handle an object with an array of objects containing attributes', function() {
      var newObj;
      object = {
        prop1: [
          {
            element1: 'element1Val',
            element2: {
              _el1Attr1: 'el1Attr1',
              _el1Attr2: 'el1Attr2'
            }
          }
        ]
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        prop1: [
          {
            element1: 'element1Val',
            element2: {
              attributes: {
                el1Attr1: 'el1Attr1',
                el1Attr2: 'el1Attr2'
              }
            }
          }
        ]
      };
      return newObj.should.eql(expected);
    });
    it('should handle arrays of objects', function() {
      var newObj;
      object = [
        {
          element1: {
            e1Prop1: 'e1Prop1Val',
            e1Prop2: 'e1Prop2Val',
            _e1Attr1: 'e1Attr1Val',
            _e1Attr2: 'e1Attr2Val'
          }
        }
      ];
      newObj = adapters.jsonAttrs(object);
      expected = [
        {
          element1: {
            e1Prop1: 'e1Prop1Val',
            e1Prop2: 'e1Prop2Val',
            attributes: {
              e1Attr1: 'e1Attr1Val',
              e1Attr2: 'e1Attr2Val'
            }
          }
        }
      ];
      return newObj.should.eql(expected);
    });
    it('should handle arrays of objects with attributes', function() {
      var newObj;
      object = [
        {
          element1: {
            e1Prop1: 'e1Prop1Val',
            e1Prop2: 'e1Prop2Val',
            _e1Attr1: 'e1Attr1Val',
            _e1Attr2: 'e1Attr2Val'
          },
          element2: {
            e2Prop1: 'e2Prop1Val',
            e2Prop2: 'e2Prop2Val',
            _e2Attr1: 'e2Attr1Val',
            _e2Attr2: 'e2Attr2Val'
          }
        }
      ];
      newObj = adapters.jsonAttrs(object);
      expected = [
        {
          element1: {
            e1Prop1: 'e1Prop1Val',
            e1Prop2: 'e1Prop2Val',
            attributes: {
              e1Attr1: 'e1Attr1Val',
              e1Attr2: 'e1Attr2Val'
            }
          },
          element2: {
            e2Prop1: 'e2Prop1Val',
            e2Prop2: 'e2Prop2Val',
            attributes: {
              e2Attr1: 'e2Attr1Val',
              e2Attr2: 'e2Attr2Val'
            }
          }
        }
      ];
      return newObj.should.eql(expected);
    });
    it('should handle a mix of object with arrays and without', function() {
      var newObj;
      object = {
        prop1: 'prop1Val',
        prop2: 'prop2Val',
        items: [
          "element1", "element2", {
            elementObj1: {
              elObjProp1: 'elObjProp1Val',
              elObjProp2: 'elObjProp2Val',
              _elObjAttr1: 'elObjAttr1Val',
              _elObjAttr2: 'elObjAttr2Val'
            }
          }
        ],
        _attr1: 'attr1Val',
        _attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        prop1: 'prop1Val',
        prop2: 'prop2Val',
        items: [
          "element1", "element2", {
            elementObj1: {
              elObjProp1: 'elObjProp1Val',
              elObjProp2: 'elObjProp2Val',
              attributes: {
                elObjAttr1: 'elObjAttr1Val',
                elObjAttr2: 'elObjAttr2Val'
              }
            }
          }
        ],
        attributes: {
          attr1: 'attr1Val',
          attr2: 'attr2Val'
        }
      };
      return newObj.should.eql(expected);
    });
    it('should allow a custom `attribute` object name', function() {
      var newObj;
      object = {
        _attr1: 'attr1Val',
        _attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object, {
        attrObjectName: "myAttributes"
      });
      expected = {
        myAttributes: {
          attr1: 'attr1Val',
          attr2: 'attr2Val'
        }
      };
      return newObj.should.eql(expected);
    });
    it('should allow a custom regexp to identify potential attributes', function() {
      var newObj;
      object = {
        _attribute_attr1: 'attr1Val',
        _attribute_attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object, {
        regexp: /^_attribute_/
      });
      expected = {
        attributes: {
          attribute_attr1: 'attr1Val',
          attribute_attr2: 'attr2Val'
        }
      };
      return newObj.should.eql(expected);
    });
    it('should allow a custom function to transform attribute property names', function() {
      var newObj;
      object = {
        _attr1: 'attr1Val',
        _attr2: 'attr2Val'
      };
      newObj = adapters.jsonAttrs(object, {
        nameTransform: function(name) {
          return "attr" + name;
        }
      });
      expected = {
        attributes: {
          attr_attr1: 'attr1Val',
          attr_attr2: 'attr2Val'
        }
      };
      return newObj.should.eql(expected);
    });
    it('should convert a \'__text\' property to a text property', function() {
      var newObj;
      object = {
        _attr1: 'attr1Val',
        _attr2: 'attr2Val',
        __text: 'some text value'
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        attributes: {
          attr1: 'attr1Val',
          attr2: 'attr2Val'
        },
        text: 'some text value'
      };
      return newObj.should.eql(expected);
    });
    return it('should convert nested \'__text\' properties to text properties', function() {
      var newObj;
      object = {
        _attr1: 'attr1Val',
        _attr2: 'attr2Val',
        __text: 'some text value',
        child: {
          _child_attr1: 'childAttr1Val',
          _child_attr2: 'childAttr2Val',
          __text: 'some child text value'
        }
      };
      newObj = adapters.jsonAttrs(object);
      expected = {
        attributes: {
          attr1: 'attr1Val',
          attr2: 'attr2Val'
        },
        text: 'some text value',
        child: {
          attributes: {
            child_attr1: 'childAttr1Val',
            child_attr2: 'childAttr2Val'
          },
          text: 'some child text value'
        }
      };
      return newObj.should.eql(expected);
    });
  });
});


},{"adapters/adapters":"adapters/adapters","spec/spec_helper":"spec/spec_helper"}],"spec/closure_spec":[function(require,module,exports){
var assert, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert;

describe('closures', function() {
  return describe('private variables', function() {
    describe('declared in a function outside of a closure', function() {
      var func;
      func = null;
      beforeEach(function() {
        return func = function() {
          var variable;
          variable = 0;
          return function() {
            return variable += 1;
          };
        };
      });
      afterEach(function() {
        return func = null;
      });
      it('should return 1 when created once', function() {
        var f;
        f = func();
        return f().should.equal(1);
      });
      return it('should maintain separate function environments when created twice', function() {
        var f1, f2;
        f1 = func();
        f1().should.equal(1);
        f1().should.equal(2);
        f1().should.equal(3);
        f2 = func();
        return f2().should.equal(1);
      });
    });
    return describe('defined by args passed into a function outside of a closure', function() {
      var func;
      func = null;
      beforeEach(function() {
        return func = function(arg) {
          return function() {
            return arg += 1;
          };
        };
      });
      afterEach(function() {
        return func = null;
      });
      it('should return 1 when created once', function() {
        var f;
        f = func(1);
        return f().should.equal(2);
      });
      return it('should maintain separate function environments when created twice', function() {
        var f1, f2;
        f1 = func(1);
        f1().should.equal(2);
        f1().should.equal(3);
        f1().should.equal(4);
        f2 = func(1);
        return f2().should.equal(2);
      });
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper"}],"spec/components/blocklist_spec":[function(require,module,exports){
var Blocklist, Strophe, X2JS, assert, fixtures, ref, sinon, trimFixture;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert, X2JS = ref.X2JS, fixtures = ref.fixtures, trimFixture = ref.trimFixture;

Strophe = require('strophe');

Blocklist = require('components/blocklist');

describe('Blocklist', function() {
  var blocklist, sendIQ, stropheHelper;
  blocklist = null;
  sendIQ = null;
  stropheHelper = {
    getBlocklistStanza: sinon.stub().returns(new Strophe.Builder()),
    getBlockStanza: sinon.stub().returns(new Strophe.Builder()),
    getUnblockStanza: sinon.stub().returns(new Strophe.Builder())
  };
  afterEach(function() {
    var helper;
    stropheHelper.getBlocklistStanza.reset();
    stropheHelper.getBlockStanza.reset();
    stropheHelper.getUnblockStanza.reset();
    Blocklist.destroy();
    blocklist = null;
    sendIQ = null;
    return helper = null;
  });
  describe('#getBlocklist()', function() {
    var reject, resolve;
    resolve = null;
    reject = null;
    beforeEach(function() {
      sendIQ = sinon.spy(function(options) {
        if (options == null) {
          options = {};
        }
        return resolve = options.resolve, reject = options.reject, options;
      });
      return blocklist = Blocklist.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      resolve = null;
      return reject = null;
    });
    it('should retrieve a blocklist by calling #sendIQ() with a stanza', function() {
      blocklist.getBlocklist();
      stropheHelper.getBlocklistStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
    return describe('when failure', function() {
      var errorMsg;
      errorMsg = null;
      beforeEach(function() {
        sinon.stub(console, 'error');
        return errorMsg = "You are not connected to Nitro!";
      });
      afterEach(function() {
        errorMsg = null;
        return console.error.restore();
      });
      it('should log an error to the console', function(done) {
        var promise;
        promise = blocklist.getBlocklist();
        promise.should.eventually.be.rejected.notify(done);
        promise.should.eventually.be.rejectedWith(errorMsg);
        return reject(errorMsg);
      });
      return it('should not affect the previously stored list of blocked contact JIDs', function(done) {
        blocklist._blockedJIDs = ['previousJID1', 'previousJID2'];
        blocklist.getBlocklist().should.eventually.be.rejected.then(function() {
          blocklist._blockedJIDs.should.eql(['previousJID1', 'previousJID2']);
          return done();
        });
        return reject(errorMsg);
      });
    });
  });
  describe('#block()', function() {
    beforeEach(function() {
      sendIQ = sinon.stub();
      return blocklist = Blocklist.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      return sendIQ.reset();
    });
    it('should accept a single plain jid', function() {
      var jid;
      jid = 'jid1';
      blocklist.block(jid);
      stropheHelper.getBlockStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
    return it('should block users by calling #sendIQ() with a stanza', function() {
      var jids;
      jids = ['jid1', 'jid2'];
      blocklist.block(jids);
      stropheHelper.getBlockStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  return describe('#unblock()', function() {
    beforeEach(function() {
      sendIQ = sinon.stub();
      return blocklist = Blocklist.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      return sendIQ.reset();
    });
    it('should accept a single plain jid', function() {
      var jid;
      jid = 'jid1';
      blocklist.unblock(jid);
      stropheHelper.getUnblockStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
    return it('should unblock users by calling #sendIQ() with a stanza', function() {
      var jids;
      jids = ['jid1', 'jid2'];
      blocklist.unblock(jids);
      stropheHelper.getUnblockStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
});


},{"components/blocklist":"components/blocklist","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/components/gateway_spec":[function(require,module,exports){
var Gateway, Strophe, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon, assert = ref.assert, expect = ref.expect;

Strophe = require('strophe');

Gateway = require('components/gateway');

describe('Gateway', function() {
  var gateway, getPassword, getUsername, send, sendIQ, stropheHelper;
  gateway = null;
  send = null;
  sendIQ = null;
  stropheHelper = null;
  getUsername = function(name) {
    if (name == null) {
      name = 'a';
    }
    return "user." + name + ".thomsonreuters.com@reuters.net";
  };
  getPassword = function() {
    return (new Date().getTime()).toString();
  };
  before(function() {
    return stropheHelper = {
      getRegisterStanza: sinon.stub().returns($iq()),
      getUnregisterStanza: sinon.stub().returns($iq()),
      getSubscriptionStanza: sinon.stub().returns($pres()),
      getPresenceStanza: sinon.stub().returns($pres()),
      getRosterStanza: sinon.stub().returns($iq())
    };
  });
  afterEach(function() {
    stropheHelper.getRegisterStanza.reset();
    stropheHelper.getUnregisterStanza.reset();
    stropheHelper.getSubscriptionStanza.reset();
    stropheHelper.getPresenceStanza.reset();
    return stropheHelper.getRosterStanza.reset();
  });
  describe('#register()', function() {
    var registerOptions;
    registerOptions = null;
    beforeEach(function() {
      sendIQ = sinon.stub();
      gateway = new Gateway({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      gateway.nitroConnected = true;
      gateway.jid = getUsername('self');
      return registerOptions = {
        username: getUsername('self-yahoo'),
        password: getPassword()
      };
    });
    it('should return a Q promise', function() {
      return gateway.register(registerOptions).__proto__.toString().should.equal("[object Promise]");
    });
    it('should call sendIQ with proper args', function() {
      gateway.register(registerOptions);
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: Strophe.Builder.prototype,
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
    it('should should return null when username is unspecified', function() {
      var promise;
      promise = gateway.register({
        password: getPassword()
      });
      return promise === null;
    });
    return it('should should return null when password is unspecified', function() {
      var promise;
      promise = gateway.register({
        username: getUsername()
      });
      return promise === null;
    });
  });
  describe('#unregister()', function() {
    beforeEach(function() {
      sendIQ = sinon.stub();
      return gateway = new Gateway({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    it('should return a Q promise', function() {
      return gateway.unregister().__proto__.toString().should.equal("[object Promise]");
    });
    return it('should call sendIQ with proper args', function() {
      gateway.unregister();
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: Strophe.Builder.prototype,
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  return describe('#setPresence()', function() {});
});


},{"components/gateway":"components/gateway","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/components/messaging_spec":[function(require,module,exports){
var Messaging, Strophe, assert, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert;

Strophe = require('strophe');

Messaging = require('components/messaging');

describe('Messaging', function() {
  var messages;
  messages = null;
  afterEach(function() {
    return messages = null;
  });
  return it('true', function() {
    return assert(true);
  });
});


},{"components/messaging":"components/messaging","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/components/muc_spec":[function(require,module,exports){
var MUC, Q, Strophe, assert, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert;

Strophe = require('strophe');

MUC = require('components/muc');

Q = require('Q');

describe('MUC', function() {
  var eventManager, getJID, muc, send, sendIQ, stropheHelper;
  muc = null;
  stropheHelper = null;
  before(function() {
    return stropheHelper = {
      getJoinStanza: sinon.stub().returns($pres()),
      getLeaveStanza: sinon.stub().returns($pres()),
      getDestroyGroupchatStanza: sinon.stub().returns($iq()),
      getGroupchatConfigForm: sinon.stub(),
      addGroupchatConfigField: sinon.stub(),
      getRoomDiscoStanza: sinon.stub().returns($iq()),
      getMemberListStanza: sinon.stub().returns($iq()),
      getMediatedInviteStanza: sinon.stub().returns($msg())
    };
  });
  afterEach(function() {
    stropheHelper.getJoinStanza.reset();
    stropheHelper.getLeaveStanza.reset();
    stropheHelper.getDestroyGroupchatStanza.reset();
    stropheHelper.getGroupchatConfigForm.reset();
    stropheHelper.addGroupchatConfigField.reset();
    stropheHelper.getRoomDiscoStanza.reset();
    stropheHelper.getMemberListStanza.reset();
    stropheHelper.getMediatedInviteStanza.reset();
    MUC.destroy();
    return muc = null;
  });
  getJID = sinon.spy(function() {
    return 'my.jid.thomsonreuters.com@reuters.net';
  });
  send = sinon.stub();
  sendIQ = sinon.spy(function(options) {
    console.log('resolving', options);
    return options.resolve(true);
  });
  eventManager = {
    listen: sinon.spy(function(path) {
      return path;
    }),
    stopListening: sinon.stub()
  };
  describe('#create()', function() {
    var invalidJID, name, validJID;
    validJID = 'foo.bar@conference.reuters.net';
    invalidJID = 'invalid';
    name = 'FooBar Chatroom';
    beforeEach(function() {
      var promise;
      muc = MUC.get({
        getJID: getJID,
        eventManager: eventManager,
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      promise = Q();
      sinon.stub(muc, 'join').returns(promise);
      return sinon.stub(muc, 'acceptDefaultConfiguration').returns(promise);
    });
    afterEach(function() {
      sendIQ.reset();
      send.reset();
      eventManager.listen.reset();
      eventManager.stopListening.reset();
      muc.join.restore();
      return muc.acceptDefaultConfiguration.restore();
    });
    it('should return a Q promise', function() {
      return muc.create().__proto__.toString().should.equal("[object Promise]");
    });
    it('should reject returned promise when given an invalid JID', function(done) {
      var promise;
      promise = muc.create({
        jid: invalidJID
      });
      promise.should.eventually.be.rejected.notify(done);
      return promise.should.eventually.be.rejectedWith("invalid groupchat jid " + invalidJID);
    });
    it('should call #join() with jid to create', function(done) {
      return muc.create({
        jid: validJID,
        name: name
      }).should.eventually.be.fulfilled.then(function() {
        return muc.join.should.have.been.calledOnce.calledWith(validJID);
      }).should.notify(done);
    });
    return it('should call #acceptDefaultConfiguration() with proper args', function(done) {
      return muc.create({
        jid: validJID,
        name: name
      }).should.eventually.be.fulfilled.then(function() {
        return muc.acceptDefaultConfiguration.should.have.been.calledOnce;
      }).should.notify(done);
    });
  });
  describe('#join()', function() {
    var invalidJID, validJID;
    validJID = 'foo.bar@conference.reuters.net';
    invalidJID = 'invalid';
    beforeEach(function() {
      return muc = MUC.get({
        getJID: getJID,
        eventManager: eventManager,
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      send.reset();
      eventManager.listen.reset();
      return eventManager.stopListening.reset();
    });
    it('should return a Q promise', function() {
      return muc.join().__proto__.toString().should.equal("[object Promise]");
    });
    return it('should reject returned promise when given an invalid JID', function(done) {
      var promise;
      promise = muc.join(invalidJID);
      promise.should.eventually.be.rejected.notify(done);
      return promise.should.eventually.be.rejectedWith("invalid groupchat jid " + invalidJID);
    });
  });
  describe('#leave()', function() {
    var invalidJID, validJID;
    validJID = 'foo.bar@conference.reuters.net';
    invalidJID = 'invalid';
    beforeEach(function() {
      return muc = MUC.get({
        getJID: getJID,
        eventManager: eventManager,
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      send.reset();
      eventManager.listen.reset();
      return eventManager.stopListening.reset();
    });
    it('should return a Q promise', function() {
      return muc.leave().__proto__.toString().should.equal("[object Promise]");
    });
    return it('should reject returned promise when given an invalid JID', function(done) {
      var promise;
      promise = muc.leave(invalidJID);
      promise.should.eventually.be.rejected.notify(done);
      return promise.should.eventually.be.rejectedWith("invalid groupchat jid " + invalidJID);
    });
  });
  describe('#destroy()', function() {
    var invalidJID, validJID;
    validJID = 'foo.bar@conference.reuters.net';
    invalidJID = 'invalid';
    beforeEach(function() {
      return muc = MUC.get({
        getJID: getJID,
        eventManager: eventManager,
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      send.reset();
      eventManager.listen.reset();
      return eventManager.stopListening.reset();
    });
    it('should return a Q promise', function() {
      return muc.destroy().__proto__.toString().should.equal("[object Promise]");
    });
    return it('should reject returned promise when given an invalid JID', function(done) {
      var promise;
      promise = muc.destroy(invalidJID);
      promise.should.eventually.be.rejected.notify(done);
      return promise.should.eventually.be.rejectedWith("invalid groupchat jid " + invalidJID);
    });
  });
  return describe('#acceptDefaultConfiguration()', function() {
    var invalidJID, validJID;
    validJID = 'foo.bar@conference.reuters.net';
    invalidJID = 'invalid';
    beforeEach(function() {
      return muc = MUC.get({
        getJID: getJID,
        eventManager: eventManager,
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      send.reset();
      eventManager.listen.reset();
      return eventManager.stopListening.reset();
    });
    it('should return a Q promise', function() {
      return muc.acceptDefaultConfiguration({
        jid: validJID,
        name: name
      }).__proto__.toString().should.equal("[object Promise]");
    });
    return it('should reject returned promise when given an invalid JID', function(done) {
      var promise;
      promise = muc.acceptDefaultConfiguration({
        jid: invalidJID,
        name: name
      });
      promise.should.eventually.be.rejected.notify(done);
      return promise.should.eventually.be.rejectedWith("invalid groupchat jid " + invalidJID);
    });
  });
});


},{"Q":1,"components/muc":"components/muc","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/components/roster_spec":[function(require,module,exports){
var PresenceType, Q, Roster, Strophe, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon, assert = ref.assert, expect = ref.expect, Q = ref.Q;

Strophe = require('strophe');

Roster = require('components/roster');

PresenceType = require('enum/presence_type');

describe('Roster', function() {
  var getUser, roster, send, sendIQ, stropheHelper;
  roster = null;
  send = null;
  sendIQ = null;
  getUser = function(name) {
    return {
      jid: "user." + name + ".thomsonreuters.com@reuters.net",
      name: name
    };
  };
  stropheHelper = null;
  before(function() {
    return stropheHelper = {
      getRosterStanza: sinon.stub().returns($iq()),
      getAddStanza: sinon.stub().returns($iq()),
      getRemoveStanza: sinon.stub().returns($iq()),
      getPresenceSubscriptionStanza: sinon.stub().returns($pres())
    };
  });
  afterEach(function() {
    stropheHelper.getRosterStanza.reset();
    stropheHelper.getAddStanza.reset();
    stropheHelper.getRemoveStanza.reset();
    stropheHelper.getPresenceSubscriptionStanza.reset();
    Roster.destroy();
    return roster = null;
  });
  describe('#getRoster()', function() {
    beforeEach(function() {
      sendIQ = sinon.stub();
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      return sendIQ.reset();
    });
    it('should return a Q promise', function() {
      return roster.getRoster().__proto__.toString().should.equal("[object Promise]");
    });
    return it('should call sendIQ with proper args', function() {
      roster.getRoster();
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: Strophe.Builder.prototype,
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  describe('#addContact()', function() {
    var reject, resolve, user1, user2;
    user1 = null;
    user2 = null;
    resolve = null;
    reject = null;
    beforeEach(function() {
      user1 = getUser(1);
      user2 = getUser(2);
      sinon.stub(console, 'warn');
      sendIQ = sinon.spy(function(options) {
        if (options == null) {
          options = {};
        }
        return resolve = options.resolve, reject = options.reject, options;
      });
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      sendIQ.reset();
      console.warn.restore();
      user1 = null;
      user2 = null;
      resolve = null;
      return reject = null;
    });
    it('should return a Q promise', function() {
      return roster.addContact(user1.jid).__proto__.toString().should.equal("[object Promise]");
    });
    describe('adding a single contact', function() {
      it('should require a valid contact', function(done) {
        return roster.addContact(null).should.eventually.be.rejected.notify(done);
      });
      it('should require a valid contact with at least a jid property', function(done) {
        return roster.addContact({}).should.eventually.be.rejected.notify(done);
      });
      it('should call #getAddStanza() on the stropheHelper', function() {
        roster.addContact(user1);
        return stropheHelper.getAddStanza.should.have.been.calledOnce;
      });
      it('should accept single string-based item', function() {
        roster.addContact(user1.jid);
        return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
          element: sinon.match.instanceOf(Strophe.Builder),
          resolve: sinon.match.func,
          reject: sinon.match.func
        }));
      });
      return it('should accept a single hash-based item', function() {
        roster.addContact(user1);
        return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
          element: sinon.match.instanceOf(Strophe.Builder),
          resolve: sinon.match.func,
          reject: sinon.match.func
        }));
      });
    });
    return describe('for contacts with groups', function() {
      return it('should call #getAddStanza() on stropheRoster', function() {
        user1.groups = ["GroupA", "GroupB"];
        roster.addContact(user1);
        return stropheHelper.getAddStanza.should.have.been.calledOnce.calledWith(user1.jid, user1.name, user1.groups);
      });
    });
  });
  describe('#removeContact()', function() {
    var reject, resolve, user1, user2;
    user1 = null;
    user2 = null;
    resolve = null;
    reject = null;
    beforeEach(function() {
      user1 = getUser(1);
      user2 = getUser(2);
      sendIQ = sinon.spy(function(options) {
        if (options == null) {
          options = {};
        }
        return resolve = options.resolve, reject = options.reject, options;
      });
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      user1 = null;
      user2 = null;
      resolve = null;
      reject = null;
      return sendIQ.reset();
    });
    it('should return a Q promise', function() {
      return roster.removeContact(user1.jid).__proto__.toString().should.equal("[object Promise]");
    });
    return describe('removing a single contact', function() {
      it('should require a valid contact', function(done) {
        return roster.removeContact(null).should.eventually.be.rejected.notify(done);
      });
      it('should require a valid contact with at least a jidl property', function(done) {
        return roster.removeContact({}).should.eventually.be.rejected.notify(done);
      });
      it('should call #getRemoveStanza() on the stropheHelper', function() {
        roster.removeContact(user1);
        return stropheHelper.getRemoveStanza.should.have.been.calledOnce;
      });
      it('should accept single string-based item', function() {
        roster.removeContact(user1.jid);
        return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
          element: sinon.match.instanceOf(Strophe.Builder),
          resolve: sinon.match.func,
          reject: sinon.match.func
        }));
      });
      return it('should accept a single hash-based item', function() {
        roster.removeContact(user1);
        return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
          element: sinon.match.instanceOf(Strophe.Builder),
          resolve: sinon.match.func,
          reject: sinon.match.func
        }));
      });
    });
  });
  describe('#invite()', function() {
    var user1;
    user1 = null;
    beforeEach(function() {
      user1 = getUser(1);
      roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return sinon.stub(roster, 'subscribe').returns(Q());
    });
    afterEach(function() {
      user1 = null;
      return roster.subscribe.restore();
    });
    it('should return a Q.Promise', function() {
      var subject;
      subject = roster.invite();
      return subject.__proto__.toString().should.equal("[object Promise]");
    });
    return it('should invoke #subscribe()', function() {
      roster.invite(user1);
      return roster.subscribe.should.have.been.calledOnce.calledWithExactly(user1);
    });
  });
  describe('#subscribe()', function() {
    var user1;
    user1 = null;
    beforeEach(function() {
      user1 = getUser(1);
      send = sinon.stub();
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      user1 = null;
      return send.reset();
    });
    it('should return a Q promise', function() {
      return roster.subscribe(user1).__proto__.toString().should.equal("[object Promise]");
    });
    it('should require a valid contact', function(done) {
      return roster.subscribe(null).should.eventually.be.rejected.notify(done);
    });
    it('should call #getPresenceSubscriptionStanza() on the rosterHelper', function() {
      roster.subscribe(user1.jid);
      return stropheHelper.getPresenceSubscriptionStanza.should.have.been.calledOnce.calledWithExactly(user1.jid, PresenceType.SUBSCRIBE);
    });
    return it('should call send with proper args', function() {
      roster.subscribe(user1.jid);
      return send.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder)
      }));
    });
  });
  describe('#subscribed()', function() {
    var user1;
    user1 = null;
    beforeEach(function() {
      user1 = getUser(1);
      send = sinon.stub();
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      user1 = null;
      return send.reset();
    });
    it('should return a Q promise', function() {
      return roster.subscribed(user1).__proto__.toString().should.equal("[object Promise]");
    });
    it('should require a valid contact', function(done) {
      return roster.subscribed(null).should.eventually.be.rejected.notify(done);
    });
    it('should call #getPresenceSubscriptionStanza() on the rosterHelper', function() {
      roster.subscribed(user1.jid);
      return stropheHelper.getPresenceSubscriptionStanza.should.have.been.calledOnce.calledWithExactly(user1.jid, PresenceType.SUBSCRIBED);
    });
    return it('should call send with proper args', function() {
      roster.subscribed(user1.jid);
      return send.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder)
      }));
    });
  });
  describe('#unsubscribe()', function() {
    var user1;
    user1 = null;
    beforeEach(function() {
      user1 = getUser(1);
      send = sinon.stub();
      return roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
    });
    afterEach(function() {
      user1 = null;
      return send.reset();
    });
    it('should return a Q promise', function() {
      return roster.unsubscribe().__proto__.toString().should.equal("[object Promise]");
    });
    it('should require a valid contact', function(done) {
      return roster.unsubscribe(null).should.eventually.be.rejected.notify(done);
    });
    it('should call #getPresenceSubscriptionStanza() on the rosterHelper', function() {
      roster.unsubscribe(user1.jid);
      return stropheHelper.getPresenceSubscriptionStanza.should.have.been.calledOnce.calledWithExactly(user1.jid, PresenceType.UNSUBSCRIBE);
    });
    return it('should call send with proper args', function() {
      roster.unsubscribe(user1.jid);
      return send.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder)
      }));
    });
  });
  return describe('#update() - alias for #addContact()', function() {
    beforeEach(function() {
      roster = Roster.get({
        send: send,
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return sinon.stub(roster, 'addContact');
    });
    afterEach(function() {
      return roster.addContact.restore();
    });
    return it('should call #addContact() with the same arguments passed to it', function() {
      var user;
      user = getUser(1);
      roster.updateContact(user);
      return roster.addContact.should.have.been.calledOnce.calledWithExactly(user);
    });
  });
});


},{"components/roster":"components/roster","enum/presence_type":"enum/presence_type","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/components/storage_spec":[function(require,module,exports){
var Storage, Strophe, assert, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert;

Strophe = require('strophe');

Storage = require('components/storage');

describe('Storage', function() {
  var sendIQ, stanza, storage, stropheHelper;
  storage = null;
  sendIQ = null;
  stanza = null;
  stropheHelper = null;
  stropheHelper = {
    getPreferencesStanza: sinon.stub().returns(new Strophe.Builder()),
    setPreferencesStanza: sinon.stub().returns(new Strophe.Builder()),
    getBookmarksStanza: sinon.stub().returns(new Strophe.Builder()),
    setBookmarksStanza: sinon.stub().returns(new Strophe.Builder())
  };
  beforeEach(function() {
    sendIQ = sinon.stub();
    stanza = new Strophe.Builder();
    return stropheHelper = {
      getPreferencesStanza: sinon.stub(),
      setPreferencesStanza: sinon.stub(),
      getBookmarksStanza: sinon.stub(),
      setBookmarksStanza: sinon.stub()
    };
  });
  afterEach(function() {
    Storage.destroy();
    sendIQ.reset();
    stropheHelper.getPreferencesStanza.reset();
    stropheHelper.setPreferencesStanza.reset();
    stropheHelper.getBookmarksStanza.reset();
    stropheHelper.setBookmarksStanza.reset();
    stropheHelper = null;
    return storage = null;
  });
  describe('#getPreferences()', function() {
    beforeEach(function() {
      storage = Storage.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return stropheHelper.getPreferencesStanza.returns(stanza);
    });
    return it('should call sendIQ()', function() {
      storage.getPreferences();
      stropheHelper.getPreferencesStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  describe('#setPreferences()', function() {
    beforeEach(function() {
      storage = Storage.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return stropheHelper.setPreferencesStanza.returns(stanza);
    });
    return it('should call sendIQ()', function() {
      var preferences;
      preferences = {};
      storage.setPreferences(preferences);
      stropheHelper.setPreferencesStanza.should.have.been.calledOnce.calledWith(preferences);
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  describe('#getBookmarks()', function() {
    beforeEach(function() {
      storage = Storage.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return stropheHelper.getBookmarksStanza.returns(stanza);
    });
    return it('should call sendIQ()', function() {
      storage.getBookmarks();
      stropheHelper.getBookmarksStanza.should.have.been.calledOnce;
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
  return describe('#setBookmarks()', function() {
    beforeEach(function() {
      storage = Storage.get({
        sendIQ: sendIQ,
        helper: stropheHelper
      });
      return stropheHelper.setBookmarksStanza.returns(stanza);
    });
    return it('should call sendIQ()', function() {
      var bookmarks;
      bookmarks = {};
      storage.setBookmarks(bookmarks);
      stropheHelper.setBookmarksStanza.should.have.been.calledOnce.calledWith(bookmarks);
      return sendIQ.should.have.been.calledOnce.calledWith(sinon.match({
        element: sinon.match.instanceOf(Strophe.Builder),
        resolve: sinon.match.func,
        reject: sinon.match.func
      }));
    });
  });
});


},{"components/storage":"components/storage","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/connection_spec":[function(require,module,exports){
var Blocklist, Connection, EventManager, IOEvent, RateLimiter, Roster, Status, Storage, Strophe, StropheIO, XMPPPresence, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon, assert = ref.assert, expect = ref.expect;

Strophe = require('strophe');

Connection = require('connection');

XMPPPresence = require('enum/xmpp_presence');

Roster = require('components/roster');

Storage = require('components/storage');

Blocklist = require('components/blocklist');

RateLimiter = require('util/rate_limiter');

EventManager = require('events/event_manager');

Status = require('enum/status');

StropheIO = require('strophe/strophe_io');

IOEvent = require('events/io_event');

describe('Connection', function() {
  var BlocklistStub, EventManagerStub, RosterStub, StorageStub, StropheConnectionStub, connection, specOptions;
  connection = null;
  specOptions = null;
  RosterStub = (function() {
    function RosterStub() {}

    return RosterStub;

  })();
  StorageStub = (function() {
    function StorageStub() {}

    return StorageStub;

  })();
  BlocklistStub = (function() {
    function BlocklistStub() {}

    return BlocklistStub;

  })();
  EventManagerStub = (function() {
    function EventManagerStub() {}

    EventManagerStub.prototype.toggleConnection = sinon.stub();

    return EventManagerStub;

  })();
  StropheConnectionStub = (function() {
    function StropheConnectionStub() {}

    StropheConnectionStub.prototype.connect = sinon.stub();

    StropheConnectionStub.prototype.send = sinon.stub();

    StropheConnectionStub.prototype.sendIQ = sinon.stub();

    StropheConnectionStub.prototype.reset = sinon.stub();

    StropheConnectionStub.prototype.addHandler = sinon.stub();

    StropheConnectionStub.prototype.deleteHandler = sinon.stub();

    return StropheConnectionStub;

  })();
  before(function() {
    Strophe.Connection = StropheConnectionStub;
    sinon.stub(EventManager, 'get').returns(new EventManagerStub());
    sinon.stub(Roster, 'get').returns(new RosterStub());
    sinon.stub(Storage, 'get').returns(new StorageStub());
    return sinon.stub(Blocklist, 'get').returns(new BlocklistStub());
  });
  after(function() {
    Strophe.Connection = null;
    Roster.get.restore();
    EventManager.get.restore();
    Storage.get.restore();
    return Blocklist.get.restore();
  });
  beforeEach(function() {
    specOptions = {
      appName: Connection.TEST_KEY,
      appVersion: "1.0"
    };
    return sinon.spy(_, 'bind');
  });
  afterEach(function() {
    _.bind.restore();
    if (connection != null) {
      connection._connection.send.reset();
    }
    if (connection != null) {
      connection._connection.sendIQ.reset();
    }
    Connection.destroy();
    connection = null;
    specOptions = null;
    return Roster.get.reset();
  });
  it('Connection class should be available on the window object', function() {
    return window.Connection.should.exist;
  });
  it('should return an empty object when directly instantiated', function() {
    return new Connection().should.be.empty;
  });
  describe('instantiating dependencies', function() {
    it('should retrieve the Roster singleton and inject dependencies', function() {
      connection = Connection.get(specOptions);
      return Roster.get.should.have.been.calledOnce.calledWith(sinon.match({
        send: sinon.match.func,
        sendIQ: sinon.match.func
      }));
    });
    it('should retrieve the Storage singleton and inject dependencies', function() {
      connection = Connection.get(specOptions);
      return Roster.get.should.have.been.calledOnce.calledWith(sinon.match({
        sendIQ: sinon.match.func
      }));
    });
    it('should bind send and sendIQ and addHandler and deleteHandler on Strophe.Connection', function() {
      connection = Connection.get(specOptions);
      _.bind.callCount.should.equal(4);
      _.bind.firstCall.should.have.been.calledWith(sinon.match.func, connection);
      _.bind.secondCall.should.have.been.calledWith(sinon.match.func, connection);
      return _.bind.thirdCall.should.have.been.calledWith(sinon.match.func, connection._connection);
    });
    return it('should connect Strophe with potential event listeners', function() {
      sinon.stub(StropheIO, 'connectIOListeners');
      connection = Connection.get(specOptions);
      StropheIO.connectIOListeners.should.have.been.calledOnce.calledWith({
        connection: connection._connection,
        getRawInputListeners: sinon.match.func,
        getRawOutputListeners: sinon.match.func,
        getXMLInputListeners: sinon.match.func,
        getXMLOutputListeners: sinon.match.func
      });
      return StropheIO.connectIOListeners.restore();
    });
  });
  describe('#addStropheListener()', function() {
    describe('adding a single listener', function() {
      beforeEach(function() {
        connection = Connection.get(specOptions);
        return sinon.stub(StropheIO, 'addIOListener');
      });
      afterEach(function() {
        return StropheIO.addIOListener.restore();
      });
      it('should register a single listener with StropheIO for raw input/output by default', function() {
        var listener, options;
        listener = sinon.stub();
        options = {
          listener: listener
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledTwice.calledWith(listener, StropheIO.rawInputListeners).calledWith(listener, StropheIO.rawOutputListeners);
      });
      it('should register a single listener with StropheIO for raw input', function() {
        var listener, options;
        listener = sinon.stub();
        options = {
          listener: listener,
          type: IOEvent.RAW,
          ioType: IOEvent.INPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listener, StropheIO.rawInputListeners);
      });
      it('should register a single listener with StropheIO for raw output', function() {
        var listener, options;
        listener = sinon.stub();
        options = {
          listener: listener,
          type: IOEvent.RAW,
          ioType: IOEvent.OUTPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listener, StropheIO.rawOutputListeners);
      });
      it('should register a single listener with StropheIO for XML input', function() {
        var listener, options;
        listener = sinon.stub();
        options = {
          listener: listener,
          type: IOEvent.XML,
          ioType: IOEvent.INPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listener, StropheIO.xmlInputListeners);
      });
      return it('should register a single listener with StropheIO for XML output', function() {
        var listener, options;
        listener = sinon.stub();
        options = {
          listener: listener,
          type: IOEvent.XML,
          ioType: IOEvent.OUTPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listener, StropheIO.xmlOutputListeners);
      });
    });
    return describe('adding multiple listeners', function() {
      beforeEach(function() {
        connection = Connection.get(specOptions);
        return sinon.stub(StropheIO, 'addIOListener');
      });
      afterEach(function() {
        return StropheIO.addIOListener.restore();
      });
      it('should register a multiple listeners with StropheIO for raw input/output by default', function() {
        var listener1, listener2, listeners, options;
        listener1 = sinon.stub();
        listener2 = sinon.stub();
        listeners = [listener1, listener2];
        options = {
          listener: listeners
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledTwice.calledWith(listeners, StropheIO.rawInputListeners).calledWith(listeners, StropheIO.rawOutputListeners);
      });
      it('should register a single listener with StropheIO for raw input', function() {
        var listener1, listener2, listeners, options;
        listener1 = sinon.stub();
        listener2 = sinon.stub();
        listeners = [listener1, listener2];
        options = {
          listener: listeners,
          type: IOEvent.RAW,
          ioType: IOEvent.INPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listeners, StropheIO.rawInputListeners);
      });
      it('should register a single listener with StropheIO for raw output', function() {
        var listener1, listener2, listeners, options;
        listener1 = sinon.stub();
        listener2 = sinon.stub();
        listeners = [listener1, listener2];
        options = {
          listener: listeners,
          type: IOEvent.RAW,
          ioType: IOEvent.OUTPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listeners, StropheIO.rawOutputListeners);
      });
      it('should register a single listener with StropheIO for XML input', function() {
        var listener1, listener2, listeners, options;
        listener1 = sinon.stub();
        listener2 = sinon.stub();
        listeners = [listener1, listener2];
        options = {
          listener: listeners,
          type: IOEvent.XML,
          ioType: IOEvent.INPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listeners, StropheIO.xmlInputListeners);
      });
      return it('should register a single listener with StropheIO for XML output', function() {
        var listener1, listener2, listeners, options;
        listener1 = sinon.stub();
        listener2 = sinon.stub();
        listeners = [listener1, listener2];
        options = {
          listener: listeners,
          type: IOEvent.XML,
          ioType: IOEvent.OUTPUT
        };
        connection.addStropheListener(options);
        return StropheIO.addIOListener.should.have.been.calledOnce.calledWithExactly(listeners, StropheIO.xmlOutputListeners);
      });
    });
  });
  describe('#status()', function() {
    beforeEach(function() {
      return connection = Connection.get(specOptions);
    });
    it('should have a default status of `disconnected`', function() {
      return connection.status().should.equal(Status.DISCONNECTED);
    });
    return it('should retrieve the current status of the connection', function() {
      connection._connectionStatus = Status.CONNECTED;
      return connection.status().should.equal(Status.CONNECTED);
    });
  });
  describe('#isConnected()', function() {
    beforeEach(function() {
      return connection = Connection.get(specOptions);
    });
    it('should return true if the connection status is `CONNECTED`', function() {
      connection._connectionStatus = Status.CONNECTED;
      return connection.isConnected().should.be["true"];
    });
    return it('should return true if the connection status is `CONNECTED`', function() {
      connection._connectionStatus = Status.DISCONNECTED;
      return connection.isConnected().should.be["false"];
    });
  });
  describe('getAppName', function() {
    beforeEach(function() {
      return connection = Connection.get(specOptions);
    });
    return it('should return an `appName` String', function() {
      return connection.getAppName().should.equal(Connection.TEST_KEY);
    });
  });
  describe('getAppVersion', function() {
    beforeEach(function() {
      return connection = Connection.get(specOptions);
    });
    return it('should return an `appVersion` String', function() {
      return connection.getAppVersion().should.equal("1.0");
    });
  });
  describe('getAppService', function() {
    beforeEach(function() {
      specOptions = _.extend({}, specOptions, {
        service: "test-service"
      });
      return connection = Connection.get(specOptions);
    });
    return it('should return an `appVersion` String', function() {
      return connection.getService().should.equal("/test-service/");
    });
  });
  describe('#get()', function() {
    it('should return a singleton of Connection', function() {
      var connection2;
      connection = Connection.get(specOptions);
      connection2 = Connection.get(specOptions);
      return connection.should.equal(connection2);
    });
    it('should have a `connection` property that is a `Strophe.Connection`', function() {
      return Connection.get(specOptions).should.have.a.property('_connection').that.is.an["instanceof"](Strophe.Connection);
    });
    it('should rate limit the `#connect()` method of its Strophe Connection with aliases', function() {
      connection = Connection.get(specOptions);
      connection.should.have.a.property('_connectToServer').that.is.an["instanceof"](RateLimiter);
      connection._connectToServer.should.have.a.property('afterServerFailure').that.is.a('function');
      return connection._connectToServer.should.have.a.property('afterLongPollFailure').that.is.a('function');
    });
    it('should require an `appName` be passed in', function() {
      return expect(function() {
        return Connection.get({
          appName: null
        });
      }).to["throw"](Error);
    });
    return it('should require an `appVersion` be passed in', function() {
      var options;
      options = {
        appName: Connection.TEST_KEY,
        appVersion: null
      };
      return expect(function() {
        return Connection.get(options);
      }).to["throw"](Error);
    });
  });
  describe('#getComponent()', function() {
    beforeEach(function() {
      return connection = Connection.get(specOptions);
    });
    it('should throw an exception when passed a non-existent component', function() {
      var invalid;
      invalid = "invalidComponent";
      expect(function() {
        return connection.getComponent(invalid);
      }).to["throw"](Error);
      return expect(function() {
        return connection.getComponent(invalid);
      }).to["throw"]("Component '" + invalid + "' does not exist.");
    });
    it('should thow an exception if passed an invalid value', function() {
      expect(function() {
        return connection.getComponent();
      }).to["throw"](Error);
      expect(function() {
        return connection.getComponent(null);
      }).to["throw"](Error);
      expect(function() {
        return connection.getComponent(void 0);
      }).to["throw"](Error);
      expect(function() {
        return connection.getComponent({});
      }).to["throw"](Error);
      expect(function() {
        return connection.getComponent(false);
      }).to["throw"](Error);
      return expect(function() {
        return connection.getComponent(1);
      }).to["throw"](Error);
    });
    return it('should return an instance of the roster component when available', function() {
      return connection.getComponent(Roster.NAME).should.equal(connection._roster);
    });
  });
  return describe('#connect()', function() {
    var options, stropheConnectStub;
    options = null;
    stropheConnectStub = null;
    beforeEach(function() {
      stropheConnectStub = sinon.stub();
      sinon.stub(_, 'limit').returns(stropheConnectStub);
      connection = Connection.get(specOptions);
      options = {
        jid: "test@test.com",
        password: "password"
      };
      return _.bind.reset();
    });
    afterEach(function() {
      stropheConnectStub.reset();
      connection._connection.reset.reset();
      _.limit.restore();
      return options = null;
    });
    it('should return a promise', function() {
      return connection.connect(options).__proto__.toString().should.equal("[object Promise]");
    });
    describe('when a connection is already in progress', function() {
      var promise;
      promise = null;
      beforeEach(function(done) {
        promise = connection.connect(options);
        return done();
      });
      afterEach(function() {
        return promise = null;
      });
      it('should return a previous promise for a `pending` deferred', function() {
        var promise2;
        promise2 = connection.connect(options);
        promise2.should.equal(promise);
        promise2.isPending().should.be["true"];
        return stropheConnectStub.should.have.been.calledOnce;
      });
      it('should return a previous promise when the status is CONNECTING', function() {
        sinon.spy(connection._connectionDfd, 'notify');
        connection._connectionStatus = Status.CONNECTING;
        connection.connect(options);
        return connection._connectionDfd.notify.should.have.been.calledWith(Status.CONNECTING, "Aleady connecting to the Nitro server");
      });
      it('should return a previous promise when the status is AUTHENTICATING', function() {
        sinon.spy(connection._connectionDfd, 'notify');
        connection._connectionStatus = Status.AUTHENTICATING;
        connection.connect(options);
        return connection._connectionDfd.notify.should.have.been.calledWith(Status.AUTHENTICATING, "Already authenticating with the Nitro server");
      });
      return it('should return a previous promise when the status is DISCONNECTING', function() {
        sinon.spy(connection._connectionDfd, 'notify');
        connection._connectionStatus = Status.DISCONNECTED;
        connection.connect(options);
        return connection._connectionDfd.notify.should.have.been.calledWith(Status.DISCONNECTED, "Already disconnecting from the Nitro server");
      });
    });
    it('should immediately return a resolved promise if status is already CONNECTED', function() {
      connection._connectionStatus = Status.CONNECTED;
      connection.connect(options).should.be.fulfilled;
      return stropheConnectStub.should.not.have.been.called;
    });
    it('should call `connect()` on the Strophe connection object', function() {
      connection.connect(options);
      stropheConnectStub.should.have.been.calledOnce.calledWith(options.jid, options.password);
      return _.bind.should.have.been.calledOnce;
    });
    it('should return a failed promise if credentials are invalid', function(done) {
      options = {
        jid: null,
        password: null
      };
      connection.connect(options).should.eventually.be.rejectedWith("Can not connect due to missing credentials");
      return connection.connect(options).should.eventually.be.rejected.notify(done);
    });
    describe('handling status updates with `onConnectionStatus()`', function() {
      beforeEach(function() {
        return sinon.stub(connection, 'getJID');
      });
      afterEach(function() {
        connection.getJID.restore();
        connection.eventManager.toggleConnection.reset();
        return connection._connection.reset.reset();
      });
      it('should handle the CONNECTED status', function(done) {
        var handlerFunction, jid;
        connection.getJID.returns(jid = "selfJID");
        connection.connect(options).should.eventually.be.fulfilled.notify(done);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.CONNECTED);
        connection.status().should.equal(Status.CONNECTED);
        return connection.eventManager.toggleConnection.should.have.been.calledOnce.calledWith(true);
      });
      it('should handle the CONNECTING status', function(done) {
        var handlerFunction;
        connection.connect(options).progress(function() {
          return done();
        });
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.CONNECTING);
        connection.status().should.equal(Status.CONNECTING);
        return connection.eventManager.toggleConnection.should.not.have.been.called;
      });
      it('should handle the AUTHENTICATING status', function(done) {
        var handlerFunction;
        connection.connect(options).progress(function() {
          return done();
        });
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.AUTHENTICATING);
        connection.status().should.equal(Status.AUTHENTICATING);
        return connection.eventManager.toggleConnection.should.not.have.been.called;
      });
      it('should handle the CONNFAIL status', function(done) {
        var handlerFunction;
        connection.connect(options).should.eventually.be.rejected.notify(done);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.CONNFAIL);
        connection.status().should.equal(Status.CONNFAIL);
        return connection.eventManager.toggleConnection.should.have.been.calledOnce.calledWith(false);
      });
      it('should handle the AUTHFAIL status', function(done) {
        var handlerFunction;
        connection.connect(options).should.eventually.be.rejected.notify(done);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.AUTHFAIL);
        connection.status().should.equal(Status.AUTHFAIL);
        return connection.eventManager.toggleConnection.should.not.have.been.called;
      });
      it('should handle the DISCONNECTING status', function() {
        var handlerFunction;
        connection.connect(options);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.DISCONNECTING);
        connection.status().should.equal(Status.DISCONNECTING);
        return connection.eventManager.toggleConnection.should.not.have.been.called;
      });
      it('should handle the DISCONNECTED status', function() {
        var handlerFunction;
        connection.connect(options);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.DISCONNECTED);
        connection.status().should.equal(Status.DISCONNECTED);
        return connection.eventManager.toggleConnection.should.have.been.calledOnce.calledWith(false);
      });
      it('should reset the Strophe connection on DISCONNECTED status', function() {
        var handlerFunction;
        connection.connect(options);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.DISCONNECTED);
        return connection._connection.reset.should.have.been.calledOnce;
      });
      it('should handle the FATAL_FAILURE status', function() {
        var handlerFunction;
        connection.connect(options);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, null, Status.FATAL_FAILURE);
        connection.status().should.equal(Status.FATAL_FAILURE);
        return connection.eventManager.toggleConnection.should.not.have.been.called;
      });
      return it('should reject any unknown status', function() {
        var handlerFunction;
        connection.connect(options);
        handlerFunction = _.bind.firstCall.args[0];
        handlerFunction.call(connection, connection._connectionDfd, "InvalidStatus");
        connection.status().should.equal(Status.DISCONNECTED);
        return connection.eventManager.toggleConnection.should.have.been.calledOnce.calledWith(false);
      });
    });
    return describe('#setPresence()', function() {
      var status;
      status = null;
      beforeEach(function() {
        return sinon.stub(connection, 'isConnected').returns(true);
      });
      afterEach(function() {
        return connection.isConnected.restore();
      });
      return it('should send AVAILABLE presence and return a fulfilled promise', function() {
        status = XMPPPresence.AVAILABLE;
        connection.setPresence(status).should.be.fulfilled;
        connection._connection.sendIQ.should.have.been.calledOnce;
        return connection._connection.sendIQ.firstCall.args[0].should.be instanceof Strophe.Builder;
      });
    });
  });
});


},{"components/blocklist":"components/blocklist","components/roster":"components/roster","components/storage":"components/storage","connection":"connection","enum/status":"enum/status","enum/xmpp_presence":"enum/xmpp_presence","events/event_manager":"events/event_manager","events/io_event":"events/io_event","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe","strophe/strophe_io":"strophe/strophe_io","util/rate_limiter":"util/rate_limiter"}],"spec/events/event_filters_spec":[function(require,module,exports){
var ChatStatesNS, EventFilters, convertXMLToStanza, expect, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, expect = ref.expect, convertXMLToStanza = ref.convertXMLToStanza;

ChatStatesNS = require('enum/chat_states_ns');

EventFilters = require('events/event_filters');

describe('EventFilters', function() {
  describe('#isMUC()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a MUC namespace', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/muc#user"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUC(stanza).should.be["true"];
    });
    it('should return false when the stanza contains a non MUC namespace', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUC(stanza).should.be["false"];
    });
    return it('should return false when the stanza contains no MUC namespace', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUC(stanza).should.be["false"];
    });
  });
  describe('#isntMUC()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return false when the stanza contains a MUC namespace', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/muc#user"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntMUC(stanza).should.be["false"];
    });
    it('should return true when the stanza contains a non MUC namespace', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntMUC(stanza).should.be["true"];
    });
    return it('should return true when the stanza contains no MUC namespace', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntMUC(stanza).should.be["true"];
    });
  });
  describe('#isMUCInvite()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a MUC namespace and also an invite element', function() {
      var stanza;
      xml = '<something> <x xmlns="http://jabber.org/protocol/muc#user"> <invite from="rm-qa_8.thomsonreuters.com@reuasmb.net" name="RM QA8 - Pioneer Investment Management SGRpA" email="rm-qa_8@thomsonreuters.com"> <reason>%7B%22id%22%3A%22groupchat-6ae8140conference.reuasmb.net%22%2C%</reason> </invite> </x> </something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCInvite(stanza).should.be["true"];
    });
    it('should return false when the stanza contains a MUC namespace but no invite element', function() {
      var stanza;
      xml = '<something> <x xmlns="http://jabber.org/protocol/muc#user"></x> </something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCInvite(stanza).should.be["false"];
    });
    it('should return false when the stanza contains a non MUC namespace', function() {
      var stanza;
      xml = '<something> <x xmlns="http://jabber.org/protocol"> <invite from="rm-qa_8.thomsonreuters.com@reuasmb.net" name="RM QA8 - Pioneer Investment Management SGRpA" email="rm-qa_8@thomsonreuters.com"> <reason>%7B%22id%22%3A%22groupchat-6ae8140conference.reuasmb.net%22%2C%</reason> </invite> </x> </something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCInvite(stanza).should.be["false"];
    });
    return it('should return false when the stanza contains no MUC namespace', function() {
      var stanza;
      xml = '<something> <invite from="rm-qa_8.thomsonreuters.com@reuasmb.net" name="RM QA8 - Pioneer Investment Management SGRpA" email="rm-qa_8@thomsonreuters.com"> <reason>%7B%22id%22%3A%22groupchat-6ae8140conference.reuasmb.net%22%2C%</reason> </invite> </something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCInvite(stanza).should.be["false"];
    });
  });
  describe('#hasType()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a `type` attribute', function() {
      var stanza;
      xml = '<something type="sometype"></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasType(stanza).should.be["true"];
    });
    return it('should return false when the stanza contains no `type` attribute', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasType(stanza).should.be["false"];
    });
  });
  describe('#isSelf()', function() {
    var selfID, xml;
    xml = null;
    selfID = null;
    beforeEach(function() {
      return selfID = "selfid";
    });
    afterEach(function() {
      xml = null;
      return selfID = null;
    });
    it('should return true when the stanza contains a `from` attribute that is the selfID', function() {
      var stanza;
      xml = '<something from="selfid"></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isSelf(stanza, selfID).should.be["true"];
    });
    it('should return false when the stanza contains a `from` atrribute that is not the selfID', function() {
      var stanza;
      xml = '<something from="anotherid"></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isSelf(stanza, selfID).should.be["false"];
    });
    return it('should return false when the stanza contains no `from` atrribute', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isSelf(stanza, selfID).should.be["false"];
    });
  });
  describe('#isntSelf()', function() {
    var selfID, xml;
    xml = null;
    selfID = null;
    beforeEach(function() {
      return selfID = "selfid";
    });
    afterEach(function() {
      xml = null;
      return selfID = null;
    });
    it('should return false when the stanza contains a `from` attribute that is the selfID', function() {
      var stanza;
      xml = '<something from="selfid"></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntSelf(stanza, selfID).should.be["false"];
    });
    it('should return true when the stanza contains a `from` atrribute that is not the selfID', function() {
      var stanza;
      xml = '<something from="anotherid"></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntSelf(stanza, selfID).should.be["true"];
    });
    return it('should return true when the stanza contains no `from` atrribute', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntSelf(stanza, selfID).should.be["true"];
    });
  });
  describe('#isRecipientUnavailable()', function() {
    var xml;
    xml = null;
    beforeEach(function() {});
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a `recipient-unavailable` stanza.', function() {
      var stanza;
      xml = '<message from="anotherid"><error><recipient-unavailable/></error></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRecipientUnavailable(stanza).should.be["true"];
    });
    return it('should return false when the stanza does not contain a `recipient-unavailable` stanza.', function() {
      var stanza;
      xml = '<something></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRecipientUnavailable(stanza).should.be["false"];
    });
  });
  describe('#isPreferences()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true for a preferences stanza', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage xmlns='storage:preferences' /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isPreferences(stanza).should.be["true"];
    });
    it('should return false for a bookmarks stanza', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage xmlns='storage:bookmarks' /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isPreferences(stanza).should.be["false"];
    });
    return it('should return false for a stanza missing the preferences xmlns', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isPreferences(stanza).should.be["false"];
    });
  });
  describe('#isBookmarks()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true for a bookmarks stanza', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage xmlns='storage:bookmarks' /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBookmarks(stanza).should.be["true"];
    });
    it('should return true for a preferences stanza', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage xmlns='storage:preferences' /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBookmarks(stanza).should.be["false"];
    });
    return it('should return false for a stanza missing the bookmarks xmlns', function() {
      var stanza;
      xml = "<iq type='set' xmlns='jabber:client'> <query xmlns='jabber:iq:private'> <storage /> </query> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBookmarks(stanza).should.be["false"];
    });
  });
  describe('#isRosterAdded()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true for a subscription of `none` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='none' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterAdded(stanza).should.be["true"];
    });
    it('should return true for a subscription of `from` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='from' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterAdded(stanza).should.be["true"];
    });
    return it('should return false for a subscription of `remove` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='remove' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterAdded(stanza).should.be["false"];
    });
  });
  describe('#isRosterRemoved()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true for a subscription of `remove` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='remove' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterRemoved(stanza).should.be["true"];
    });
    it('should return false for a subscription of `none` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='none' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterRemoved(stanza).should.be["false"];
    });
    return it('should return false for a subscription of `from` stanza', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro7b203ebee5fd8387' id='5811079' type='set'> <query xmlns='jabber:iq:roster'> <item jid='test.user.thomsonreuters.com@reuasmb.net' subscription='from' /> </query>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isRosterRemoved(stanza).should.be["false"];
    });
  });
  describe('#isBlocklistBlocked()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza includes a `block` element', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro68f46db05f00dd78' id='10:sendIQ' type='set'> <block xmlns='urn:xmpp:blocking'> <item jid='kevin.maes1.qa-test.com@reuasmb.net' /> </block> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBlocklistBlocked(stanza).should.be["true"];
    });
    return it('should return false if the stanza includes an `unblock` element', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro68f46db05f00dd78' id='10:sendIQ' type='set'> <unblock xmlns='urn:xmpp:blocking'> <item jid='kevin.maes1.qa-test.com@reuasmb.net' /> </unblock> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBlocklistBlocked(stanza).should.be["false"];
    });
  });
  describe('#isBlocklistUnblocked()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza includes a `block` element', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro68f46db05f00dd78' id='10:sendIQ' type='set'> <unblock xmlns='urn:xmpp:blocking'> <item jid='kevin.maes1.qa-test.com@reuasmb.net' /> </unblock> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBlocklistUnblocked(stanza).should.be["true"];
    });
    return it('should return false if the stanza includes an `unblock` element', function() {
      var stanza;
      xml = "<iq from='rm-qa_6.thomsonreuters.com@reuasmb.net' to='rm-qa_6.thomsonreuters.com@reuasmb.net/nitro68f46db05f00dd78' id='10:sendIQ' type='set'> <block xmlns='urn:xmpp:blocking'> <item jid='kevin.maes1.qa-test.com@reuasmb.net' /> </block> </iq>";
      stanza = convertXMLToStanza(xml);
      return EventFilters.isBlocklistUnblocked(stanza).should.be["false"];
    });
  });
  describe('.isConflict()', function() {
    it('should return true if a `conflict` stanza is included', function() {
      var result, stanza, xml;
      xml = "<body xmlns='http://jabber.org/protocol/httpbind' xmlns:stream='http://etherx.jabber.org/streams' ack='1429706565'> <stream:error> <conflict xmlns='urn:ietf:params:xml:ns:xmpp-streams'/> </stream:error> </body>";
      stanza = convertXMLToStanza(xml);
      result = EventFilters.isConflict(stanza);
      return result.should.be["true"];
    });
    return it('should return false if a `conflict` stanza is not included', function() {
      var result, stanza, xml;
      xml = "<body xmlns='http://jabber.org/protocol/httpbind' xmlns:stream='http://etherx.jabber.org/streams' ack='1429706565'> <stream:error /> </body>";
      stanza = convertXMLToStanza(xml);
      result = EventFilters.isConflict(stanza);
      return result.should.be["false"];
    });
  });
  describe('#run()', function() {
    var filter1, filter2, filters, selfID, stanza;
    stanza = null;
    filters = null;
    selfID = null;
    filter1 = null;
    filter2 = null;
    before(function() {
      filter1 = sinon.stub();
      return filter2 = sinon.stub();
    });
    after(function() {
      filter1 = null;
      return filter2 = null;
    });
    beforeEach(function() {
      return stanza = "<xml/>";
    });
    afterEach(function() {
      filter1.reset();
      filter2.reset();
      filters = null;
      stanza = null;
      return selfID = null;
    });
    it('should run all filters and return true if they all pass', function() {
      filter1.returns(true);
      filter2.returns(true);
      filters = [filter1, filter2];
      EventFilters.run(stanza, filters, selfID).should.be["true"];
      filter1.should.have.been.calledOnce.calledWithExactly(stanza, selfID);
      return filter2.should.have.been.calledOnce.calledWithExactly(stanza, selfID);
    });
    it('should run all filters and return false if any one fails', function() {
      filter1.returns(true);
      filter2.returns(false);
      filters = [filter1, filter2];
      EventFilters.run(stanza, filters, selfID).should.be["false"];
      filter1.should.have.been.calledOnce.calledWithExactly(stanza, selfID);
      return filter2.should.have.been.calledOnce.calledWithExactly(stanza, selfID);
    });
    return it('should run all filters and throw an exception if filter not found', function() {
      expect(function() {
        return EventFilters.run(stanza, [null], selfID);
      }).to["throw"].Error;
      expect(function() {
        return EventFilters.run(stanza, [void 0], selfID);
      }).to["throw"].Error;
      return expect(function() {
        return EventFilters.run(stanza, ['notAFunction'], selfID);
      }).to["throw"].Error;
    });
  });
  describe('.filterByRecipient()', function() {
    var callback, stanza;
    stanza = null;
    callback = null;
    beforeEach(function() {
      stanza = {
        getAttribute: sinon.stub()
      };
      callback = sinon.stub();
      return sinon.stub(EventFilters, 'matchBareJID');
    });
    afterEach(function() {
      EventFilters.matchBareJID.restore();
      stanza = null;
      return callback = null;
    });
    it('should return a function', function() {
      return EventFilters.filterByRecipient(callback, "stanzaJID").should.be.a('function');
    });
    it('should invoke the callback if attribute matches exact jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterByRecipient(callback, "stanzaJID");
      stanza.getAttribute.withArgs('to').returns("stanzaJID");
      filteredCallback(stanza);
      return callback.should.have.been.calledOnce.calledWith(stanza);
    });
    it('should not invoke the callback if attribute does not match the exact jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterByRecipient(callback, "somejid");
      stanza.getAttribute.withArgs('to').returns("stanzaJID");
      filteredCallback(stanza);
      return callback.should.not.have.been.called;
    });
    it('should invoke the callback if attribute at least matches the bare jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterByRecipient(callback, "expectedJID", true);
      stanza.getAttribute.withArgs('to').returns("stanzaJID");
      EventFilters.matchBareJID.withArgs("expectedJID", "stanzaJID").returns(true);
      filteredCallback(stanza);
      return callback.should.have.been.calledOnce.calledWith(stanza);
    });
    return it('should not invoke the callback if attribute does not even match the bare jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterByRecipient(callback, "expectedJID", true);
      stanza.getAttribute.withArgs('to').returns("stanzaJID");
      EventFilters.matchBareJID.withArgs("expectedJID", "stanzaJID").returns(false);
      filteredCallback(stanza);
      return callback.should.not.have.been.called;
    });
  });
  describe('.filterBySender()', function() {
    var callback, stanza;
    stanza = null;
    callback = null;
    beforeEach(function() {
      stanza = {
        getAttribute: sinon.stub()
      };
      callback = sinon.stub();
      return sinon.stub(EventFilters, 'matchBareJID');
    });
    afterEach(function() {
      EventFilters.matchBareJID.restore();
      stanza = null;
      return callback = null;
    });
    it('should return a function', function() {
      return EventFilters.filterBySender(callback, "stanzaJID").should.be.a('function');
    });
    it('should invoke the callback if attribute matches exact jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterBySender(callback, "stanzaJID");
      stanza.getAttribute.withArgs('from').returns("stanzaJID");
      filteredCallback(stanza);
      return callback.should.have.been.calledOnce.calledWith(stanza);
    });
    it('should not invoke the callback if attribute does not match the exact jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterBySender(callback, "somejid");
      stanza.getAttribute.withArgs('from').returns("stanzaJID");
      filteredCallback(stanza);
      return callback.should.not.have.been.called;
    });
    it('should invoke the callback if attribute at least matches the bare jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterBySender(callback, "expectedJID", true);
      stanza.getAttribute.withArgs('from').returns("stanzaJID");
      EventFilters.matchBareJID.withArgs("expectedJID", "stanzaJID").returns(true);
      filteredCallback(stanza);
      return callback.should.have.been.calledOnce.calledWith(stanza);
    });
    return it('should not invoke the callback if attribute does not even match the bare jid', function() {
      var filteredCallback;
      filteredCallback = EventFilters.filterBySender(callback, "expectedJID", true);
      stanza.getAttribute.withArgs('from').returns("stanzaJID");
      EventFilters.matchBareJID.withArgs("expectedJID", "stanzaJID").returns(false);
      filteredCallback(stanza);
      return callback.should.not.have.been.called;
    });
  });
  describe('#isHistoryFin()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a fin stanza', function() {
      var stanza;
      xml = '<something><fin xmlns="urn:xmpp:mam:tmp"></fin></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isHistoryFin(stanza).should.be["true"];
    });
    return it('should return false when the stanza does not contain a fin stanza', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isHistoryFin(stanza).should.be["false"];
    });
  });
  describe('#isntHistoryFin()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza does not contain a fin stanza', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntHistoryFin(stanza).should.be["true"];
    });
    return it('should return false when the stanza contains a fin stanza', function() {
      var stanza;
      xml = '<something><fin xmlns="urn:xmpp:mam:tmp"></fin></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntHistoryFin(stanza).should.be["false"];
    });
  });
  describe('#isMUCSubject()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a subject stanza', function() {
      var stanza;
      xml = '<message type="groupchat"><subject>the subject</subject></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCSubject(stanza).should.be["true"];
    });
    return it('should return false when the stanza does not contain a subject stanza', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isMUCSubject(stanza).should.be["false"];
    });
  });
  describe('#isntMUCSubject()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza does not contain a subject stanza', function() {
      var stanza;
      xml = '<something><x xmlns="http://jabber.org/protocol/"></x></something>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntMUCSubject(stanza).should.be["true"];
    });
    return it('should return false when the stanza contains a fin stanza', function() {
      var stanza;
      xml = '<message type="groupchat"><subject>the subject</subject></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntMUCSubject(stanza).should.be["false"];
    });
  });
  describe('#isTypingNotice()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true when the stanza contains a composing stanza', function() {
      var stanza;
      xml = '<message><composing xmlns="' + ChatStatesNS.CHAT_STATES + '"/></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isTypingNotice(stanza).should.be["true"];
    });
    return it('should return false when the stanza does not contain a composing stanza', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isTypingNotice(stanza).should.be["false"];
    });
  });
  describe('#isntTypingNotice()', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return false when the stanza contains a composing stanza', function() {
      var stanza;
      xml = '<message><composing xmlns="' + ChatStatesNS.CHAT_STATES + '"/></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntTypingNotice(stanza).should.be["false"];
    });
    return it('should return true when the stanza does not contain a composing stanza', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.isntTypingNotice(stanza).should.be["true"];
    });
  });
  describe('#hasBodyTag', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza has a body tag', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasBodyTag(stanza).should.be["true"];
    });
    return it('should return false if the stanza does not have a body tag', function() {
      var stanza;
      xml = '<message type="groupchat"></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasBodyTag(stanza).should.be["false"];
    });
  });
  describe('#hasntBodyTag', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza does not have a body tag', function() {
      var stanza;
      xml = '<message type="groupchat"></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasntBodyTag(stanza).should.be["true"];
    });
    return it('should return false if the stanza has a body tag', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasntBodyTag(stanza).should.be["false"];
    });
  });
  describe('#hasStatusTag', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza has a status tag', function() {
      var stanza;
      xml = '<message type="groupchat"><status code="104"/></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasStatusTag(stanza).should.be["true"];
    });
    return it('should return false if the stanza does not have a status tag', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasStatusTag(stanza).should.be["false"];
    });
  });
  return describe('#hasntStatusTag', function() {
    var xml;
    xml = null;
    afterEach(function() {
      return xml = null;
    });
    it('should return true if the stanza does not have a status tag', function() {
      var stanza;
      xml = '<message type="groupchat"><body>foo</body></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasntStatusTag(stanza).should.be["true"];
    });
    return it('should return false if the stanza has a status tag', function() {
      var stanza;
      xml = '<message type="groupchat"><status code="104"/></message>';
      stanza = convertXMLToStanza(xml);
      return EventFilters.hasntStatusTag(stanza).should.be["false"];
    });
  });
});


},{"enum/chat_states_ns":"enum/chat_states_ns","events/event_filters":"events/event_filters","spec/spec_helper":"spec/spec_helper"}],"spec/events/event_handler_spec":[function(require,module,exports){
var EventFilters, EventHandler, Strophe, _, convertXMLToStanza, expect, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, expect = ref.expect, _ = ref._, convertXMLToStanza = ref.convertXMLToStanza;

EventHandler = require('events/event_handler');

EventFilters = require('events/event_filters');

Strophe = require('strophe');

describe('EventHandler', function() {
  var eventHandler, path;
  eventHandler = null;
  path = null;
  beforeEach(function() {
    return path = 'path.to.event';
  });
  afterEach(function() {
    eventHandler = null;
    return path = null;
  });
  describe('#constructor()', function() {
    var config;
    config = null;
    beforeEach(function() {
      return config = {
        ns: 'ns',
        name: 'name',
        type: 'type',
        id: 'id',
        from: 'from',
        filters: ["a", "b"]
      };
    });
    afterEach(function() {
      return config = null;
    });
    it('should accept a config object', function() {
      eventHandler = new EventHandler(config);
      eventHandler.config.ns.should.equal(config.ns);
      eventHandler.config.name.should.equal(config.name);
      eventHandler.config.type.should.equal(config.type);
      eventHandler.config.id.should.equal(config.id);
      eventHandler.config.from.should.equal(config.from);
      return eventHandler.config.filters.should.equal(config.filters);
    });
    it('should accept a `matchBare` property', function() {
      config = _.extend(config, {
        matchBare: true
      });
      eventHandler = new EventHandler(config);
      eventHandler.config.matchBare.should.be["true"];
      return eventHandler.config.options.matchBare.should.be["true"];
    });
    it('should accept a `matchBare` property', function() {
      eventHandler = new EventHandler(config);
      expect(eventHandler.config.matchBare).to.not.exist;
      return eventHandler.config.options.matchBare.should.be["false"];
    });
    return it('should have an empty callbacks object', function() {
      return new EventHandler(config).should.have.a.property('_callbacks').that.eqls({});
    });
  });
  describe('#addCallback()', function() {
    var callback;
    callback = null;
    beforeEach(function() {
      return eventHandler = new EventHandler();
    });
    afterEach(function() {
      return callback = null;
    });
    it('should return an id', function() {
      var id;
      callback = sinon.stub();
      id = eventHandler.addCallback(callback);
      return id.should.be.a('string');
    });
    it('should add a callback', function() {
      var id;
      callback = sinon.stub();
      id = eventHandler.addCallback(callback);
      return eventHandler._callbacks[id].should.equal(callback);
    });
    return it('should return null if not passed a callback function', function() {
      expect(eventHandler.addCallback()).to.be["null"];
      expect(eventHandler.addCallback(null)).to.be["null"];
      expect(eventHandler.addCallback(1)).to.be["null"];
      expect(eventHandler.addCallback("function")).to.be["null"];
      expect(eventHandler.addCallback(true)).to.be["null"];
      return expect(eventHandler.addCallback([])).to.be["null"];
    });
  });
  describe('#hasCallbacks()', function() {
    beforeEach(function() {
      return eventHandler = new EventHandler();
    });
    it('should return true if there are callbacks', function() {
      eventHandler._callbacks = {
        'abcd': sinon.stub(),
        'efgh': sinon.stub()
      };
      return eventHandler.hasCallbacks().should.be["true"];
    });
    return it('should return false if there are no callbacks', function() {
      return eventHandler.hasCallbacks().should.be["false"];
    });
  });
  describe('#getStropheHandler()', function() {
    beforeEach(function() {
      return eventHandler = new EventHandler();
    });
    it('should return the Strophe.Handler instance if there is one', function() {
      var stropheHandler;
      stropheHandler = new Strophe.Handler();
      eventHandler._stropheHandler = stropheHandler;
      return eventHandler.getStropheHandler().should.equal(stropheHandler);
    });
    return it('should return null if there is no Strophe.Handler instance', function() {
      return expect(eventHandler.getStropheHandler()).to.be["null"];
    });
  });
  describe('#setStropheHandler()', function() {
    beforeEach(function() {
      return eventHandler = new EventHandler();
    });
    it('should set a Strophe.Handler instance', function() {
      var stropheHandler;
      stropheHandler = new Strophe.Handler();
      eventHandler.setStropheHandler(stropheHandler);
      return eventHandler._stropheHandler.should.equal(stropheHandler);
    });
    it('should not set anything that is not a Strophe.Handler instance', function() {
      var nonStropheHandler;
      nonStropheHandler = {};
      eventHandler.setStropheHandler(nonStropheHandler).should.equal(eventHandler);
      return expect(eventHandler._stropheHandler).to.be["null"];
    });
    it('should set the Strophe handler to null when the `reset` flag is true', function() {
      var stropheHandler;
      stropheHandler = new Strophe.Handler();
      eventHandler._stropheHandler = stropheHandler;
      eventHandler.setStropheHandler(null, true);
      return expect(eventHandler._stropheHandler).to.be["null"];
    });
    return it('should be a fluent method returning this', function() {
      var stropheHandler;
      stropheHandler = new Strophe.Handler();
      return eventHandler.setStropheHandler(stropheHandler).should.equal(eventHandler);
    });
  });
  describe('#reset()', function() {
    beforeEach(function() {
      eventHandler = new EventHandler();
      sinon.stub(eventHandler, 'setStropheHandler');
      return sinon.stub(eventHandler, 'resetCallbacks');
    });
    afterEach(function() {
      eventHandler.setStropheHandler.restore();
      return eventHandler.resetCallbacks.restore();
    });
    it('should reset the Strophe.Handler by calling #setStropheHandler()', function() {
      eventHandler.reset();
      return eventHandler.setStropheHandler.should.have.been.calledOnce.calledWithExactly(null, true);
    });
    return it('should reset the callbacks calling #resetCallbacks()', function() {
      eventHandler.reset();
      return eventHandler.resetCallbacks.should.have.been.calledOnce;
    });
  });
  describe('#resetCallbacks()', function() {
    beforeEach(function() {
      return eventHandler = new EventHandler();
    });
    it('should delete all callbacks', function() {
      var callbacks, deletedIds;
      callbacks = {
        abcd: sinon.stub(),
        efgh: sinon.stub()
      };
      eventHandler._callbacks = callbacks;
      deletedIds = eventHandler.resetCallbacks();
      return eventHandler._callbacks.should.be.empty;
    });
    return it('should return an array of deleted callback ids', function() {
      var callbacks, deletedIds;
      callbacks = {
        abcd: sinon.stub(),
        efgh: sinon.stub()
      };
      eventHandler._callbacks = callbacks;
      deletedIds = eventHandler.resetCallbacks();
      _.contains(deletedIds, 'abcd').should.be["true"];
      return _.contains(deletedIds, 'abcd').should.be["true"];
    });
  });
  describe('#getSignatureArgs()', function() {
    var selfJID;
    selfJID = null;
    beforeEach(function() {
      eventHandler = new EventHandler();
      return selfJID = 'selfJID';
    });
    afterEach(function() {
      return selfJID = null;
    });
    it('should store the selfJID passed into it', function() {
      eventHandler.getSignatureArgs(selfJID);
      return eventHandler.should.have.a.property('selfJID').that.equals(selfJID);
    });
    it('should return an array of selected values', function() {
      var config;
      config = {
        ns: 'ns',
        name: 'name',
        type: 'type',
        id: 'id',
        from: 'from',
        options: {}
      };
      eventHandler.config = config;
      return eventHandler.getSignatureArgs(selfJID).should.eql(['ns', 'name', 'type', 'id', 'from', {}]);
    });
    return it('should use selfJID when specified by the `from` field', function() {
      var config;
      config = {
        ns: 'ns',
        name: 'name',
        type: 'type',
        id: 'id',
        from: EventFilters.SELF_JID,
        options: {}
      };
      eventHandler.config = config;
      return eventHandler.getSignatureArgs(selfJID).should.eql(['ns', 'name', 'type', 'id', selfJID, {}]);
    });
  });
  return describe('#invokeCallbacks()', function() {
    var callback1, callback2, stanza;
    callback1 = null;
    callback2 = null;
    stanza = null;
    beforeEach(function() {
      eventHandler = new EventHandler();
      eventHandler.config.filters = [];
      eventHandler.selfJID = 'selfJID';
      callback1 = sinon.stub();
      callback2 = sinon.stub();
      eventHandler._callbacks = {
        abcd: callback1,
        efgh: callback2
      };
      stanza = convertXMLToStanza('<something><x xmlns="http://jabber.org/"></x></something>');
      return sinon.stub(EventFilters, 'run').returns(true);
    });
    afterEach(function() {
      EventFilters.run.restore();
      callback1 = null;
      callback2 = null;
      return stanza = null;
    });
    it('should run event filters', function() {
      eventHandler.invokeCallbacks(stanza);
      return EventFilters.run.should.have.been.calledOnce.calledWithExactly(stanza, eventHandler.config.filters, eventHandler.selfJID);
    });
    it('should exit early if it does not pass the filters', function() {
      EventFilters.run.returns(false);
      eventHandler.invokeCallbacks(stanza).should.equal(eventHandler);
      callback1.should.not.have.been.called;
      return callback2.should.not.have.been.called;
    });
    it('should invoke all callbacks', function() {
      eventHandler.invokeCallbacks(stanza);
      callback1.should.have.been.calledOnce.calledWithExactly(sinon.match.object);
      return callback2.should.have.been.calledOnce.calledWithExactly(sinon.match.object);
    });
    it('should catch any callback errors', function() {
      callback1.throws(new Error("callback error1"));
      return expect(function() {
        return eventHandler.invokeCallbacks(stanza);
      }).to.not["throw"].Error;
    });
    return it('should be a fluent method returning this', function() {
      return eventHandler.invokeCallbacks(stanza).should.equal(eventHandler);
    });
  });
});


},{"events/event_filters":"events/event_filters","events/event_handler":"events/event_handler","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe"}],"spec/events/event_manager_spec":[function(require,module,exports){
var EventHandler, EventManager, Strophe, Utils, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert, expect = ref.expect, _ = ref._;

Strophe = require('strophe');

EventManager = require('events/event_manager');

EventHandler = require('events/event_handler');

Utils = require('util/utils');

describe('EventManager', function() {
  var EventHandlerStub, addHandlerStub, deleteHandlerStub, eventManager, eventsConfig, lazyStub, options, selfJID;
  EventHandlerStub = (function() {
    function EventHandlerStub() {}

    EventHandlerStub.prototype.getStropheHandler = sinon.stub().returns(new Strophe.Handler());

    EventHandlerStub.prototype.setStropheHandler = sinon.stub();

    EventHandlerStub.prototype.addCallback = sinon.stub();

    EventHandlerStub.prototype.removeCallback = sinon.stub();

    EventHandlerStub.prototype.hasCallbacks = sinon.stub();

    EventHandlerStub.prototype.resetCallbacks = sinon.stub();

    EventHandlerStub.prototype.getSignatureArgs = sinon.stub();

    EventHandlerStub.prototype.invokeCallbacks = sinon.stub();

    EventHandlerStub.prototype.resetStropheHandler = sinon.stub();

    return EventHandlerStub;

  })();
  eventManager = null;
  addHandlerStub = null;
  deleteHandlerStub = null;
  eventsConfig = null;
  options = null;
  selfJID = null;
  lazyStub = null;
  before(function() {
    return sinon.stub(Utils, 'conditional');
  });
  after(function() {
    return Utils.conditional.restore();
  });
  beforeEach(function() {
    lazyStub = sinon.stub();
    Utils.conditional.returns(lazyStub);
    selfJID = "selfjid";
    addHandlerStub = sinon.stub();
    deleteHandlerStub = sinon.stub();
    eventsConfig = {
      'path.to.event1': {},
      'path.to.event2': {}
    };
    return options = {
      addHandler: addHandlerStub,
      deleteHandler: deleteHandlerStub,
      config: eventsConfig,
      handlerClass: EventHandlerStub
    };
  });
  afterEach(function() {
    lazyStub.reset();
    Utils.conditional.reset();
    eventManager = null;
    addHandlerStub.reset();
    deleteHandlerStub.reset();
    eventsConfig = null;
    options = null;
    selfJID = null;
    return EventManager.destroy();
  });
  describe('creating a singleton instance', function() {
    return it('should build an events dictionary', function() {
      var i, keys, len, results, value, values;
      eventManager = EventManager.get(options);
      eventManager.should.have.a.property('_eventsDictionary');
      keys = _.keys(eventManager._eventsDictionary);
      values = _.values(eventManager._eventsDictionary);
      keys.should.eql(_.keys(eventsConfig));
      results = [];
      for (i = 0, len = values.length; i < len; i++) {
        value = values[i];
        results.push(value.should.be.an["instanceof"](EventHandlerStub));
      }
      return results;
    });
  });
  describe('#toggleConnection()', function() {
    beforeEach(function() {
      return eventManager = EventManager.get(options);
    });
    it('should store the selfJID when connected', function() {
      eventManager.toggleConnection(true, selfJID);
      return eventManager._selfJID.should.equal(selfJID);
    });
    it('should add strophe handlers lazily, when connected', function() {
      Utils.conditional.returns(lazyStub);
      eventManager.toggleConnection(true, selfJID);
      return lazyStub.should.have.been.calledTwice.calledWith(sinon.match.instanceOf(EventHandlerStub), selfJID);
    });
    return it('should call #removeStropheHandlers when disconnected', function() {
      eventManager.toggleConnection(false);
      return deleteHandlerStub.should.have.been.calledTwice;
    });
  });
  describe('#listenTo()', function() {
    var callback1, callback2, path1, path2;
    path1 = null;
    path2 = null;
    callback1 = null;
    callback2 = null;
    beforeEach(function() {
      eventManager = EventManager.get(options);
      eventManager._selfJID = 'selfJID';
      path1 = 'path.to.event1';
      path2 = 'path.to.event2';
      callback1 = sinon.stub();
      return callback2 = sinon.stub();
    });
    afterEach(function() {
      path1 = null;
      path1 = null;
      callback1 = null;
      return callback2 = null;
    });
    it('should add a callback for a specified event path', function() {
      eventManager.listenTo(path1, callback1);
      return eventManager._eventsDictionary[path1].addCallback.should.have.been.calledOnce.calledWithExactly(callback1, false);
    });
    it('should return an id string', function() {
      var callback, callbackId, path1Handler;
      callback = sinon.stub();
      path1Handler = eventManager._eventsDictionary[path1];
      path1Handler.getStropheHandler.returns(null);
      path1Handler.addCallback.returns("abcd");
      callbackId = eventManager.listenTo(path1, callback1);
      return callback1.should.be.a.string;
    });
    it('should add a Strophe Handler for an event path that has not yet been listend to', function() {
      var callback, path1Handler;
      callback = sinon.stub();
      path1Handler = eventManager._eventsDictionary[path1];
      path1Handler.getStropheHandler.returns(null);
      path1Handler.addCallback.returns("abcd");
      eventManager.listenTo(path1, callback1);
      return lazyStub.should.have.been.calledOnce.calledWith(path1Handler, eventManager._selfJID);
    });
    it('should not instantiate a Strophe Handler for an event path that already has one', function() {
      var callback, path1Handler;
      callback = sinon.stub();
      path1Handler = eventManager._eventsDictionary[path1];
      path1Handler.getStropheHandler.returns(new Strophe.Handler());
      path1Handler.addCallback.returns("abcd");
      eventManager.listenTo(path1, callback1);
      return lazyStub.should.not.have.been.called;
    });
    return it('should throw an exception when trying to add a callback for an unsupported event', function() {
      var pathCallbacks;
      expect(function() {
        return listenTo('path.does.not.exist', callback1);
      }).to["throw"](Error);
      pathCallbacks = {
        'path.does.not.exist': callback1,
        'another.path.does.not.exist': callback2
      };
      return expect(function() {
        return listenTo(pathCallbacks);
      }).to["throw"](Error);
    });
  });
  describe('#listenToOnce()', function() {
    beforeEach(function() {
      eventManager = EventManager.get(options);
      return sinon.stub(eventManager, 'listenTo');
    });
    afterEach(function() {
      return eventManager.listenTo.restore();
    });
    return it('should call #listenTo() with the same arguments and an additional true flag', function() {
      var callback, path;
      path = "some.event.path";
      callback = sinon.stub();
      eventManager.listenToOnce(path, callback);
      return eventManager.listenTo.should.have.been.calledOnce.calledWithExactly(path, callback, true);
    });
  });
  return describe('#stopListening()', function() {
    var path1, path2;
    path1 = null;
    path2 = null;
    beforeEach(function() {
      eventManager = EventManager.get(options);
      path1 = 'path.to.event1';
      return path2 = 'path.to.event2';
    });
    afterEach(function() {
      path1 = null;
      return path2 = null;
    });
    it('should return the id of the callback being deleted', function() {
      var callbackId, path1Handler, result;
      callbackId = "abcd";
      path1Handler = eventManager._eventsDictionary[path1];
      path1Handler.removeCallback.withArgs(callbackId).returns('abcd');
      result = eventManager.stopListening(callbackId);
      return result.should.equal('abcd');
    });
    it('should return undefined if no callback exists with the specified id', function() {
      var callbackId, path1Handler, result;
      callbackId = "abcd";
      path1Handler = eventManager._eventsDictionary[path1];
      path1Handler.removeCallback.withArgs(callbackId).returns(null);
      result = eventManager.stopListening(callbackId);
      return expect(result).to.not.exist;
    });
    return it('should call #removeCallback() on each EventHandler instance', function() {
      var callbackId, path1Handler, path2Handler;
      callbackId = "abcd";
      eventManager._eventsDictionary = {
        'path1': path1Handler = {
          removeCallback: sinon.stub()
        },
        'path2': path2Handler = {
          removeCallback: sinon.stub()
        }
      };
      eventManager.stopListening(callbackId);
      path1Handler.removeCallback.should.have.been.calledOnce.calledWithExactly(callbackId);
      return path2Handler.removeCallback.should.have.been.calledOnce.calledWithExactly(callbackId);
    });
  });
});


},{"events/event_handler":"events/event_handler","events/event_manager":"events/event_manager","spec/spec_helper":"spec/spec_helper","strophe":"lib/strophe","util/utils":"util/utils"}],"spec/events/events_spec":[function(require,module,exports){
var EventFilters, Events, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, assert = ref.assert, expect = ref.expect, sinon = ref.sinon;

Events = require('events/events');

EventFilters = require('events/event_filters');

describe('Events', function() {
  describe('.filterByRecipient()', function() {
    beforeEach(function() {
      return sinon.stub(EventFilters, 'filterByRecipient');
    });
    afterEach(function() {
      return EventFilters.filterByRecipient.restore();
    });
    return it('should call #filterByRecipient() on EventFilters with the same arguments', function() {
      Events.filterByRecipient((function() {}), "jid");
      return EventFilters.filterByRecipient.should.have.been.calledOnce.calledWith(sinon.match.func, "jid");
    });
  });
  return describe('.filterBySender()', function() {
    before(function() {
      return sinon.stub(EventFilters, 'filterBySender');
    });
    afterEach(function() {
      return EventFilters.filterBySender.restore();
    });
    return it('should call #filterBySender() on EventFilters with the same arguments', function() {
      Events.filterBySender((function() {}), "jid");
      return EventFilters.filterBySender.should.have.been.calledOnce.calledWith(sinon.match.func, "jid");
    });
  });
});


},{"events/event_filters":"events/event_filters","events/events":"events/events","spec/spec_helper":"spec/spec_helper"}],"spec/framework_spec":[function(require,module,exports){
var Q, X2JS, _, assert, expect, fixtures, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, Q = ref.Q, assert = ref.assert, expect = ref.expect, sinon = ref.sinon;

describe('framework', function() {
  var x2js;
  x2js = null;
  before(function() {
    return x2js = new X2JS();
  });
  after(function() {
    return x2js = null;
  });
  describe('loading fixtures', function() {
    it('should load a file', function() {
      var body, json;
      fixtures.load('fixture1.html');
      body = fixtures.body();
      json = x2js.xml2json(x2js.parseXmlString(fixtures.body()));
      return json.testing.toString().should.equal("This is some content");
    });
    return it('should not access a previously loaded fixture', function() {
      return expect(fixtures.body()).to.not.exist;
    });
  });
  describe('unit test assertions', function() {
    it('should assert', function() {
      return assert(true);
    });
    return it('should expect', function() {
      return expect(null).to.be["null"];
    });
  });
  describe('underscore', function() {
    return it('should use underscore', function() {
      return _.isEmpty({}).should.be["true"];
    });
  });
  xdescribe('promises', function() {
    it('should call a done handler asynchronously', function(done) {
      var dfd, handler;
      handler = sinon.spy(function(data) {
        handler.should.have.been.calledOnce.calledWith("data");
        return done();
      });
      dfd = Q.defer();
      dfd.promise.then(handler);
      return dfd.resolve("data");
    });
    it('should immediately resolve a deferred and assert using chai-as-promised', function(done) {
      var dfd;
      dfd = Q.defer();
      dfd.resolve("data");
      return dfd.promise.should.eventually.equal("data").notify(done);
    });
    return it('should eventually resolve a deferred and assert using chai-as-promised', function(done) {
      var dfd;
      dfd = Q.defer();
      dfd.promise.should.eventually.equal("data").notify(done);
      return dfd.resolve("data");
    });
  });
  return describe('sinon useFakeTimers', function() {
    var clock;
    clock = null;
    beforeEach(function() {
      return clock = sinon.useFakeTimers();
    });
    afterEach(function() {
      return clock.restore();
    });
    it('should wait for a delay', function() {
      var a, time1, time2;
      a = 1;
      time1 = new Date().getTime();
      _.delay(function() {
        return a = 2;
      }, 1000);
      clock.tick(2000);
      time2 = new Date().getTime();
      a.should.equal(2);
      return (time2 - time1).should.equal(2000);
    });
    it('true', function() {
      return assert(true);
    });
    return it('should wait for setTimeout', function() {
      var a, time1, time2;
      a = 1;
      time1 = new Date().getTime();
      setTimeout(function() {
        return a = 2;
      }, 1000);
      clock.tick(2000);
      time2 = new Date().getTime();
      a.should.equal(2);
      return (time2 - time1).should.equal(2000);
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper"}],"spec/spec_helper":[function(require,module,exports){
var chai;

chai = require('chai');

module.exports = {
  fixtures: require('js-fixtures'),
  X2JS: require('xml-json-parser'),
  _: require('underscore'),
  Q: require('q'),
  chai: chai,
  sinon: require('sinon'),
  sinonChai: require('sinon-chai'),
  chaiAsPromised: require('chai-as-promised'),
  assert: chai.assert,
  expect: chai.expect,
  trimFixture: function(str) {
    return str.trim().replace(/(>(\s+|\n+|\r+| )<)/gm, "><");
  },
  convertXMLToStanza: function(xml) {
    var dom, parser;
    parser = new DOMParser();
    dom = parser.parseFromString(xml, "text/xml");
    return dom.firstChild;
  }
};


},{"chai":11,"chai-as-promised":10,"js-fixtures":46,"q":47,"sinon":57,"sinon-chai":56,"underscore":85,"xml-json-parser":90}],"spec/spec_runner":[function(require,module,exports){
var Q, X2JS, chai, chaiAsPromised, fixtures, ref, sinon, sinonChai;

ref = require('spec/spec_helper'), X2JS = ref.X2JS, sinon = ref.sinon, chai = ref.chai, fixtures = ref.fixtures, sinonChai = ref.sinonChai, chaiAsPromised = ref.chaiAsPromised;

Q = require('q');

require('spec/framework_spec');

require('spec/suites/util_suite_spec');

require('spec/suites/connection_suite_spec');

require('spec/suites/events_suite_spec');

require('spec/adapters/adapters_spec');

before(function() {
  var base;
  fixtures.path = 'fixtures';
  chai.use(sinonChai);
  chai.use(chaiAsPromised);
  chai.should();
  return (base = Function.prototype).bind != null ? base.bind : base.bind = function(thisp) {
    var fn;
    fn = this;
    return function() {
      return fn.apply(thisp, arguments);
    };
  };
});

afterEach(function() {
  return fixtures.cleanUp();
});


},{"q":47,"spec/adapters/adapters_spec":"spec/adapters/adapters_spec","spec/framework_spec":"spec/framework_spec","spec/spec_helper":"spec/spec_helper","spec/suites/connection_suite_spec":"spec/suites/connection_suite_spec","spec/suites/events_suite_spec":"spec/suites/events_suite_spec","spec/suites/util_suite_spec":"spec/suites/util_suite_spec"}],"spec/strophe/strophe_blocklist_spec":[function(require,module,exports){
var _, expect, fixtures, ref, sinon, stropheBlocklist, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, trimFixture = ref.trimFixture;

stropheBlocklist = require('strophe/strophe_blocklist');

describe('stropheBlocklist', function() {
  var jids, stanza;
  stanza = null;
  jids = null;
  afterEach(function() {
    stanza = null;
    return jids = null;
  });
  describe('#getBlocklistStanza()', function() {
    return it('should return a stanza for getting the blocklist', function() {
      var fixture;
      fixture = fixtures.read('blocklist/get.xml');
      stanza = stropheBlocklist.getBlocklistStanza();
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getBlockStanza()', function() {
    return it('should return a stanza for getting the block stanza', function() {
      var fixture;
      fixture = fixtures.read('blocklist/block.xml');
      jids = ['jid1', 'jid2'];
      stanza = stropheBlocklist.getBlockStanza(jids);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getUnblockStanza()', function() {
    return it('should return a stanza for getting the unblock stanza', function() {
      var fixture;
      fixture = fixtures.read('blocklist/unblock.xml');
      jids = ['jid1', 'jid2'];
      stanza = stropheBlocklist.getUnblockStanza(jids);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","strophe/strophe_blocklist":"strophe/strophe_blocklist"}],"spec/strophe/strophe_disco_spec":[function(require,module,exports){
var MUCNS, X2JS, _, expect, fixtures, ref, sinon, stropheDisco, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

stropheDisco = require('strophe/strophe_disco');

MUCNS = require('enum/muc_ns');

describe('stropheDisco', function() {
  var domain;
  domain = 'reuters.net';
  it('contstructs an <iq/> element', function() {
    var element;
    element = stropheDisco.getDiscoStanza(domain);
    return element.nodeName === 'IQ';
  });
  it('adds a <query/> child with the correct ns', function() {
    var element;
    element = stropheDisco.getDiscoStanza(domain);
    return element.tree().firstChild.nodeName === 'QUERY' && element.tree().firstChild.getAttribute('xmlns' === MUCNS.DISCO_INFO);
  });
  it('constructs a disco#info element with the provided domain', function() {
    var element;
    element = stropheDisco.getDiscoStanza(domain);
    return element.tree().getAttribute('to') === domain;
  });
  return it('matches a known fixture', function() {
    var fixture, stanza;
    fixture = fixtures.read('disco/info.xml');
    stanza = stropheDisco.getDiscoStanza(domain);
    return stanza.toString().should.equal(trimFixture(fixture));
  });
});


},{"enum/muc_ns":"enum/muc_ns","spec/spec_helper":"spec/spec_helper","strophe/strophe_disco":"strophe/strophe_disco"}],"spec/strophe/strophe_io_spec":[function(require,module,exports){
var StropheIO, assert, ref, should, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, assert = ref.assert, should = ref.should;

StropheIO = require('strophe/strophe_io');

describe('StropheIO', function() {
  describe('Strophe event listeners', function() {
    it('should have an empty array of listeners for raw input by default', function() {
      var result;
      result = StropheIO.rawInputListeners;
      result.should.be.an.array;
      return result.length.should.equal(0);
    });
    it('should have an empty array of listeners for raw output by default', function() {
      var result;
      result = StropheIO.rawOutputListeners;
      result.should.be.an.array;
      return result.length.should.equal(0);
    });
    it('should have an empty array of listeners for XML input by default', function() {
      var result;
      result = StropheIO.xmlInputListeners;
      result.should.be.an.array;
      return result.length.should.equal(0);
    });
    return it('should have an empty array of listeners for XML output by default', function() {
      var result;
      result = StropheIO.xmlOutputListeners;
      result.should.be.an.array;
      return result.length.should.equal(0);
    });
  });
  describe('#addIOListener()', function() {
    it('should push a single callback function onto a list', function() {
      var cb, list;
      cb = sinon.stub();
      list = [];
      StropheIO.addIOListener(cb, list);
      list.length.should.equal(1);
      return list[0].should.equal(cb);
    });
    it('should push an array of callbacks function onto a list', function() {
      var cb1, cb2, list;
      cb1 = sinon.stub();
      cb2 = sinon.stub();
      list = [];
      StropheIO.addIOListener([cb1, cb2], list);
      list.length.should.equal(2);
      list[0].should.equal(cb1);
      return list[1].should.equal(cb2);
    });
    it('should return a function to remove a single callback from the list', function() {
      var cb, list, subject;
      cb = sinon.stub();
      list = [];
      subject = StropheIO.addIOListener(cb, list);
      subject();
      return list.length.should.equal(0);
    });
    return it('should return a function to remove multiple callbacks from the list', function() {
      var cb1, cb2, list, subject;
      cb1 = sinon.stub();
      cb2 = sinon.stub();
      list = [];
      subject = StropheIO.addIOListener([cb1, cb2], list);
      subject();
      return list.length.should.equal(0);
    });
  });
  return describe('#connectIOListeners()', function() {
    it('should connect rawInput listeners', function() {
      var callback, connection, options;
      callback = sinon.stub();
      connection = {};
      options = {
        connection: connection,
        getRawInputListeners: function() {
          return [callback];
        }
      };
      StropheIO.connectIOListeners(options);
      connection.rawInput(1, 2, 3);
      return callback.should.have.been.calledOnce.calledWithExactly(1, 2, 3);
    });
    it('should connect rawOutput listeners', function() {
      var callback, connection, options;
      callback = sinon.stub();
      connection = {};
      options = {
        connection: connection,
        getRawOutputListeners: function() {
          return [callback];
        }
      };
      StropheIO.connectIOListeners(options);
      connection.rawOutput(1, 2, 3);
      return callback.should.have.been.calledOnce.calledWithExactly(1, 2, 3);
    });
    it('should connect xmlInput listeners', function() {
      var callback, connection, options;
      callback = sinon.stub();
      connection = {};
      options = {
        connection: connection,
        getXMLInputListeners: function() {
          return [callback];
        }
      };
      StropheIO.connectIOListeners(options);
      connection.xmlInput(1, 2, 3);
      return callback.should.have.been.calledOnce.calledWithExactly(1, 2, 3);
    });
    return it('should connect xmlOutput listeners', function() {
      var callback, connection, options;
      callback = sinon.stub();
      connection = {};
      options = {
        connection: connection,
        getXMLOutputListeners: function() {
          return [callback];
        }
      };
      StropheIO.connectIOListeners(options);
      connection.xmlOutput(1, 2, 3);
      return callback.should.have.been.calledOnce.calledWithExactly(1, 2, 3);
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","strophe/strophe_io":"strophe/strophe_io"}],"spec/strophe/strophe_messaging_spec":[function(require,module,exports){
var X2JS, _, convertXMLToStanza, expect, fixtures, ref, sinon, stropheMessaging, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture, convertXMLToStanza = ref.convertXMLToStanza;

stropheMessaging = require('strophe/strophe_messaging');

describe('stropheMessaging', function() {
  describe('#getSendStanza()', function() {
    it('should return a stanza for sending a message with default type of \'chat\'', function() {
      var body, fixture, id, jid, stanza;
      fixture = "<message to='my.groupchat@conference.reuters.net' type='chat' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
      id = '12345';
      jid = "my.groupchat@conference.reuters.net";
      body = "This is the message body";
      stanza = stropheMessaging.getSendStanza(jid, body, null, id);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for sending a message with a specified type', function() {
      var body, fixture, id, jid, stanza, type;
      fixture = "<message to='my.groupchat@conference.reuters.net' type='someType' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
      id = '12345';
      jid = "my.groupchat@conference.reuters.net";
      body = "This is the message body";
      type = "someType";
      stanza = stropheMessaging.getSendStanza(jid, body, type, id);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza with delivery receipt for TR jids', function() {
      var body, fixture, id, jid, stanza;
      fixture = "<message to='first.last.company@reuters.net' type='chat' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <request xmlns='nitro:xmpp:receipts'/> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
      id = '12345';
      jid = "first.last.company@reuters.net";
      body = "This is the message body";
      stanza = stropheMessaging.getSendStanza(jid, body, null, id);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return xit('should not request a delivery receipt for non-TR jids', function() {
      var body, fixture, id, jid, stanza;
      fixture = "<message to='first.last.company@federated.net' type='chat' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
      id = '12345';
      jid = "first.last.company@federated.net";
      body = "This is the message body";
      stanza = stropheMessaging.getSendStanza(jid, body, null, id);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  it('should request a delivery receipt with correct ns for managed chatrooms', function() {
    var body, fixture, id, jid, stanza;
    fixture = "<message to='room.name@legacychat.reuters.net' type='chat' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <request xmlns='urn:xmpp:receipts'/> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
    id = '12345';
    jid = "room.name@legacychat.reuters.net";
    body = "This is the message body";
    stanza = stropheMessaging.getSendStanza(jid, body, null, id);
    stanza.should.be.an["instanceof"](Strophe.Builder);
    return stanza.toString().should.equal(trimFixture(fixture));
  });
  it('should not request a delivery receipt for groupchat/bilaterals', function() {
    var body, fixture, id, jid, stanza;
    fixture = "<message to='room.name@conference.reuters.net' type='chat' id='12345' xmlns='jabber:client'> <body>This is the message body</body> <active xmlns='http://jabber.org/protocol/chatstates'/> </message>";
    id = '12345';
    jid = "room.name@conference.reuters.net";
    body = "This is the message body";
    stanza = stropheMessaging.getSendStanza(jid, body, null, id);
    stanza.should.be.an["instanceof"](Strophe.Builder);
    return stanza.toString().should.equal(trimFixture(fixture));
  });
  describe('#getChatHistoryStanza()', function() {
    var alternateMax, beforeID, jid;
    jid = 'some.jid.thomsonreuters.com@reuters.net';
    beforeID = '123456';
    alternateMax = '20';
    it('should return a stanza for retreiving message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/chat/history_request.xml');
      stanza = stropheMessaging.getChatHistoryStanza(jid);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving more message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/chat/more_history_request.xml');
      stanza = stropheMessaging.getChatHistoryStanza(jid, beforeID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/chat/alt_max_history_request.xml');
      stanza = stropheMessaging.getChatHistoryStanza(jid, null, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for retreiving more message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/chat/alt_max_more_history_request.xml');
      stanza = stropheMessaging.getChatHistoryStanza(jid, beforeID, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getGroupchatHistoryStanza()', function() {
    var alternateMax, beforeID, jid;
    jid = 'some_chatroom.reuters.com@legacychat.reuters.net';
    beforeID = '123456';
    alternateMax = '20';
    it('should return a stanza for retreiving message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/groupchat/history_request.xml');
      stanza = stropheMessaging.getGroupchatHistoryStanza(jid);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving more message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/groupchat/more_history_request.xml');
      stanza = stropheMessaging.getGroupchatHistoryStanza(jid, beforeID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/groupchat/alt_max_history_request.xml');
      stanza = stropheMessaging.getGroupchatHistoryStanza(jid, null, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for retreiving more message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/groupchat/alt_max_more_history_request.xml');
      stanza = stropheMessaging.getGroupchatHistoryStanza(jid, beforeID, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getManagedHistoryStanza()', function() {
    var alternateMax, beforeID, jid;
    jid = 'some_chatroom.reuters.com@legacychat.reuters.net';
    beforeID = '123456';
    alternateMax = '20';
    it('should return a stanza for retreiving message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/managed/history_request.xml');
      stanza = stropheMessaging.getManagedHistoryStanza(jid);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving more message history (default max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/managed/more_history_request.xml');
      stanza = stropheMessaging.getManagedHistoryStanza(jid, beforeID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for retreiving message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/managed/alt_max_history_request.xml');
      stanza = stropheMessaging.getManagedHistoryStanza(jid, null, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for retreiving more message history (alt max)', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/managed/alt_max_more_history_request.xml');
      stanza = stropheMessaging.getManagedHistoryStanza(jid, beforeID, 20);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getTypingStanza()', function() {
    var jid;
    jid = 'some.user.thomsonreuters.com@reuters.net';
    return it('should return a stanza for notifying piers about "chatstates" event', function() {
      var fixture, stanza;
      fixture = fixtures.read('messaging/chat/chatstates.xml');
      stanza = stropheMessaging.getTypingStanza(jid);
      stanza.should.be.and.instanceOf(Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","strophe/strophe_messaging":"strophe/strophe_messaging"}],"spec/strophe/strophe_muc_spec":[function(require,module,exports){
var MUCField, MUCRole, X2JS, _, expect, fixtures, ref, sinon, stropheMUC, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

stropheMUC = require('strophe/strophe_muc');

MUCField = require('enum/muc_field');

MUCRole = require('enum/muc_role');

describe('stropheMUC', function() {
  var groupchatJID, groupchatName, groupchatRID, selfJID, userJID;
  selfJID = 'self.jid.thomsonreuters.com@reuters.net';
  userJID = 'user.jid.thomsonreuters.com@reuters.net';
  groupchatJID = 'my.groupchat@conference.reuters.net';
  groupchatRID = 'some.user.thomsonreuters.com__reuters.net';
  groupchatName = 'My Groupchat';
  describe('#getJoinStanza()', function() {
    return it('should return a stanza for joining a groupchat', function() {
      var fixture, stanza;
      fixture = fixtures.read('muc/join.xml');
      stanza = stropheMUC.getJoinStanza(groupchatJID, groupchatRID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getLeaveStanza()', function() {
    return it('should return the base form stanza to leave a groupchat', function() {
      var fixture, stanza;
      fixture = fixtures.read('muc/leave.xml');
      stanza = stropheMUC.getLeaveStanza(groupchatJID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getDestroyGroupchatStanza()', function() {
    return it('should return a stanza for destroying a groupchat', function() {
      var fixture, stanza;
      fixture = fixtures.read('muc/destroy.xml');
      stanza = stropheMUC.getDestroyGroupchatStanza(groupchatJID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getGroupchatConfigForm()', function() {
    return it('should return the base form stanza to configure a groupchat', function() {
      var fixture, stanza;
      fixture = fixtures.read('muc/form.xml');
      stanza = stropheMUC.getGroupchatConfigForm(groupchatJID, MUCField.ROOM_NAME, groupchatName);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getRoomDiscoStanza()', function() {
    return it('should return the base form stanza to perform groupchat disco', function() {
      var fixture, stanza;
      fixture = fixtures.read('muc/disco.xml');
      stanza = stropheMUC.getRoomDiscoStanza(groupchatJID);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getMemberListStanza()', function() {
    return it('should return the base form stanza to request groupchat member list', function() {
      var affiliations, fixture, stanza;
      fixture = fixtures.read('muc/members.xml');
      affiliations = [MUCRole.OWNER, MUCRole.ADMIN];
      stanza = stropheMUC.getMemberListStanza(groupchatJID, affiliations);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getMediatedInviteStanza()', function() {
    return it('should return the base form stanza to request groupchat member list', function() {
      var fixture, invitees, stanza;
      fixture = fixtures.read('muc/mediated_invite.xml');
      invitees = [userJID];
      stanza = stropheMUC.getMediatedInviteStanza(groupchatJID, selfJID, invitees);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getSearchStanza()', function() {
    return it('should return the search stanza to query for groupchats', function() {
      var fixture, searchString, stanza;
      fixture = fixtures.read('muc/search.xml');
      searchString = 'some search';
      stanza = stropheMUC.getSearchStanza('legacychat.reuters.net', searchString);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getKickStanza()', function() {
    return it('should return the base form stanza to request groupchat member list', function() {
      var fixture, invitees, stanza;
      fixture = fixtures.read('muc/mediated_invite.xml');
      invitees = [userJID];
      stanza = stropheMUC.getMediatedInviteStanza(groupchatJID, selfJID, invitees);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"enum/muc_field":"enum/muc_field","enum/muc_role":"enum/muc_role","spec/spec_helper":"spec/spec_helper","strophe/strophe_muc":"strophe/strophe_muc"}],"spec/strophe/strophe_presence_spec":[function(require,module,exports){
var PresenceShow, PresenceType, X2JS, _, expect, fixtures, ref, sinon, strophePresence, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

PresenceType = require('enum/presence_type');

PresenceShow = require('enum/presence_show');

strophePresence = require('strophe/strophe_presence');

describe('strophePresence', function() {
  describe('#getPresenceStanza()', function() {
    it('should return an instance of Strophe.Builder', function() {
      return strophePresence.getPresenceStanza().should.be.an["instanceof"](Strophe.Builder);
    });
    it('should return a plain presence stanza', function() {
      var fixture, stanza;
      fixture = "<presence xmlns='jabber:client'/>";
      stanza = strophePresence.getPresenceStanza();
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a presence stanza addressed to a contact jid', function() {
      var fixture, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid'/>";
      stanza = strophePresence.getPresenceStanza("fakejid");
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a presence stanza to a contact with a subscription type', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='subscribe'/>";
      jid = "fakejid";
      stanza = strophePresence.getPresenceStanza(jid, PresenceType.SUBSCRIBE);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a presence stanza with a show type', function() {
      var fixture, stanza;
      fixture = "<presence xmlns='jabber:client'><show>away</show></presence>";
      stanza = strophePresence.getPresenceStanza("", "", PresenceShow.AWAY);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getVisibleStanza()', function() {
    it('should return a stanza for \'visible\'', function() {
      var fixture, stanza;
      fixture = fixtures.read('presence/visible.xml');
      stanza = strophePresence.getVisibleStanza();
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for \'invisible\'', function() {
      var fixture, stanza;
      fixture = fixtures.read('presence/invisible.xml');
      stanza = strophePresence.getVisibleStanza(false);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"enum/presence_show":"enum/presence_show","enum/presence_type":"enum/presence_type","spec/spec_helper":"spec/spec_helper","strophe/strophe_presence":"strophe/strophe_presence"}],"spec/strophe/strophe_roster_spec":[function(require,module,exports){
var PresenceType, X2JS, _, expect, fixtures, ref, sinon, stropheRoster, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

PresenceType = require('enum/presence_type');

stropheRoster = require('strophe/strophe_roster');

describe('stropheRoster', function() {
  describe('#getRosterStanza()', function() {
    return it('should return a stanza for getting the roster', function() {
      var fixture, stanza;
      fixture = fixtures.read('roster/get.xml');
      stanza = stropheRoster.getRosterStanza();
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getAddStanza()', function() {
    return it('should return a stanza for adding a contact to the roster', function() {
      var fixture, groups, jid, name, stanza;
      jid = "myjid";
      name = "My Name";
      fixture = fixtures.read('roster/add.xml');
      groups = ['Group One', 'Group Two'];
      stanza = stropheRoster.getAddStanza(jid, name, groups);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getRemoveStanza()', function() {
    return it('should return a stanza for removinig a contact from the roster', function() {
      var fixture, jid, stanza;
      fixture = fixtures.read('roster/remove.xml');
      jid = 'contacttoremovejid';
      stanza = stropheRoster.getRemoveStanza(jid);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getPresenceSubscriptionStanza()', function() {
    it('should return a stanza for presence \'subscribe\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='subscribe'/>";
      jid = "fakejid";
      stanza = stropheRoster.getPresenceSubscriptionStanza(jid, PresenceType.SUBSCRIBE);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for presence \'subscribed\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='subscribed'/>";
      jid = "fakejid";
      stanza = stropheRoster.getPresenceSubscriptionStanza(jid, PresenceType.SUBSCRIBED);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for presence \'unsubscribe\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='unsubscribe'/>";
      jid = "fakejid";
      stanza = stropheRoster.getPresenceSubscriptionStanza(jid, PresenceType.UNSUBSCRIBE);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for presence \'unsubscribed\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='unsubscribed'/>";
      jid = "fakejid";
      stanza = stropheRoster.getPresenceSubscriptionStanza(jid, PresenceType.UNSUBSCRIBED);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"enum/presence_type":"enum/presence_type","spec/spec_helper":"spec/spec_helper","strophe/strophe_roster":"strophe/strophe_roster"}],"spec/strophe/strophe_storage_spec":[function(require,module,exports){
var X2JS, _, expect, fixtures, ref, sinon, stropheStorage, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

stropheStorage = require('strophe/strophe_storage');

describe('stropheStorage', function() {
  describe('#getPreferencesStanza()', function() {
    it('should return a Strophe.Builder instance', function() {
      var result;
      result = stropheStorage.getPreferencesStanza();
      return result.should.be.an["instanceof"](Strophe.Builder);
    });
    return it('should return a stanza for getting preferences', function() {
      var fixture, result;
      fixture = fixtures.read('preferences/get.xml');
      result = stropheStorage.getPreferencesStanza();
      return result.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#setPreferencesStanza()', function() {
    it('should return null if no preferences are passed', function() {
      return expect(stropheStorage.setPreferencesStanza()).to.be["null"];
    });
    it('should return a Strophe.Builder instance', function() {
      var preferences, result;
      preferences = {
        prop1: "val1",
        prop2: "val2"
      };
      result = stropheStorage.setPreferencesStanza(preferences);
      return result.should.be.an["instanceof"](Strophe.Builder);
    });
    return it('should return a stanza for setting preferences', function() {
      var fixture, preferences, result;
      preferences = {
        prop1: "val1",
        prop2: "val2"
      };
      fixture = fixtures.read('preferences/set.xml');
      result = stropheStorage.setPreferencesStanza(preferences);
      return _.unescape(result.toString()).should.equal(trimFixture(fixture));
    });
  });
  describe('#getBookmarksStanza()', function() {
    it('should return a Strophe.Builder instance', function() {
      var result;
      result = stropheStorage.getBookmarksStanza();
      return result.should.be.an["instanceof"](Strophe.Builder);
    });
    return it('should return a stanza for getting bookmarks', function() {
      var fixture, result;
      fixture = fixtures.read('bookmarks/get.xml');
      result = stropheStorage.getBookmarksStanza();
      return result.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#setBookmarksStanza()', function() {
    it('should return a Strophe.Builder instance', function() {
      var chatrooms, result;
      chatrooms = [
        {
          jid: "jidofchatroom1",
          type: 'conference'
        }, {
          jid: "jidofchatroom2",
          type: 'conference'
        }
      ];
      result = stropheStorage.setBookmarksStanza(chatrooms);
      return result.should.be.an["instanceof"](Strophe.Builder);
    });
    return it('should return a stanza for setting bookmarks', function() {
      var chatrooms, fixture, result;
      chatrooms = [
        {
          jid: "jidofchatroom1",
          type: 'conference'
        }, {
          jid: "jidofchatroom2",
          type: 'conference'
        }
      ];
      fixture = fixtures.read('bookmarks/set.xml');
      result = stropheStorage.setBookmarksStanza(chatrooms);
      return result.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","strophe/strophe_storage":"strophe/strophe_storage"}],"spec/strophe/strophe_yahoo_gateway_spec":[function(require,module,exports){
var PresenceType, X2JS, _, expect, fixtures, ref, sinon, stropheYahooGateway, trimFixture;

ref = require('spec/spec_helper'), expect = ref.expect, sinon = ref.sinon, _ = ref._, fixtures = ref.fixtures, X2JS = ref.X2JS, trimFixture = ref.trimFixture;

PresenceType = require('enum/presence_type');

stropheYahooGateway = require('strophe/strophe_yahoo_gateway');

describe('stropheYahooGateway', function() {
  describe('#getRosterStanza()', function() {
    return it('should return a stanza for getting the roster', function() {
      var fixture, stanza;
      fixture = fixtures.read('roster/get.xml');
      stanza = stropheYahooGateway.getRosterStanza();
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getAddStanza()', function() {
    return it('should return a stanza for adding a contact to the roster', function() {
      var fixture, groups, jid, name, stanza;
      jid = "myjid";
      name = "My Name";
      fixture = fixtures.read('roster/add.xml');
      groups = ['Group One', 'Group Two'];
      stanza = stropheYahooGateway.getAddStanza(jid, name, groups);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  describe('#getRemoveStanza()', function() {
    return it('should return a stanza for removinig a contact from the roster', function() {
      var fixture, jid, stanza;
      fixture = fixtures.read('roster/remove.xml');
      jid = 'contacttoremovejid';
      stanza = stropheYahooGateway.getRemoveStanza(jid);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
  return describe('#getPresenceSubscriptionStanza()', function() {
    it('should return a stanza for presence \'subscribe\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='subscribe'/>";
      jid = "fakejid";
      stanza = stropheYahooGateway.getPresenceSubscriptionStanza(jid, PresenceType.SUBSCRIBE);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for presence \'subscribed\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='subscribed'/>";
      jid = "fakejid";
      stanza = stropheYahooGateway.getPresenceSubscriptionStanza(jid, PresenceType.SUBSCRIBED);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    it('should return a stanza for presence \'unsubscribe\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='unsubscribe'/>";
      jid = "fakejid";
      stanza = stropheYahooGateway.getPresenceSubscriptionStanza(jid, PresenceType.UNSUBSCRIBE);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
    return it('should return a stanza for presence \'unsubscribed\' to a user', function() {
      var fixture, jid, stanza;
      fixture = "<presence xmlns='jabber:client' to='fakejid' type='unsubscribed'/>";
      jid = "fakejid";
      stanza = stropheYahooGateway.getPresenceSubscriptionStanza(jid, PresenceType.UNSUBSCRIBED);
      stanza.should.be.an["instanceof"](Strophe.Builder);
      return stanza.toString().should.equal(trimFixture(fixture));
    });
  });
});


},{"enum/presence_type":"enum/presence_type","spec/spec_helper":"spec/spec_helper","strophe/strophe_yahoo_gateway":"strophe/strophe_yahoo_gateway"}],"spec/suites/connection_suite_spec":[function(require,module,exports){
require('spec/spec_helper');

describe('Connection Suite', function() {
  require('spec/connection_spec');
  require('spec/components/roster_spec');
  require('spec/components/storage_spec');
  require('spec/components/muc_spec');
  require('spec/components/blocklist_spec');
  require('spec/components/messaging_spec');
  require('spec/components/gateway_spec');
  require('spec/strophe/strophe_disco_spec');
  require('spec/strophe/strophe_roster_spec');
  require('spec/strophe/strophe_muc_spec');
  require('spec/strophe/strophe_storage_spec');
  require('spec/strophe/strophe_blocklist_spec');
  require('spec/strophe/strophe_messaging_spec');
  require('spec/strophe/strophe_presence_spec');
  return require('spec/strophe/strophe_io_spec');
});


},{"spec/components/blocklist_spec":"spec/components/blocklist_spec","spec/components/gateway_spec":"spec/components/gateway_spec","spec/components/messaging_spec":"spec/components/messaging_spec","spec/components/muc_spec":"spec/components/muc_spec","spec/components/roster_spec":"spec/components/roster_spec","spec/components/storage_spec":"spec/components/storage_spec","spec/connection_spec":"spec/connection_spec","spec/spec_helper":"spec/spec_helper","spec/strophe/strophe_blocklist_spec":"spec/strophe/strophe_blocklist_spec","spec/strophe/strophe_disco_spec":"spec/strophe/strophe_disco_spec","spec/strophe/strophe_io_spec":"spec/strophe/strophe_io_spec","spec/strophe/strophe_messaging_spec":"spec/strophe/strophe_messaging_spec","spec/strophe/strophe_muc_spec":"spec/strophe/strophe_muc_spec","spec/strophe/strophe_presence_spec":"spec/strophe/strophe_presence_spec","spec/strophe/strophe_roster_spec":"spec/strophe/strophe_roster_spec","spec/strophe/strophe_storage_spec":"spec/strophe/strophe_storage_spec"}],"spec/suites/events_suite_spec":[function(require,module,exports){
require('spec/spec_helper');

describe('Events Suite', function() {
  require('spec/events/events_spec');
  require('spec/events/event_manager_spec');
  require('spec/events/event_handler_spec');
  return require('spec/events/event_filters_spec');
});


},{"spec/events/event_filters_spec":"spec/events/event_filters_spec","spec/events/event_handler_spec":"spec/events/event_handler_spec","spec/events/event_manager_spec":"spec/events/event_manager_spec","spec/events/events_spec":"spec/events/events_spec","spec/spec_helper":"spec/spec_helper"}],"spec/suites/util_suite_spec":[function(require,module,exports){
require('spec/spec_helper');

describe('Util', function() {
  require('spec/util/utils_spec');
  require('spec/util/limit_spec');
  require('spec/util/rate_limiter_spec');
  require('spec/util/retryer_spec');
  return require('spec/util/matchers_spec');
});


},{"spec/spec_helper":"spec/spec_helper","spec/util/limit_spec":"spec/util/limit_spec","spec/util/matchers_spec":"spec/util/matchers_spec","spec/util/rate_limiter_spec":"spec/util/rate_limiter_spec","spec/util/retryer_spec":"spec/util/retryer_spec","spec/util/utils_spec":"spec/util/utils_spec"}],"spec/util/limit_spec":[function(require,module,exports){
var _, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon;

_.mixin(require('util/limit'));

describe('_.limit()', function() {
  var ERROR_CALL_MAX_INDEFINITE, ERROR_DEFAULT, ERROR_MAX_0, assertCalls, clock, errorMsg, func;
  ERROR_DEFAULT = null;
  ERROR_MAX_0 = null;
  ERROR_CALL_MAX_INDEFINITE = null;
  func = null;
  errorMsg = null;
  clock = null;
  assertCalls = function(func, limitedFunc, calls, customErrorMsg) {
    var call, i, j, len, moment, next, pass, results;
    if (customErrorMsg == null) {
      customErrorMsg = errorMsg;
    }
    results = [];
    for (i = j = 0, len = calls.length; j < len; i = ++j) {
      call = calls[i];
      moment = call[0], pass = call[1];
      if (pass) {
        limitedFunc(moment).should.equal(moment);
        func.withArgs(moment).should.have.been.calledOnce;
      } else {
        limitedFunc(moment).should.eql(new Error(customErrorMsg));
        func.withArgs(moment).should.not.have.been.called;
      }
      if (next = calls[i + 1]) {
        results.push(clock.tick(next[0] - moment));
      } else {
        results.push(void 0);
      }
    }
    return results;
  };
  before(function() {
    ERROR_DEFAULT = "You have exceeded the number of allowable function calls for this time period";
    ERROR_MAX_0 = "The allowable number of function calls is 0";
    return ERROR_CALL_MAX_INDEFINITE = "You have exceeded the number of allowable function calls";
  });
  after(function() {
    ERROR_DEFAULT = null;
    ERROR_MAX_0 = null;
    return ERROR_CALL_MAX_INDEFINITE = null;
  });
  beforeEach(function() {
    func = sinon.spy(function(arg) {
      return arg;
    });
    errorMsg = ERROR_DEFAULT;
    return clock = sinon.useFakeTimers();
  });
  afterEach(function() {
    func.reset();
    clock.restore();
    return errorMsg = null;
  });
  it('should prevent all calls if `max` is 0', function() {
    var limitedFunc;
    limitedFunc = _.limit(func, {
      max: 0
    });
    errorMsg = ERROR_MAX_0;
    limitedFunc(1).should.eql(new Error(errorMsg));
    return func.should.not.have.been.calledOnce;
  });
  it('should allow a limited number of calls to a function within a specified time', function() {
    var limitedFunc;
    limitedFunc = _.limit(func);
    limitedFunc(1).should.equal(1);
    return func.should.have.been.calledOnce;
  });
  it('should limit the number of function calls within a specified time', function() {
    var limitedFunc;
    limitedFunc = _.limit(func);
    limitedFunc(1).should.equal(1);
    limitedFunc(2).should.eql(new Error(errorMsg));
    return func.should.have.been.calledOnce;
  });
  it('should allow a limited number of calls to a function within a specified time', function() {
    var limitedFunc;
    limitedFunc = _.limit(func, {
      max: 2,
      time: 1000
    });
    limitedFunc(1).should.equal(1);
    limitedFunc(2).should.equal(2);
    return func.should.have.been.calledTwice;
  });
  it('should limit the function calls within a specified time', function() {
    var limitedFunc;
    limitedFunc = _.limit(func, {
      max: 2,
      time: 1000
    });
    limitedFunc(1).should.equal(1);
    limitedFunc(2).should.equal(2);
    limitedFunc(3).should.eql(new Error(errorMsg));
    func.should.have.been.calledTwice;
    func.firstCall.should.have.been.calledWith(1);
    return func.secondCall.should.have.been.calledWith(2);
  });
  it('should allow multiple calls after the time period has elapsed', function() {
    var limitedFunc;
    limitedFunc = _.limit(func, {
      max: 1,
      time: 1000
    });
    limitedFunc(1).should.equal(1);
    clock.tick(1500);
    limitedFunc(2).should.equal(2);
    return func.should.have.been.calledTwice;
  });
  it('should rate limit calls over time', function() {
    var calls, limitedFunc;
    calls = [[0, true], [500, true], [600, false], [800, false], [1100, true], [1300, true], [1500, false], [2200, true], [3500, true], [5000, true], [5300, true], [5500, false]];
    limitedFunc = _.limit(func, {
      max: 2,
      time: 1000
    });
    return assertCalls(func, limitedFunc, calls);
  });
  it('should rate limit a function precisely', function() {
    var calls, limitedFunc;
    calls = [[0, true], [1000, true], [3000, true]];
    limitedFunc = _.limit(func, {
      max: 1,
      time: 1000
    });
    return assertCalls(func, limitedFunc, calls);
  });
  describe('return values', function() {
    it('should return a function', function() {
      return _.limit(func).should.be.a('function');
    });
    return it('should return a wrapped version of the same func passed in', function() {
      var limitedFunc;
      limitedFunc = _.limit(func);
      limitedFunc(1, 2);
      return func.should.have.been.calledOnce.calledWith(1, 2);
    });
  });
  describe('specifying option properties', function() {
    it('should accept context that is passed in', function() {
      var limitedFunc, obj, spy;
      obj = {
        prop: 'val'
      };
      spy = sinon.spy(function(arg) {
        this.should.equal(obj);
        return arg;
      });
      limitedFunc = _.limit(spy, {
        context: obj
      });
      return limitedFunc(1).should.equal(1);
    });
    return it('should return a custom error message', function() {
      var limitedFunc, message;
      message = "You called it too many times!";
      limitedFunc = _.limit(func, {
        errorMessage: message
      });
      limitedFunc(1).should.equal(1);
      limitedFunc(2).should.eql(new Error(message));
      return func.should.have.been.calledOnce.calledWith(1);
    });
  });
  describe('invalid options', function() {
    it('should default to `max: 1` when receiving a negative value', function() {
      var limitedFunc;
      limitedFunc = _.limit(func, {
        max: -1,
        time: 1000
      });
      limitedFunc(1).should.equal(1);
      limitedFunc(2).should.eql(Error(errorMsg));
      return func.should.have.been.callOnce;
    });
    it('should drop float values for max time', function() {
      var limitedFunc;
      limitedFunc = _.limit(func, {
        max: 2.8,
        time: 1000
      });
      limitedFunc(1).should.equal(1);
      limitedFunc(2).should.equal(2);
      limitedFunc(3).should.eql(Error(errorMsg));
      return func.should.have.been.callOnce;
    });
    it('should default to `time: 1000` when receiving a negative value', function() {
      var calls, limitedFunc;
      calls = [[0, true], [500, false], [1000, true], [3000, true]];
      limitedFunc = _.limit(func, {
        max: 1,
        time: -5000
      });
      return assertCalls(func, limitedFunc, calls);
    });
    return it('should drop float values for time', function() {
      var calls, limitedFunc;
      calls = [[0, true], [1000, false], [2000, true], [4000, true]];
      limitedFunc = _.limit(func, {
        max: 1,
        time: 2000.5
      });
      return assertCalls(func, limitedFunc, calls);
    });
  });
  describe('multiple instances of rate limited functions', function() {
    var func2;
    func2 = null;
    beforeEach(function() {
      return func2 = sinon.spy(function(arg) {
        return arg;
      });
    });
    afterEach(function() {
      return func2.reset();
    });
    return it('should rate limit separately for different functions', function() {
      var calls1, calls2, limitedFunc1, limitedFunc2;
      calls1 = [[0, true], [1000, true], [1500, false], [2000, true]];
      limitedFunc1 = _.limit(func, {
        max: 1,
        time: 1000
      });
      assertCalls(func, limitedFunc1, calls1);
      calls2 = [[0, true], [300, true], [600, true], [900, false], [1000, true]];
      limitedFunc2 = _.limit(func2, {
        max: 3,
        time: 1000
      });
      return assertCalls(func2, limitedFunc2, calls2);
    });
  });
  describe('limiting a function indefinitely', function() {
    return it('should never reset the timer once the max calls are reached', function() {
      var calls, limitedFunc;
      calls = [[0, true], [500, true], [1000, false], [3000, false], [10000, false]];
      limitedFunc = _.limit(func, {
        max: 2,
        time: 0
      });
      errorMsg = ERROR_CALL_MAX_INDEFINITE;
      return assertCalls(func, limitedFunc, calls, errorMsg);
    });
  });
  describe('reusing _.limit ', function() {
    return it('should allow for rate limiting of the same function multiple times', function() {
      var limitedFunc1, limitedFunc2;
      limitedFunc1 = _.limit(func, {
        max: 1
      });
      return limitedFunc2 = _.limit(func, {
        max: 3
      });
    });
  });
  return describe('nesting (further limiting) already limited functions', function() {
    it('should allow for limiting an already limited function', function() {
      var limitedFunc1, limitedFunc2;
      limitedFunc1 = _.limit(func, {
        max: 1,
        errorMessage: "Error1"
      });
      limitedFunc2 = _.limit(limitedFunc1, {
        max: 1,
        errorMessage: "Error2"
      });
      limitedFunc2(1).should.equal(1);
      return limitedFunc2(2).should.eql(new Error("Error2"));
    });
    it('should use nested limiting and honor the stricter limit when first', function() {
      var limitedFunc1, limitedFunc2;
      limitedFunc1 = _.limit(func, {
        max: 1,
        errorMessage: "Error1"
      });
      limitedFunc2 = _.limit(limitedFunc1, {
        max: 2,
        errorMessage: "Error2"
      });
      limitedFunc2(1).should.equal(1);
      return limitedFunc2(2).should.eql(new Error("Error1"));
    });
    return it('should use nested limiting and honor the stricter limit when second', function() {
      var limitedFunc1, limitedFunc2;
      limitedFunc1 = _.limit(func, {
        max: 2,
        errorMessage: "Error1"
      });
      limitedFunc2 = _.limit(limitedFunc1, {
        max: 1,
        errorMessage: "Error2"
      });
      limitedFunc2(1).should.equal(1);
      return limitedFunc2(2).should.eql(new Error("Error2"));
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","util/limit":"util/limit"}],"spec/util/matchers_spec":[function(require,module,exports){
var Matchers, _, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon;

Matchers = require('util/matchers');

describe('Matchers', function() {
  describe('.isGroupchat()', function() {
    it('should return false if passed nothing', function() {
      return Matchers.isGroupchat().should.be["false"];
    });
    it('should return false for an empty string', function() {
      return Matchers.isGroupchat('').should.be["false"];
    });
    it('should return false for null', function() {
      return Matchers.isGroupchat(null).should.be["false"];
    });
    it('should detect return false for non-chatroom text values', function() {
      var result;
      result = Matchers.isGroupchat('adsfasdf');
      return result.should.be["false"];
    });
    it('should detect return false for non-chatroom numeric values', function() {
      var result;
      result = Matchers.isGroupchat('123456');
      return result.should.be["false"];
    });
    it('should return true if passed an id for a managed chatroom id (WCP)', function() {
      var result;
      result = Matchers.isGroupchat('@legacychat.roomasdfasdfas');
      return result.should.be["true"];
    });
    return it('should return true if passed an id for a XMPP groupchat id', function() {
      var result;
      result = Matchers.isGroupchat('@conference.asdfasdfas');
      return result.should.be["true"];
    });
  });
  describe('.isManagedGroupchat()', function() {
    it('should return false if passed nothing', function() {
      return Matchers.isManagedGroupchat().should.be["false"];
    });
    it('should return false for an empty string', function() {
      return Matchers.isManagedGroupchat('').should.be["false"];
    });
    it('should return false for null', function() {
      return Matchers.isManagedGroupchat(null).should.be["false"];
    });
    it('should detect return false for non-chatroom text values', function() {
      var result;
      result = Matchers.isManagedGroupchat('adsfasdf');
      return result.should.be["false"];
    });
    it('should detect return false for non-chatroom numeric values', function() {
      var result;
      result = Matchers.isManagedGroupchat('123456');
      return result.should.be["false"];
    });
    it('should return true if passed an id for a managed groupchat id (WCP)', function() {
      var result;
      result = Matchers.isManagedGroupchat('something@legacychat.roomasdfasdfas');
      return result.should.be["true"];
    });
    return it('should return false if passed any other id', function() {
      var result;
      result = Matchers.isManagedGroupchat('@anythingelse.asdfasdfas');
      return result.should.be["false"];
    });
  });
  describe('.isBilateralGroupchat()', function() {
    it('should return false if passed nothing', function() {
      return Matchers.isBilateralGroupchat().should.be["false"];
    });
    it('should return false for an empty string', function() {
      return Matchers.isBilateralGroupchat('').should.be["false"];
    });
    it('should return false for null', function() {
      return Matchers.isBilateralGroupchat(null).should.be["false"];
    });
    it('should detect return false for non-chatroom text values', function() {
      var result;
      result = Matchers.isBilateralGroupchat('adsfasdf');
      return result.should.be["false"];
    });
    it('should detect return false for non-chatroom numeric values', function() {
      var result;
      result = Matchers.isBilateralGroupchat('123456');
      return result.should.be["false"];
    });
    it('should return true if passed an id for a bilateral groupchat', function() {
      var result;
      result = Matchers.isBilateralGroupchat('something@conference.roomasdfasdfas');
      return result.should.be["true"];
    });
    return it('should return false if passed any other id', function() {
      var result;
      result = Matchers.isBilateralGroupchat('@anythingelse.asdfasdfas');
      return result.should.be["false"];
    });
  });
  describe('.isYahoo()', function() {
    it('should return false if passed nothing', function() {
      return Matchers.isYahoo().should.be["false"];
    });
    it('should return false for an empty string', function() {
      return Matchers.isYahoo('').should.be["false"];
    });
    it('should return false for null', function() {
      return Matchers.isYahoo(null).should.be["false"];
    });
    it('should detect return false for non-chatroom text values', function() {
      var result;
      result = Matchers.isYahoo('adsfasdf');
      return result.should.be["false"];
    });
    it('should detect return false for non-chatroom numeric values', function() {
      var result;
      result = Matchers.isYahoo('123456');
      return result.should.be["false"];
    });
    it('should return true if passed a Yahoo email address', function() {
      var result;
      result = Matchers.isYahoo('something@yahoo.com');
      return result.should.be["true"];
    });
    it('should return true if passed a Rocketmail email address', function() {
      var result;
      result = Matchers.isYahoo('something@rocketmail.com');
      return result.should.be["true"];
    });
    it('should return true if passed a Ymail email address', function() {
      var result;
      result = Matchers.isYahoo('something@ymail.com');
      return result.should.be["true"];
    });
    it('should return true if passed a non .com Yahoo email address', function() {
      var result;
      result = Matchers.isYahoo('something@yahoo.co.il');
      return result.should.be["true"];
    });
    it('should return true if passed a Yahoo subdomain email address', function() {
      var result;
      result = Matchers.isYahoo('something@yahoo.reuasmb.net');
      return result.should.be["true"];
    });
    return it('should return false if passed any other id', function() {
      var result;
      result = Matchers.isYahoo('@anythingelse.asdfasdfas');
      return result.should.be["false"];
    });
  });
  return describe('.isNitroContact()', function() {
    it('should return false if passed nothing', function() {
      return Matchers.isNitroContact().should.be["false"];
    });
    it('should return false for an empty string', function() {
      return Matchers.isNitroContact('').should.be["false"];
    });
    it('should return false for null', function() {
      return Matchers.isNitroContact(null).should.be["false"];
    });
    it('should detect return false for non-tr jid text values', function() {
      var result;
      result = Matchers.isNitroContact('adsfasdf');
      return result.should.be["false"];
    });
    it('should detect return false for non-tr jid numeric values', function() {
      var result;
      result = Matchers.isNitroContact('123456');
      return result.should.be["false"];
    });
    it('should return true if passed an jid for a TR contact in Beta/Alpha', function() {
      var result;
      result = Matchers.isNitroContact('first.last.whatever.com@reuasmb.net');
      return result.should.be["true"];
    });
    it('should return true if passed an jid with resource for a TR contact in Beta/Alpha', function() {
      var result;
      result = Matchers.isNitroContact('first.last.whatever.com@reuasmb.net/em');
      return result.should.be["true"];
    });
    it('should return true if passed an jid for a TR contact in Prod', function() {
      var result;
      result = Matchers.isNitroContact('first.last.whatever.com@reuters.net');
      return result.should.be["true"];
    });
    it('should return true if passed an jid with resource for a TR contact in Prod', function() {
      var result;
      result = Matchers.isNitroContact('first.last.whatever.com@reuters.net/em');
      return result.should.be["true"];
    });
    it('should return false if passed an jid for a managed groupchat jid Beta/Alpha', function() {
      var result;
      result = Matchers.isNitroContact('something@legacychat.reuasmb.net');
      return result.should.be["false"];
    });
    it('should return false if passed an jid for a XMPP groupchat jid Beta/Alpha', function() {
      var result;
      result = Matchers.isNitroContact('something@conference.reuasmb.net');
      return result.should.be["false"];
    });
    it('should return false if passed an jid for a managed groupchat jid Prod', function() {
      var result;
      result = Matchers.isNitroContact('something@legacychat.reuters.net');
      return result.should.be["false"];
    });
    return it('should return false if passed an jid for a XMPP groupchat jid Prod', function() {
      var result;
      result = Matchers.isNitroContact('something@conference.reuters.net');
      return result.should.be["false"];
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","util/matchers":"util/matchers"}],"spec/util/rate_limiter_spec":[function(require,module,exports){
var RateLimiter, _, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon, expect = ref.expect;

RateLimiter = require('util/rate_limiter');

describe('RateLimiter', function() {
  var func, options, rateLimiter;
  rateLimiter = null;
  func = null;
  options = null;
  beforeEach(function() {
    func = sinon.spy(function(arg) {
      return arg;
    });
    return options = {
      max: 1,
      time: 1000,
      context: window,
      errorMessage: "Error"
    };
  });
  afterEach(function() {
    func.reset();
    return options = null;
  });
  describe('#constructor()', function() {
    beforeEach(function() {
      return sinon.stub(RateLimiter.prototype, 'addAlias');
    });
    afterEach(function() {
      return RateLimiter.prototype.addAlias.restore();
    });
    it('should add an alias called `invoke`', function() {
      rateLimiter = new RateLimiter(func, options);
      return rateLimiter.addAlias.should.have.been.calledOnce.calledWithExactly('invoke', options);
    });
    it('should throw an error if the function passed in is null', function() {
      expect(function() {
        return new RateLimiter(null, options);
      }).to["throw"](Error);
      expect(function() {
        return new RateLimiter(null, options);
      }).to["throw"](RateLimiter.ERROR_FUNCTION_MISSING);
      return rateLimiter.addAlias.should.not.have.been.called;
    });
    it('should throw an error if the function passed in is undefined', function() {
      expect(function() {
        return new RateLimiter(void 0, options);
      }).to["throw"](Error);
      expect(function() {
        return new RateLimiter(void 0, options);
      }).to["throw"](RateLimiter.ERROR_FUNCTION_MISSING);
      return rateLimiter.addAlias.should.not.have.been.called;
    });
    return it('should throw an error if the function passed in is not a real function', function() {
      expect(function() {
        return new RateLimiter({}, options);
      }).to["throw"](Error);
      expect(function() {
        return new RateLimiter({}, options);
      }).to["throw"](RateLimiter.ERROR_FUNCTION_MISSING);
      expect(function() {
        return new RateLimiter(1, options);
      }).to["throw"](Error);
      expect(function() {
        return new RateLimiter(1, options);
      }).to["throw"](RateLimiter.ERROR_FUNCTION_MISSING);
      expect(function() {
        return new RateLimiter("1", options);
      }).to["throw"](Error);
      expect(function() {
        return new RateLimiter("1", options);
      }).to["throw"](RateLimiter.ERROR_FUNCTION_MISSING);
      return rateLimiter.addAlias.should.not.have.been.called;
    });
  });
  describe('#addAlias()', function() {
    beforeEach(function() {
      sinon.spy(_, 'limit');
      return rateLimiter = new RateLimiter(func, options);
    });
    afterEach(function() {
      _.limit.restore();
      return rateLimiter = null;
    });
    it('should return a rate limited version of the function', function() {
      var alias;
      alias = rateLimiter.addAlias('alias1');
      return _.isFunction(alias).should.be["true"];
    });
    it('should rate limit a function passed in, using default options', function() {
      rateLimiter.addAlias('alias1');
      return _.limit.should.have.been.calledTwice.calledWithExactly(rateLimiter.invoke, sinon.match({
        max: 1,
        time: 1000,
        context: window,
        errorMessage: "Error"
      }));
    });
    it('should override default values if passing in new options', function() {
      var newOptions;
      newOptions = {
        max: 2,
        time: 2000,
        context: this,
        errorMessage: "New Error"
      };
      rateLimiter.addAlias('alias1', newOptions);
      return _.limit.should.have.been.calledTwice.calledWithExactly(rateLimiter.invoke, sinon.match({
        max: 2,
        time: 2000,
        errorMessage: "New Error"
      }));
    });
    return it('should add a public method with a rate limited version of the function', function() {
      rateLimiter.addAlias('alias1');
      rateLimiter.alias1(1).should.equal(1);
      return rateLimiter.alias1(2).should.eql(new Error(options.errorMessage));
    });
  });
  return describe('multiple aliases and rate limiting', function() {
    var aliasErrorMsg, originalErrorMsg;
    originalErrorMsg = null;
    aliasErrorMsg = null;
    beforeEach(function() {
      originalErrorMsg = "Original Error";
      aliasErrorMsg = "Alias Error";
      return rateLimiter = new RateLimiter(func, {
        max: 2,
        time: 1000,
        errorMessage: originalErrorMsg
      });
    });
    afterEach(function() {
      originalErrorMsg = null;
      return aliasErrorMsg = null;
    });
    it('should limit the calls to the stricter limiter when stricter is default', function() {
      var alias1, alias1Options;
      alias1Options = {
        max: 3,
        time: 1000,
        errorMessage: aliasErrorMsg
      };
      alias1 = rateLimiter.addAlias('alias1', alias1Options);
      alias1(1).should.equal(1);
      alias1(2).should.equal(2);
      return alias1(3).should.eql(new Error(originalErrorMsg));
    });
    it('should limit the calls to the stricter limiter when stricter is an alias', function() {
      var alias1, alias1Options;
      alias1Options = {
        max: 1,
        time: 1000,
        errorMessage: aliasErrorMsg
      };
      alias1 = rateLimiter.addAlias('alias1', alias1Options);
      alias1(1).should.equal(1);
      return alias1(1).should.eql(new Error(aliasErrorMsg));
    });
    return it('should limit the calls from multiple aliases to strictest of limits', function() {
      var alias1, alias2, aliasOptions;
      aliasOptions = {
        max: 2,
        time: 1000,
        errorMessage: aliasErrorMsg
      };
      alias1 = rateLimiter.addAlias('alias1', aliasOptions);
      alias2 = rateLimiter.addAlias('alias2', aliasOptions);
      alias1(1).should.equal(1);
      alias2(2).should.equal(2);
      return alias1(3).should.eql(new Error(originalErrorMsg));
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","util/rate_limiter":"util/rate_limiter"}],"spec/util/retryer_spec":[function(require,module,exports){
var Q, _, assert, expect, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon, assert = ref.assert, expect = ref.expect;

Q = require('q');

_.mixin(require('util/retryer'));

describe('_.retry()', function() {
  it('should accept a context for the function call', function(done) {
    var context, func, subject;
    context = {};
    func = sinon.spy(function(obj) {
      if (obj == null) {
        obj = {};
      }
      this.should.equal(context);
      return Q();
    });
    subject = _.retry(func, {
      context: context
    });
    return subject().should.eventually.be.fulfilled.notify(done);
  });
  describe('retrying synchonous functions', function() {
    var getPromiseSpyReturnsTrueOnThirdCall;
    getPromiseSpyReturnsTrueOnThirdCall = function() {
      var funcCalls;
      funcCalls = 0;
      return sinon.spy(function() {
        return ++funcCalls === 3;
      });
    };
    it('should fulfill a promise once its function call succeeds on the first attempt', function(done) {
      var func, subject;
      func = sinon.stub().returns(true);
      subject = _.retry(func);
      return subject().should.eventually.be.fulfilled.then(function() {
        return func.should.have.been.calledOnce;
      }).should.notify(done);
    });
    it('should fail a promise once its function call fails on the first attempt', function(done) {
      var func, subject;
      func = sinon.stub().returns(false);
      subject = _.retry(func);
      return subject().should.eventually.be.rejected.then(function() {
        return func.should.have.been.calledOnce;
      }).should.notify(done);
    });
    it('should reject a promise once function fails a max of 3 times', function(done) {
      var func, subject;
      func = sinon.stub().returns(false);
      subject = _.retry(func, {
        max: 3
      });
      return subject().should.eventually.be.rejected.then(function() {
        return func.should.have.been.calledThrice;
      }).should.notify(done);
    });
    return it('should fulfill a promise once its function call succeeds on the third attempt', function(done) {
      var func, subject;
      func = getPromiseSpyReturnsTrueOnThirdCall();
      subject = _.retry(func, {
        max: 3
      });
      return subject().should.eventually.be.fulfilled.then(function() {
        return func.should.have.been.calledThrice;
      }).should.notify(done);
    });
  });
  return describe('retrying asynchonous functions', function() {
    var getPromiseSpyFulfilledOnThirdCall;
    getPromiseSpyFulfilledOnThirdCall = function() {
      var funcCalls;
      funcCalls = 0;
      return sinon.spy(function() {
        if (++funcCalls === 3) {
          return Q();
        } else {
          return Q.reject();
        }
      });
    };
    it('should fulfill a promise once its functional call succeeds on the first attempt', function(done) {
      var func, subject;
      func = sinon.stub().returns(Q());
      subject = _.retry(func);
      return subject().should.eventually.be.fulfilled.then(function() {
        return func.should.have.been.calledOnce;
      }).should.notify(done);
    });
    it('should fail a promise once its functional call fails on the first attempt', function(done) {
      var func, subject;
      func = sinon.stub().returns(Q.reject());
      subject = _.retry(func);
      return subject().should.eventually.be.rejected.then(function() {
        return func.should.have.been.calledOnce;
      }).should.notify(done);
    });
    it('should reject a promise once failed calls reaches the max of 3', function(done) {
      var func, subject;
      func = sinon.stub().returns(Q.reject());
      subject = _.retry(func, {
        max: 3
      });
      return subject().should.eventually.be.rejected.then(function() {
        return func.should.have.been.calledThrice;
      }).should.notify(done);
    });
    it('should accept a max number of attempts', function(done) {
      var func, subject;
      func = getPromiseSpyFulfilledOnThirdCall();
      subject = _.retry(func, {
        max: 3
      });
      return subject().should.eventually.be.fulfilled.then(function() {
        return func.should.have.been.calledThrice;
      }).should.notify(done);
    });
    it('should accept a function returning a wait interval', function(done) {
      var func, getWait, subject;
      func = getPromiseSpyFulfilledOnThirdCall();
      getWait = sinon.spy(function() {
        return 200;
      });
      subject = _.retry(func, {
        max: 3,
        wait: getWait
      });
      return subject().should.eventually.be.fulfilled.then(function() {
        func.should.have.been.calledThrice;
        return getWait.should.have.been.calledTwice;
      }).should.notify(done);
    });
    it('should accept a wait function and invoke it at each interval', function(done) {
      var func, getWait, subject;
      func = getPromiseSpyFulfilledOnThirdCall();
      getWait = sinon.spy();
      subject = _.retry(func, {
        max: 3,
        wait: getWait
      });
      return subject().should.eventually.be.fulfilled.then(function() {
        func.should.have.been.calledThrice;
        getWait.should.have.been.calledTwice;
        getWait.withArgs(1).should.have.been.calledOnce;
        return getWait.withArgs(2).should.have.been.calledOnce;
      }).should.notify(done);
    });
    it('it should report incremental progress with each attempt number', function(done) {
      var func, progressStub, subject;
      func = getPromiseSpyFulfilledOnThirdCall();
      progressStub = sinon.stub();
      subject = _.retry(func, {
        max: 3,
        wait: 100,
        progress: progressStub
      });
      return subject().should.eventually.be.fulfilled.then(function() {
        return progressStub.should.have.been.calledTwice.calledWith(sinon.match.object, 1, 3, 100).calledWith(sinon.match.object, 2, 3, 100);
      }).should.notify(done);
    });
    return it('should be able to pass arguments through the retryer to the function call', function(done) {
      var func, subject;
      func = sinon.stub().returns(Q());
      subject = _.retry(func);
      return subject("a", "b", "c").should.eventually.be.fulfilled.then(function() {
        return func.should.have.been.calledOnce.calledWith("a", "b", "c", {
          attempt: 1
        });
      }).should.notify(done);
    });
  });
});


},{"q":47,"spec/spec_helper":"spec/spec_helper","util/retryer":"util/retryer"}],"spec/util/utils_spec":[function(require,module,exports){
var Utils, _, expect, ref, sinon;

ref = require('spec/spec_helper'), sinon = ref.sinon, expect = ref.expect, _ = ref._;

Utils = require('util/utils');

describe('Utils', function() {
  describe('#conditional()', function() {
    var func;
    func = null;
    before(function() {
      return func = sinon.stub();
    });
    after(function() {
      return func = null;
    });
    afterEach(function() {
      return func.reset();
    });
    it('should return a function', function() {
      var condition;
      condition = function() {
        return true;
      };
      return Utils.conditional(func, condition).should.be.a.Function;
    });
    it('should allow the original function to be called when condition is met', function() {
      var condition, conditionalFunc;
      condition = function() {
        return true;
      };
      conditionalFunc = Utils.conditional(func, condition);
      conditionalFunc();
      return func.should.have.been.calledOnce;
    });
    it('should allow the original function to be called with args when condition is met', function() {
      var condition, conditionalFunc;
      condition = function() {
        return true;
      };
      conditionalFunc = Utils.conditional(func, condition);
      conditionalFunc('test');
      return func.should.have.been.calledOnce.calledWithExactly('test');
    });
    it('should allow the original function to return its own value when condition is met', function() {
      var condition, conditionalFunc;
      func.returns('return value');
      condition = function() {
        return true;
      };
      conditionalFunc = Utils.conditional(func, condition);
      return conditionalFunc().should.equal('return value');
    });
    return it('should return make the original function return null if condition is not met', function() {
      var condition, conditionalFunc;
      condition = function() {
        return false;
      };
      conditionalFunc = Utils.conditional(func, condition);
      expect(conditionalFunc()).to.be["null"];
      return func.should.not.have.been.called;
    });
  });
  describe('#returnBoolean()', function() {
    var func;
    func = null;
    beforeEach(function() {
      return func = sinon.stub();
    });
    afterEach(function() {
      return func.reset();
    });
    it('should decorate a function that returns true by default', function() {
      Utils.returnBoolean(func)().should.be["true"];
      Utils.returnBoolean(func, null)().should.be["true"];
      Utils.returnBoolean(func, void 0)().should.be["true"];
      return func.should.have.been.calledThrice;
    });
    it('should decorate a function that returns true when specified', function() {
      var boolFunc;
      boolFunc = Utils.returnBoolean(func, true);
      boolFunc().should.be["true"];
      return func.should.have.been.calledOnce;
    });
    it('should decorate a function that returns false when specified', function() {
      var boolFunc;
      boolFunc = Utils.returnBoolean(func, false);
      boolFunc().should.be["false"];
      return func.should.have.been.calledOnce;
    });
    it('should decorate a function that accepts the args of the original function', function() {
      var boolFunc;
      boolFunc = Utils.returnBoolean(func);
      boolFunc("a", "b");
      return func.should.have.been.calledOnce.calledWithExactly("a", "b");
    });
    it('should coerce a value to true', function() {
      Utils.returnBoolean(func, 1)().should.be["true"];
      Utils.returnBoolean(func, 10)().should.be["true"];
      Utils.returnBoolean(func, {})().should.be["true"];
      Utils.returnBoolean(func, "a")().should.be["true"];
      return Utils.returnBoolean(func, ["a"].length)().should.be["true"];
    });
    return it('should coerce a value to false', function() {
      Utils.returnBoolean(func, 0)().should.be["false"];
      Utils.returnBoolean(func, "")().should.be["false"];
      return Utils.returnBoolean(func, [].length)().should.be["false"];
    });
  });
  return describe('#array', function() {
    it('should return an array if passed one', function() {
      var array;
      array = [];
      return Utils.array(array).should.equal(array);
    });
    it('should return an array if passed an object', function() {
      var array, obj;
      obj = "value";
      array = Utils.array(obj);
      array.should.be.an["instanceof"](Array);
      return array[0].should.equal("value");
    });
    it('should return the same array if passed an array', function() {
      var array;
      array = ["a", "b"];
      return Utils.array(array).should.equal(array);
    });
    return it('should convert multiple strings to multiple arrays', function() {
      var a, args, b, c, ref1;
      args = ["a", "b", "c"];
      ref1 = Utils.array.apply(this, args), a = ref1[0], b = ref1[1], c = ref1[2];
      a.should.be.an["instanceof"](Array);
      a[0].should.equal("a");
      b.should.be.an["instanceof"](Array);
      b[0].should.equal("b");
      c.should.be.an["instanceof"](Array);
      return c[0].should.equal("c");
    });
  });
});


},{"spec/spec_helper":"spec/spec_helper","util/utils":"util/utils"}],"spec/util/xmpp_utils_spec":[function(require,module,exports){
var _, ref, sinon;

ref = require('spec/spec_helper'), _ = ref._, sinon = ref.sinon;

require('util/xmpp_utils');


},{"spec/spec_helper":"spec/spec_helper","util/xmpp_utils":"util/xmpp_utils"}],"strophe/strophe_blocklist":[function(require,module,exports){
var Strophe, _, getIQStanza;

_ = require('underscore');

Strophe = require('strophe');

exports.getBlocklistStanza = function() {
  return getIQStanza('blocklist');
};

exports.getBlockStanza = function(jids) {
  return getIQStanza('block', 'set', jids);
};

exports.getUnblockStanza = function(jids) {
  return getIQStanza('unblock', 'set', jids);
};

getIQStanza = function(name, type, jids) {
  var i, jid, len, stanza;
  if (type == null) {
    type = 'get';
  }
  if (jids == null) {
    jids = [];
  }
  stanza = $iq({
    type: type
  }).c(name, {
    xmlns: 'urn:xmpp:blocking'
  });
  for (i = 0, len = jids.length; i < len; i++) {
    jid = jids[i];
    stanza.c('item', {
      jid: jid
    }).up();
  }
  return stanza;
};


},{"strophe":"lib/strophe","underscore":85}],"strophe/strophe_disco":[function(require,module,exports){
var MUCNS;

MUCNS = require('enum/muc_ns');

exports.getDiscoStanza = function(jid) {
  return $iq({
    to: jid,
    type: 'get'
  }).c('query', {
    xmlns: MUCNS.DISCO_INFO
  }).up();
};


},{"enum/muc_ns":"enum/muc_ns"}],"strophe/strophe_io":[function(require,module,exports){
var Utils, _, getListenerInvoker,
  slice = [].slice;

Utils = require('util/utils');

_ = require('underscore');

getListenerInvoker = function(getListenersFn) {
  return function() {
    var args;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    return getListenersFn().forEach(function(f) {
      return f.apply(null, args);
    });
  };
};

module.exports = {
  rawInputListeners: [],
  rawOutputListeners: [],
  xmlInputListeners: [],
  xmlOutputListeners: [],
  connectIOListeners: function(options) {
    var connection, getRawInputListeners, getRawOutputListeners, getXMLInputListeners, getXMLOutputListeners;
    if (options == null) {
      options = {};
    }
    connection = options.connection;
    getRawInputListeners = options.getRawInputListeners, getRawOutputListeners = options.getRawOutputListeners;
    getXMLInputListeners = options.getXMLInputListeners, getXMLOutputListeners = options.getXMLOutputListeners;
    connection.rawInput = getListenerInvoker(getRawInputListeners);
    connection.rawOutput = getListenerInvoker(getRawOutputListeners);
    connection.xmlInput = getListenerInvoker(getXMLInputListeners);
    return connection.xmlOutput = getListenerInvoker(getXMLOutputListeners);
  },
  addIOListener: function(callback, list) {
    var listeners;
    listeners = Utils.array(callback);
    listeners.forEach(function(cb) {
      return list.push(cb);
    });
    return function() {
      var firstCallback, index;
      firstCallback = _.isArray(callback) ? callback[0] : callback;
      index = list.indexOf(firstCallback);
      return list.splice(index, listeners.length);
    };
  }
};


},{"underscore":85,"util/utils":"util/utils"}],"strophe/strophe_messaging":[function(require,module,exports){
var ACKNS, ChatStatesNS, HISTORY_MAX, HistoryNS, Matchers, MessageType, Strophe, getBeforeStanza, getMaxStanza;

Strophe = require('strophe');

MessageType = require('enum/message_type');

HistoryNS = require('enum/history_ns');

ACKNS = require('enum/ack_ns');

Matchers = require('util/matchers');

ChatStatesNS = require('enum/chat_states_ns');

HISTORY_MAX = 50;

exports.getSendStanza = function(jid, body, type, id) {
  var message;
  if (type == null) {
    type = MessageType.CHAT;
  }
  if (!(jid && body)) {
    return null;
  }
  message = $msg({
    to: jid,
    type: type,
    id: id
  }).c('body', {}, body);
  if (!Matchers.isGroupchat(jid)) {
    message.c('request', {
      xmlns: ACKNS.NITRO_RECEIPTS
    }).up();
  }
  if (Matchers.isManagedGroupchat(jid)) {
    message.c('request', {
      xmlns: ACKNS.STANDARD_RECEIPTS
    }).up();
  }
  message.c('active', {
    xmlns: ChatStatesNS.CHAT_STATES
  }).up();
  if (type === MessageType.GROUPCHAT) {
    message.c('x', {
      xmlns: 'http://jabber.org/protocol/muc'
    });
  }
  return message;
};

exports.getChatHistoryStanza = function(jid, before, max) {
  var beforeStanza, stanza;
  if (max == null) {
    max = HISTORY_MAX;
  }
  stanza = $iq({
    xmlns: Strophe.NS.CLIENT,
    type: 'set'
  }).c('query', {
    xmlns: HistoryNS.CHAT_HISTORY
  }).c('with').t(jid).up().c('set', {
    xmlns: HistoryNS.RSM
  });
  stanza.cnode(getMaxStanza(max).tree());
  stanza.up();
  if (beforeStanza = getBeforeStanza(before)) {
    stanza.cnode(beforeStanza.tree());
    stanza.up();
  }
  return stanza;
};

exports.getGroupchatHistoryStanza = function(jid, before, max) {
  var beforeStanza, stanza;
  if (max == null) {
    max = HISTORY_MAX;
  }
  stanza = $iq({
    xmlns: Strophe.NS.CLIENT,
    type: 'set',
    to: jid
  }).c('query', {
    xmlns: HistoryNS.CHAT_HISTORY
  }).c('set', {
    xmlns: HistoryNS.RSM
  });
  stanza.cnode(getMaxStanza(max).tree());
  stanza.up();
  if (beforeStanza = getBeforeStanza(before)) {
    stanza.cnode(beforeStanza.tree());
    stanza.up();
  }
  return stanza;
};

exports.getManagedHistoryStanza = function(jid, before, max) {
  var beforeStanza, stanza;
  if (max == null) {
    max = HISTORY_MAX;
  }
  stanza = $iq({
    xmlns: Strophe.NS.CLIENT,
    to: jid,
    type: 'set'
  }).c('query', {
    xmlns: HistoryNS.SEARCH
  }).c('set', {
    xmlns: HistoryNS.RSM
  });
  stanza.cnode(getMaxStanza(max).tree());
  stanza.up();
  if (beforeStanza = getBeforeStanza(before)) {
    stanza.cnode(beforeStanza.tree());
    stanza.up();
  }
  return stanza;
};

exports.getTypingStanza = function(jid) {
  return $msg({
    to: jid
  }).c('composing', {
    xmlns: 'http://jabber.org/protocol/chatstates'
  });
};

getMaxStanza = function(max) {
  if (max == null) {
    max = HISTORY_MAX;
  }
  return new Strophe.Builder('max', {}).t(max);
};

getBeforeStanza = function(before) {
  var stanza;
  stanza = new Strophe.Builder('before', {});
  if (before) {
    stanza.t(before);
  }
  return stanza;
};


},{"enum/ack_ns":"enum/ack_ns","enum/chat_states_ns":"enum/chat_states_ns","enum/history_ns":"enum/history_ns","enum/message_type":"enum/message_type","strophe":"lib/strophe","util/matchers":"util/matchers"}],"strophe/strophe_muc":[function(require,module,exports){
var MUCField, MUCNS, MUCRole, Strophe, _;

_ = require('underscore');

Strophe = require('strophe');

MUCField = require('enum/muc_field');

MUCNS = require('enum/muc_ns');

MUCRole = require('enum/muc_role');

exports.getJoinStanza = function(jid, resourceId) {
  return $pres({
    to: jid + "/" + resourceId
  }).c('x', {
    xmlns: MUCNS.ROOT
  });
};

exports.getLeaveStanza = function(jid) {
  return $pres({
    to: jid,
    type: 'unavailable'
  }).c('x', {
    xmlns: MUCNS.ROOT
  });
};

exports.getDestroyGroupchatStanza = function(jid) {
  return $iq({
    to: jid,
    type: 'set'
  }).c('query', {
    xmlns: MUCNS.OWNER
  }).c('destroy');
};

exports.getGroupchatConfigForm = function(jid, fieldName, fieldValue) {
  var stanza;
  stanza = $iq({
    to: jid,
    type: 'set'
  }).c('query', {
    xmlns: MUCNS.OWNER
  }).c('x', {
    xmlns: 'jabber:x:data',
    type: 'submit'
  }).c('field', {
    "var": MUCField.FORM_TYPE
  }).c('value').t(MUCNS.ROOT + "#roomconfig").up().up();
  return stanza.c('field', {
    "var": fieldName
  }).c('value').t(fieldValue).up().up();
};

exports.getRoomDiscoStanza = function(jid) {
  return $iq({
    to: jid,
    type: 'get'
  }).c('query', {
    xmlns: MUCNS.DISCO_INFO
  }).up();
};

exports.getManagedRoomDiscoStanza = function(jid) {
  return $iq({
    to: jid,
    type: 'get'
  }).c('query', {
    xmlns: MUCNS.OWNER
  }).up();
};

exports.getMemberListStanza = function(jid, affiliations) {
  var affiliation, i, len, stanza;
  if (affiliations == null) {
    affiliations = [];
  }
  stanza = $iq({
    to: jid,
    type: 'get'
  });
  stanza.c('query', {
    xmlns: MUCNS.ADMIN
  });
  for (i = 0, len = affiliations.length; i < len; i++) {
    affiliation = affiliations[i];
    stanza.c('item', {
      affiliation: affiliation
    }).up();
  }
  return stanza;
};

exports.getMediatedInviteStanza = function(jid, selfJID, invitees, type) {
  var i, invitee, len, stanza;
  if (invitees == null) {
    invitees = [];
  }
  if (type == null) {
    type = '';
  }
  stanza = $msg({
    to: jid
  }).c('x', {
    xmlns: MUCNS.USER
  });
  for (i = 0, len = invitees.length; i < len; i++) {
    invitee = invitees[i];
    stanza.c('invite', {
      to: invitee,
      from: selfJID
    });
    if (type) {
      stanza.c('reason', {}, JSON.stringify({
        type: type
      }));
    }
    stanza.up();
  }
  return stanza;
};

exports.getDeclineMediatedInviteStanza = function(jid, inviter, reason) {
  var $rejectInviteMessage;
  if (reason == null) {
    reason = '';
  }
  $rejectInviteMessage = $msg({
    to: jid
  }).c('x', {
    xmlns: 'http://jabber.org/protocol/muc#user'
  }).c("decline", {
    to: inviter
  });
  if (!_.isEmpty(reason)) {
    $rejectInviteMessage.c('reason', {}, reason);
  }
  return $rejectInviteMessage;
};

exports.getSearchStanza = function(jid, match, max) {
  if (match == null) {
    match = '';
  }
  if (max == null) {
    max = 5;
  }
  return $iq({
    xmlns: 'jabber:client',
    to: jid,
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:search'
  }).c('set', {
    xmlns: 'http://jabber.org/protocol/rsm'
  }).c('max', {}, max.toString()).up().c('name', {}, match);
};

exports.getKickStanza = function(jid, users, reason) {
  var i, len, stanza, user;
  if (users == null) {
    users = [];
  }
  stanza = $iq({
    to: jid,
    type: 'set'
  }).c('query', {
    xmlns: MUCNS.ADMIN
  });
  for (i = 0, len = users.length; i < len; i++) {
    user = users[i];
    stanza.c('item', {
      jid: user,
      affiliation: MUCRole.NONE
    });
    if (!_.isEmpty(reason)) {
      stanza.c('reason', {}, reason).up();
    }
    stanza.up();
  }
  return stanza;
};


},{"enum/muc_field":"enum/muc_field","enum/muc_ns":"enum/muc_ns","enum/muc_role":"enum/muc_role","strophe":"lib/strophe","underscore":85}],"strophe/strophe_presence":[function(require,module,exports){
var Strophe, XMPPPresence, _;

_ = require('underscore');

Strophe = require('strophe');

XMPPPresence = require('enum/xmpp_presence');

exports.PRESENCE = 'presence';

exports.VISIBLE = 'visible';

exports.INVISIBLE = 'invisible';

exports.getPresenceStanza = function(jid, type, show) {
  var stanza;
  if (jid == null) {
    jid = '';
  }
  if (type == null) {
    type = '';
  }
  if (show == null) {
    show = '';
  }
  stanza = $pres();
  if (jid && _.isString(jid)) {
    stanza.attrs({
      to: jid
    });
  }
  if (type && _.isString(type)) {
    stanza.attrs({
      type: type
    });
  }
  if (show && _.isString(show)) {
    stanza.c('show').t(show);
  }
  return stanza;
};

exports.getVisibleStanza = function(visible) {
  var nodeName;
  if (visible == null) {
    visible = true;
  }
  nodeName = visible ? this.VISIBLE : this.INVISIBLE;
  return $iq({
    type: 'set'
  }).c(nodeName, {
    xmlns: 'urn:xmpp:invisible:0'
  });
};


},{"enum/xmpp_presence":"enum/xmpp_presence","strophe":"lib/strophe","underscore":85}],"strophe/strophe_roster":[function(require,module,exports){
var Strophe, _, strophePresence;

_ = require('underscore');

Strophe = require('strophe');

strophePresence = require('strophe/strophe_presence');

exports.getRosterStanza = function(address) {
  var stanza;
  if (address == null) {
    address = '';
  }
  stanza = $iq({
    type: 'get'
  });
  if (address && _.isString(address)) {
    stanza.attrs({
      to: address
    });
  }
  stanza.c('query', {
    xmlns: 'jabber:iq:roster'
  });
  return stanza;
};

exports.getAddStanza = function(jid, name, groups) {
  var group, i, itemData, len, stanza;
  if (groups == null) {
    groups = [];
  }
  stanza = $iq({
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:roster'
  });
  itemData = {
    jid: jid
  };
  if (typeof name === 'string' && name.length) {
    itemData.name = name;
  }
  stanza.c('item', itemData);
  for (i = 0, len = groups.length; i < len; i++) {
    group = groups[i];
    stanza.c('group').t(group).up();
  }
  return stanza;
};

exports.getRemoveStanza = function(jid) {
  if (!jid) {
    return null;
  }
  return $iq({
    type: 'set'
  }).c('query', {
    xmlns: Strophe.NS.ROSTER
  }).c('item', {
    jid: jid,
    subscription: 'remove'
  });
};

exports.getPresenceSubscriptionStanza = function(jid, type) {
  return strophePresence.getPresenceStanza(jid, type);
};


},{"strophe":"lib/strophe","strophe/strophe_presence":"strophe/strophe_presence","underscore":85}],"strophe/strophe_storage":[function(require,module,exports){
var Strophe, _;

_ = require('underscore');

Strophe = require('strophe');

exports.getPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  }).c('preferences', {
    xmlns: 'trm:desktop'
  });
};

exports.setPreferencesStanza = function(preferences) {
  var preferencesStr;
  if (preferences == null) {
    preferences = {};
  }
  if (_.isEmpty(preferences)) {
    return null;
  }
  preferencesStr = JSON.stringify(preferences);
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  }).c('preferences', {
    xmlns: 'trm:desktop'
  }).t(preferencesStr).up();
};

exports.setGlobalPreferencesStanza = function(xml) {
  if (!xml) {
    return null;
  }
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  }).cnode(xml).up();
};

exports.setEMPreferencesStanza = function(xml) {
  if (!xml) {
    return null;
  }
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/em'
  }).cnode(xml).up();
};

exports.setBlastPreferencesStanza = function(xml) {
  if (!xml) {
    return null;
  }
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/blasts'
  }).cnode(xml).up();
};

exports.setConversationPreferencesStanza = function(xml) {
  if (!xml) {
    return null;
  }
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/conversations'
  }).cnode(xml).up();
};

exports.setAlertPreferencesStanza = function(xml) {
  if (!xml) {
    return null;
  }
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/alerts'
  }).cnode(xml).up();
};

exports.getGlobalPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  });
};

exports.getEMPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/em'
  });
};

exports.getBlastsPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/blasts'
  });
};

exports.getConversationPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/conversations'
  });
};

exports.getAlertsPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/alerts'
  });
};

exports.clearPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  }).c('preferences', {
    xmlns: 'trm:desktop'
  }).t('').up();
};

exports.clearGlobalPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:preferences'
  }).t('').up();
};

exports.clearEMPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/em'
  }).t('').up();
};

exports.clearBlastsPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/blasts'
  }).t('').up();
};

exports.clearConversationsPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/conversations'
  }).t('').up();
};

exports.clearAlertsPreferencesStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'https://collab.thomsonreuters.com/storage/alerts'
  }).t('').up();
};

exports.getBookmarksStanza = function() {
  return new Strophe.Builder('iq', {
    type: 'get'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:bookmarks'
  });
};

exports.setBookmarksStanza = function(chatrooms) {
  var chatroom, i, len, sb;
  sb = new Strophe.Builder('iq', {
    type: 'set'
  }).c('query', {
    xmlns: 'jabber:iq:private'
  }).c('storage', {
    xmlns: 'storage:bookmarks'
  });
  for (i = 0, len = chatrooms.length; i < len; i++) {
    chatroom = chatrooms[i];
    sb.c(chatroom.type, chatroom).up();
  }
  return sb;
};


},{"strophe":"lib/strophe","underscore":85}],"strophe/strophe_yahoo_gateway":[function(require,module,exports){
var Strophe, _, strophePresence, stropheRoster;

_ = require('underscore');

Strophe = require('strophe');

stropheRoster = require('strophe/strophe_roster');

strophePresence = require('strophe/strophe_presence');

exports.getRegisterStanza = function(address, username, password, autoLogin) {
  var info, iq;
  if (autoLogin == null) {
    autoLogin = false;
  }
  info = {
    to: address,
    type: 'set'
  };
  iq = $iq(info).c('query', {
    xmlns: 'jabber:iq:register'
  }).c('x', {
    xmlns: 'jabber:x:data',
    type: 'submit'
  }).c('field', {
    "var": 'FORM_TYPE'
  }).c('value').t('jabber:iq:register').up().up();
  iq.c('field', {
    "var": 'username'
  }).c('value').t(username).up().up().c('field', {
    "var": 'password'
  }).c('value').t(password).up().up();
  if (autoLogin) {
    iq.c('field', {
      "var": 'autologin'
    }).c('value').t('1').up().up();
  }
  return iq;
};

exports.getUnregisterStanza = function(address) {
  var info;
  info = {
    to: address,
    type: 'set'
  };
  return $iq(info).c('query', {
    xmlns: 'jabber:iq:register'
  }).c('remove');
};

exports.getRosterStanza = function(address) {
  if (!address) {
    return null;
  }
  return stropheRoster.getRosterStanza(address);
};

exports.getSubscriptionStanza = function(address, type, show) {
  if (!(address && type)) {
    return null;
  }
  return strophePresence.getPresenceStanza(address, type, show);
};

exports.getAddContactStanza = function(jid) {
  if (!jid) {
    return null;
  }
  return strophePresence.getPresenceStanza(jid, 'subscribe');
};

exports.getAllowContactStanza = function(jid) {
  if (!jid) {
    return null;
  }
  return strophePresence.getPresenceStanza(jid, 'subscribed');
};

exports.getRemoveContactStanza = function(jid) {
  if (!jid) {
    return null;
  }
  return strophePresence.getPresenceStanza(jid, 'unsubscribe');
};


},{"strophe":"lib/strophe","strophe/strophe_presence":"strophe/strophe_presence","strophe/strophe_roster":"strophe/strophe_roster","underscore":85}],"util/limit":[function(require,module,exports){
var ERROR_CALL_MAX_INDEFINITE, ERROR_DEFAULT, ERROR_MAX_0, _, positiveInt;

_ = require('underscore');

ERROR_DEFAULT = "You have exceeded the number of allowable function calls for this time period";

ERROR_MAX_0 = "The allowable number of function calls is 0";

ERROR_CALL_MAX_INDEFINITE = "You have exceeded the number of allowable function calls";

exports.limit = function(func, options) {
  var calls, context, errorMessage, max, noReset, ref, time;
  if (options == null) {
    options = {};
  }
  ref = _.defaults(options, {
    context: window,
    errorMessage: ERROR_DEFAULT
  }), max = ref.max, time = ref.time, context = ref.context, errorMessage = ref.errorMessage;
  max = positiveInt(max, 1);
  time = positiveInt(time, 1000);
  calls = [];
  noReset = time ? false : true;
  return function() {
    var now, refIndex, refTime;
    now = new Date().getTime();
    if (max === 0) {
      return new Error(ERROR_MAX_0);
    }
    if ((calls.length >= max) && noReset) {
      return new Error(ERROR_CALL_MAX_INDEFINITE);
    }
    if ((refIndex = calls.length - max) >= 0) {
      if ((refTime = calls[refIndex]) >= 0) {
        if (now - refTime < time) {
          return new Error(errorMessage);
        } else {
          calls = [];
        }
      }
    }
    calls.push(now);
    return func.apply(context, arguments);
  };
};

positiveInt = function(n, defaultVal) {
  var num;
  num = Number(n);
  if (num >= 0) {
    return ~~num;
  } else {
    return defaultVal;
  }
};

module.exports = exports;


},{"underscore":85}],"util/matchers":[function(require,module,exports){
exports.isGroupchat = function(jid) {
  return /@(conference|legacychat)\./i.test(jid);
};

exports.isManagedGroupchat = function(jid) {
  return /@legacychat\./i.test(jid);
};

exports.isBilateralGroupchat = function(jid) {
  return /@conference\./i.test(jid);
};

exports.isYahoo = function(jid) {
  return /.*@(yahoo|rocketmail|ymail)\./.test(jid);
};

exports.isNitroContact = function(jid) {
  return /.*@(reuasmb|reuters)\.net/.test(jid);
};


},{}],"util/not":[function(require,module,exports){
module.exports.not = function(func) {
  return function() {
    return !func.apply(this, arguments);
  };
};


},{}],"util/promise":[function(require,module,exports){
var Q;

Q = require('q');

module.exports = function(fn) {
  return Q.Promise(fn).fail(function(data) {
    var error;
    if (data == null) {
      data = {};
    }
    error = data instanceof Error ? data : new Error();
    error.data = data;
    throw error;
  });
};


},{"q":47}],"util/rate_limiter":[function(require,module,exports){
var RateLimiter, _;

_ = require('underscore');

_.mixin(require('util/limit'));

RateLimiter = (function() {
  RateLimiter.ERROR_FUNCTION_MISSING = "Function is missing or invalid";

  RateLimiter.prototype._func = null;

  RateLimiter.prototype._max = null;

  RateLimiter.prototype._time = null;

  RateLimiter.prototype._context = null;

  RateLimiter.prototype._errorMessage = null;

  function RateLimiter(func, options) {
    var context, errorMessage, max, time;
    if (options == null) {
      options = {};
    }
    max = options.max, time = options.time, context = options.context, errorMessage = options.errorMessage;
    this._func = func;
    this._max = max;
    this._time = time;
    this._context = context;
    this._errorMessage = errorMessage;
    if (!_.isFunction(this._func)) {
      throw new Error(this.constructor.ERROR_FUNCTION_MISSING);
    }
    this.addAlias('invoke', options);
    return this;
  }

  RateLimiter.prototype.addAlias = function(name, options) {
    var opts;
    if (options == null) {
      options = {};
    }
    opts = _.defaults(options, {
      max: this._max,
      time: this._time,
      context: this._context,
      errorMessage: this._errorMessage
    });
    if (!name) {
      return null;
    }
    return this[name] = _.limit(this.invoke || this._func, opts);
  };

  return RateLimiter;

})();

module.exports = RateLimiter;


},{"underscore":85,"util/limit":"util/limit"}],"util/retryer":[function(require,module,exports){
var ALL_ATTEMPTS_FAILED, ATTEMPT_FAILED, Q, TIMED_OUT, _, validateMaxRetries,
  slice = [].slice;

_ = require('underscore');

Q = require('q');

_.mixin(require('util/utils'));

ATTEMPT_FAILED = "Attempt failed:";

ALL_ATTEMPTS_FAILED = "All attempts have failed.";

TIMED_OUT = "The retryer has timed out.";

exports.retry = function(func, options) {
  var attempt, context, dfd, intervalTimeout, invoke, max, progress, ref, timeout, timeoutId, wait;
  if (options == null) {
    options = {};
  }
  ref = _.defaults(options, {
    timeout: 2 * 60 * 1000,
    context: null
  }), max = ref.max, wait = ref.wait, timeout = ref.timeout, context = ref.context, progress = ref.progress;
  max = validateMaxRetries(max, 1);
  wait = _.toFunction(wait || 0);
  attempt = 0;
  dfd = Q.defer();
  timeoutId = null;
  intervalTimeout = null;
  return invoke = function() {
    var args, funcArgs, onFail, retVal;
    args = 1 <= arguments.length ? slice.call(arguments, 0) : [];
    timeoutId = setTimeout(function() {
      var msg;
      msg = TIMED_OUT;
      dfd.reject(new Error(msg));
      return clearTimeout(intervalTimeout);
    }, timeout);
    funcArgs = args.concat([
      {
        attempt: ++attempt
      }
    ]);
    retVal = func.apply(context, funcArgs);
    onFail = function(error) {
      var waitInterval;
      if (attempt < max) {
        console.log(ATTEMPT_FAILED + " " + attempt + " of " + max);
        waitInterval = wait(attempt, max);
        if (_.isFunction(progress)) {
          progress(retVal, attempt, max, waitInterval);
        }
        return intervalTimeout = setTimeout((function() {
          return invoke.apply(context, args);
        }), waitInterval);
      } else {
        console.log(ALL_ATTEMPTS_FAILED);
        return dfd.reject(new Error(ALL_ATTEMPTS_FAILED));
      }
    };
    Q(retVal).then(function(data) {
      if (data === retVal) {
        if (!data) {
          throw new Error("Syncronous return value is falsy");
        }
      }
      clearTimeout(timeoutId);
      return data;
    }).then(dfd.resolve)["catch"](onFail);
    return dfd.promise;
  };
};

validateMaxRetries = function(n, defaultValue) {
  if (typeof n === 'number' && Math.round(n) === n && n >= 1) {
    return n;
  } else {
    console.warn("[Retryer] max retries value is an invalid number, using default value of " + defaultValue + ".");
    return defaultValue;
  }
};


},{"q":47,"underscore":85,"util/utils":"util/utils"}],"util/utils":[function(require,module,exports){
var _;

_ = require('underscore');

exports.conditional = function(func, condition) {
  if (typeof condition !== 'function') {
    return func;
  }
  return function() {
    if (condition.apply(null, arguments)) {
      return func.apply(null, arguments);
    } else {
      return null;
    }
  };
};

exports.returnBoolean = function(func, bool) {
  if (bool == null) {
    bool = true;
  }
  return function() {
    func.apply(null, arguments);
    return !!bool;
  };
};

exports.array = function() {
  var args, convertToArray, i, len, obj, results;
  args = Array.prototype.slice.call(arguments, 0);
  convertToArray = function(obj) {
    if (_.isArray(obj)) {
      return obj;
    } else {
      return _.compact([obj]);
    }
  };
  if (args.length === 1) {
    return convertToArray(args[0]);
  } else {
    results = [];
    for (i = 0, len = args.length; i < len; i++) {
      obj = args[i];
      results.push(convertToArray(obj));
    }
    return results;
  }
};

exports.returnBool = this.returnBoolean;

exports.tryCatch = function(func, level) {
  if (level == null) {
    level = 'warn';
  }
  return function() {
    var error, error1;
    try {
      return func();
    } catch (error1) {
      error = error1;
      console[level](error.message);
      return null;
    }
  };
};

exports.toFunction = function(obj) {
  var theObj;
  theObj = obj;
  if (_.isFunction(theObj)) {
    return theObj;
  } else {
    return function() {
      return theObj;
    };
  }
};


},{"underscore":85}],"util/xmpp_utils":[function(require,module,exports){
var PresenceShow, Strophe, XMPPPresence, _;

_ = require('underscore');

XMPPPresence = require('enum/xmpp_presence');

PresenceShow = require('enum/presence_show');

Strophe = require('strophe');

exports.getXMPPDomain = function(jid) {
  var xmppDomain;
  jid = Strophe.getBareJidFromJid(jid);
  if (xmppDomain = /@.+$/.exec(jid)) {
    return xmppDomain[0].substr(1);
  } else {
    return "";
  }
};

exports.xmppPresenceToShow = function(presence) {
  switch (presence) {
    case XMPPPresence.AWAY:
      return PresenceShow.AWAY;
    case XMPPPresence.EXTENDED_AWAY:
      return PresenceShow.EXTENDED_AWAY;
    case XMPPPresence.DND:
      return PresenceShow.DND;
    default:
      return '';
  }
};

exports.xmppPresenceToType = function(presence) {
  if (presence === XMPPPresence.UNAVAILABLE) {
    return XMPPPresence.UNAVAILABLE;
  } else {
    return null;
  }
};

exports.emailToJID = function(email, xmppDomain) {
  if (email == null) {
    email = '';
  }
  if (!(xmppDomain && /@/.test(email))) {
    return email;
  }
  return (email.replace('@', '.')) + "@" + xmppDomain;
};


},{"enum/presence_show":"enum/presence_show","enum/xmpp_presence":"enum/xmpp_presence","strophe":"lib/strophe","underscore":85}]},{},["nitro"])
//# sourceMappingURL=data:application/json;charset:utf-8;base64,
